<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/uncategorized/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>11 冗余磁盘阵列（RAID）</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84/11%20%E5%86%97%E4%BD%99%E7%A3%81%E7%9B%98%E9%98%B5%E5%88%97%EF%BC%88RAID%EF%BC%89/</url>
    <content><![CDATA[<h4 align="center">图片来源：南京大学软件学院COA课程PPT</h4>
<h5 align="center">©author:zzb</h5>
<div style="text-align: center"><a href="https://github.com/wbl-z">Github主页</a>  <a href="https://blog.csdn.net/m0_51691879">CSDN主页</a></div> 
<h1>11 冗余磁盘阵列（RAID）</h1>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211124201947610.png" alt="image-20211124201947610"></p>
<span id="more"></span>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211124202340250.png" alt="image-20211124202340250"></p>
<p>目的：</p>
<ul>
<li>增加容量</li>
<li>数据分散在多个磁盘上，并行提高数据传输速率</li>
<li>纠错</li>
</ul>
<p><strong>逻辑上是一个磁盘，物理上是多个的</strong>，同时<strong>数据是分布在多个物理磁盘</strong>上的，这样才能多个磁盘并行工作来提高效率</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211124202714276.png" alt="image-20211124202714276"></p>
<h2 id="条带化">条带化</h2>
<h3 id="RAID-0">RAID 0</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211124202853383.png" alt="image-20211124202853383"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211124203104344.png" alt="image-20211124203104344"></p>
<p><strong>条带化即把一个磁盘/一个组（如后面的10，01，50）分散成多个条带放到不同的磁盘上</strong></p>
<p><strong>优点：</strong></p>
<ul>
<li><strong>大I/O数据传输速率快</strong>，每个物理硬盘都可以传输，所以对于<strong>大</strong>的数据块，可以被拆分成多个部分来传输</li>
<li><strong>小I/O响应速度快</strong>，如果是一个硬盘，那么一次只能响应一个请求，而对于多个分布在不同物理磁盘上<strong>小</strong>的数据块，RAID 0则可以同时响应</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li><strong>数据可用性低</strong>，多个磁盘，出现错误的概率大</li>
<li><strong>没有冗余检验</strong></li>
</ul>
<h2 id="镜像">镜像</h2>
<h3 id="RAID-1">RAID 1</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211124203828637.png" alt="image-20211124203828637"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211124204604960.png" alt="image-20211124204604960"></p>
<p>深色的是冗余盘，简单地把原来的数据进行了拷贝</p>
<p><strong>优点：</strong></p>
<ul>
<li><strong>数据可用性很高</strong>，如果一个盘坏了，还能找到一个一模一样的盘</li>
<li><strong>大I/O传输读比单盘快，而写的速度与单盘差不多</strong>，因为同时要写两个盘，受限于速度慢的磁盘</li>
<li><strong>小I/O响应速度比单盘快一倍</strong>，即使两个请求位于同一个盘上，也能同时响应，因为有备份，而RAID0则只能在位于不同盘时同时响应</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>价格昂贵</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211124205124993.png" alt="image-20211124205124993"></p>
<p><strong>只用于关键数据，重要数据的保存</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211124205533673.png" alt="image-20211124205533673"></p>
<p>RAID 01是先进行条带化，再备份分组，如果disk0坏了，那么整个组都不能用了，即disk2和disk1不能联动</p>
<p>RAID 10是先进行备份分组，再进行条带化，这样一组中坏了一个也不要紧，比如disk0坏了，还可以，disk1和disk2联动</p>
<p><strong>所以RAID 10的容错率更高</strong></p>
<h1>？</h1>
<h2 id="并行存取——解决单次大I-O传输">并行存取——解决单次大I/O传输</h2>
<h3 id="RAID-2">RAID 2</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211124210109478.png" alt="image-20211124210109478"></p>
<ul>
<li>不论是大的还是小的I/O请求，要求<strong>所有磁盘都参与</strong>请求的执行。</li>
<li>每个磁盘的轴<strong>同步旋转，磁头始终处于同一位置</strong></li>
<li><strong>数据条带很小如一个字节或字</strong>，这样才能让所有磁盘都调动起来，注意这里条带同样是满了才到下一个条带，而不是一个条带用一点，另一个条带用一点，因此要让条带很容易的被装满</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211124210453301.png" alt="image-20211124210453301"></p>
<p><strong>冗余盘用来存储校验码——海明码</strong>，</p>
<p>4个bit需要3个bit的校验位（8个需要4个），所以4个硬盘需要3个硬盘来校验，并且<strong>校验码就存放在数据对应的位置</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211124211014816.png" alt="image-20211124211014816"></p>
<p>对于经常出错的情况意义很大，而磁盘事实上本身就有CRC，所以出错概率是很小的，所以RAID 2在这种情况下意义不大。</p>
<p><strong>事实上，RAID 2已经被弃用了</strong></p>
<h3 id="RAID-3">RAID 3</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211124211227554.png" alt="image-20211124211227554"></p>
<p>RAID 中讲冗余，<strong>是为了防止磁盘坏了</strong>，而不是为了防止磁盘出错，关于出错是在纠错中强调的。</p>
<p>出错是可以正常读，错误的位混在数据中，而磁盘坏了这一位就丢失了，不可读了，所以这个是<strong>可以定位错误的</strong>，<strong>因此也可以重构（修复）磁盘坏了的数据</strong>。</p>
<p>如上是偶检验修复损坏的b<sub>0</sub>，奇校验需要多异或一个1，<strong>原理是两边同时异或一个数字，等式不变，所以在校验码计算式子的两边同时异或b<sub>0</sub>和p(b)即可</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211124211948352.png" alt="image-20211124211948352"></p>
<p>这样的并行存取就是为了大的I/O处理的速度更快，保证任何一次都有所有的磁盘参与进来</p>
<p>但面对多个I/O请求时，由于对于每个I/O请求，所有硬盘都要参与，所以面对多个时，<strong>一次只能响应一个请求</strong></p>
<h2 id="独立存取（实际上即RAID-0加上了校验码）">独立存取（实际上即RAID 0加上了校验码）</h2>
<h3 id="RAID-4">RAID 4</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211124212431965.png" alt="image-20211124212431965"></p>
<p>采用较大的数据条带，各个磁盘的操作是独立的</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211124212959982.png" alt="image-20211124212959982"></p>
<p>每次写时，不但要修改数据，还要修改校验位，对于小的I/O写请求，会产生写损失，而在RAID 3中则没有影响，因为条带小，每次都一定要修改校验位，并且直接用写入的数据修改即可，无需取出原有数据。</p>
<ul>
<li>此外经过异或计算，可以发现如上公式，因此如果仅修改<strong>很小的数据如1位</strong>，<strong>修改校验位</strong>，<strong>只需要从原来的数据中取出P(B)和B<sub>i</sub>（要被修改的数据的原来数据）即可（<em>原理和之前的RAID 3一样，p(b）异或b<sub>i</sub>=剩下所有数据的异或</em>），B‘是指经过修改的数据</strong></li>
<li>而如果是<strong>整个数据都要修改掉</strong>，则原来的数据已经不重要了，直接用新的数据生成校验码即可</li>
<li>因此综上，<strong>在修改大的I/O时，写损失少，而修改小的I/O时，要从原来数据中再读出来后再修改</strong>，这个读的过程造成很多损失</li>
</ul>
<p>只要涉及写操作，一定要涉及校验盘，所有没法做到各个盘的写是独立的，<strong>校验盘会成为瓶颈</strong></p>
<p><strong>RAID 4同样被弃用</strong>，它在设计上有缺陷，即上面所述，在读取操作和一次写操作时都没什么问题，但小I/O存取有瓶颈</p>
<h3 id="RAID-5">RAID 5</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211124214232259.png" alt="image-20211124214232259"></p>
<p>把校验盘拆散到各个磁盘上，即分布式，<strong>这样不会因为校验盘一个盘产生瓶颈</strong></p>
<p>RAID 5 <strong>只能坏一块盘</strong>，和前面的一样，在坏一块时可以用其他的来恢复，但坏更多盘时则不能恢复</p>
<p><em><em>当一块数据被修改时，与它同一行、与它的校验块同一个磁盘（列）的数据都不能进行修改、这个不能修改的磁盘上有的所有的校验块对应的那一行也都不能修改</em>（因为一行中块的修改的修改必须要修改校验块）</em>**</p>
<p>因此，一个块的修改仍然会约束很多的块，没有那么的独立</p>
<p><strong>两读两写</strong>是指读数据和读校验用于计算新的校验，两写是指写数据和写校验位。</p>
<p>最好的情况就是同时读出两个，同时再写回去，最坏的自然就是两读和两写分开来</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211124215744728.png" alt="image-20211124215744728"></p>
<p>RAID 50的<strong>性能更高，且能坏的盘更多</strong>，只要不是一组内坏多个都能运行(即可以不同组分别坏)，但<strong>容量利用率更低，冗余所需空间更多</strong>（因为每一组都生成了校验码）</p>
<h3 id="RAID-6">RAID 6</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211124215940852.png" alt="image-20211124215940852"></p>
<p>使用了两个校验码，允许坏两个磁盘，但不能坏三个</p>
<p>但每次写都要影响两个校验码</p>
<h2 id="RAID比较">RAID比较</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211124220232811.png" alt="image-20211124220232811"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211124220339171.png" alt="image-20211124220339171"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211124220441586.png" alt="image-20211124220441586"></p>
<p><strong>RAID 0 和 RAID 3适用于高吞吐量的应用</strong></p>
<p><strong>RAID 1适合要求高可用性的应用</strong></p>
<p><strong>RAID 5是用途最多的，如数据库服务器，各种网络服务器等</strong></p>
<p><strong>RAID 6 适合丢失数据严重的应用</strong></p>
]]></content>
      <categories>
        <category>计算机组织结构</category>
      </categories>
      <tags>
        <tag>计算机组织结构</tag>
      </tags>
  </entry>
  <entry>
    <title>嵌入式复习提纲</title>
    <url>/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%A4%8D%E4%B9%A0%E6%8F%90%E7%BA%B2/</url>
    <content><![CDATA[<h2 id="1-嵌入式系统">1. 嵌入式系统</h2>
<h3 id="1-1-定义">1.1. 定义</h3>
<ul>
<li>IEEE定义：用于控制、监控或者辅助操作机器和设备的装置</li>
<li>国内定义：嵌入式系统是以应用为中心，以计算机技术为基础，软硬件可裁剪，适用于应用系统对功能、可靠性、成本、体积、功耗有严格要求的专业计算机系统</li>
<li><strong>三要素：</strong>
<ul>
<li>嵌入性</li>
<li>专用性:专用型，软硬件按对象要求设计、裁剪</li>
<li>计算机:实现对象的智能化功能</li>
</ul>
</li>
</ul>
<span id="more"></span>
<h3 id="1-2-特点">1.2. 特点</h3>
<ol>
<li>形式多样，面向特定应用</li>
<li>得到多种类型处理器和处理器体系结构的支持</li>
<li>关注成本</li>
<li>有实时性和可靠性要求</li>
<li>使用的操作系统是适应多种处理器、可裁剪、轻量型、实时可靠、可固化的嵌入式操作系统</li>
<li>需要专门工具和特殊方法开发</li>
</ol>
<h3 id="1-3-分类">1.3. 分类</h3>
<ul>
<li>
<p>按处理器位数：</p>
<ul>
<li><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20221031163604768.png" alt="image-20221031163604768"></li>
</ul>
</li>
<li>
<p>按应用：信息家电、汽车电子、通信、移动终端、工业控制</p>
</li>
<li>
<p>按速度：强实时系统、一般实时系统、弱实时系统</p>
</li>
<li>
<p>按确定性：</p>
<ul>
<li>硬实时系统：如果系统响应时间不能满⾜，就要引起系统崩溃或致命的错误</li>
<li>软实时系统：如果系统响应时间不能满⾜，不会导致系统出现致命的错误或崩溃</li>
</ul>
</li>
<li>
<p>按复杂程度：循环轮询系统、有限状态机系统、前后台机系统、单处理器多任务系统、多处理器多任务系统</p>
</li>
</ul>
<h3 id="1-4-典型应用">1.4. 典型应用</h3>
<p>工控设备、军用电子设备、航空航天、汽车电子、智能家居、智能驾驶、智能玩具、可穿戴设备</p>
<h3 id="1-5-嵌入式系统基本组成">1.5. 嵌入式系统基本组成</h3>
<p>由嵌入式硬件和软件组成</p>
<ul>
<li>硬件：微处理器为核心集成存储器和系统专用的输入输出设备</li>
<li>软件：初始化代码及驱动、嵌入式操作系统和应用程序有机结合，形成系统特定的一体化软件。</li>
</ul>
<h3 id="1-6-IOT基本组成">1.6. IOT基本组成</h3>
<p>物联网：物理设备之间的互联网络，相互之间可以收集和交换信息。</p>
<h3 id="1-7-CPS的基本组成">1.7. CPS的基本组成</h3>
<ol>
<li>CPS：信息物理系统（Cyber-Physical Systems）作为计算机进程和物理进程的统一体，是集成计算、通信与控制于一体的下一代智能系统。</li>
<li>嵌入式系统、互联网和控制器组成</li>
<li><strong>典型应用</strong>是汽车电子的GPS定位系统</li>
</ol>
<p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Introduction-to-Embedded-Systems/img/exam3/1.png" alt=""></p>
<h2 id="2-嵌入式系统设计">2. 嵌入式系统设计</h2>
<h3 id="2-1-嵌入式系统面临挑战">2.1. 嵌入式系统面临挑战</h3>
<ul>
<li>可靠性：如何保证系统可靠地工作</li>
<li>实时性：如何满足时限要求</li>
<li>成本：需要多少硬件</li>
<li>功耗：如何降低系统的功耗</li>
<li>易升级：如何设计以保证系统可升级</li>
</ul>
<h3 id="2-2-传统开发过程">2.2. 传统开发过程</h3>
<ol>
<li>系统在一开始就被划分为软件和硬件两大部分</li>
<li>软件和硬件独立进行开发设计</li>
<li>硬件优先经常被采取</li>
</ol>
<h3 id="2-3-软硬件协同设计">2.3. 软硬件协同设计</h3>
<ol>
<li>增加了系统的灵活性</li>
<li>提高设计的可预测性</li>
</ol>
<h3 id="2-4-软硬件的划分">2.4. 软硬件的划分</h3>
<ol>
<li>嵌入式系统的设计涉及硬件与软件部分，<strong>设计中必须决定什么功能由硬件实现，什么功能由软件实现。</strong> <strong>【硬件速度快，软件可修改性强】</strong></li>
<li>硬件和软件具有<strong>双重性</strong>【既可以让硬件来实现，也可以让软件来实现】</li>
<li>软硬件变动对系统的决策造成影响</li>
<li>划分和选择需要考虑多种因素</li>
<li>硬件和软件的双重性是划分决策的<strong>前提</strong></li>
</ol>
<h2 id="3-嵌入式硬件系统基础">3. 嵌入式硬件系统基础</h2>
<h3 id="3-1-嵌入式微处理器体系结构">3.1. 嵌入式微处理器体系结构</h3>
<h4 id="3-1-1-冯诺依曼结构和哈佛结构">3.1.1. 冯诺依曼结构和哈佛结构</h4>
<ol>
<li>
<p><strong>冯诺伊曼结构</strong></p>
<p>数据和程序放在同一个存储单元，统一编址，指令和数据通过同一个总线访问。</p>
</li>
<li>
<p><strong>哈佛结构</strong></p>
<ol>
<li>数据和程序存储在不同的存储空间中，即程序存储器和数据存储器是两个相互独立的存储器。</li>
<li>每个存储器独立编址、独立访问。</li>
<li>与之相对应的是系统中设置的两条总线(程序总线和数据总线)， 允许同时进行两次内存提取，更大的带宽。</li>
<li>哈佛结构不能使用自我修改的代码。</li>
</ol>
</li>
</ol>
<h4 id="3-1-2-CISC与RISC">3.1.2. CISC与RISC</h4>
<ul>
<li>
<p>CISC：复杂指令集（许多地址格式，许多操作）</p>
</li>
<li>
<p>RISC：精简指令集（流水型指令）</p>
<table>
<thead>
<tr>
<th></th>
<th>CISC</th>
<th>RISC</th>
</tr>
</thead>
<tbody>
<tr>
<td>价格</td>
<td>由硬件完成部分软件功能，硬件复杂性增加，芯片成本高</td>
<td>由软件完成部分硬件功能，软件复杂性增加，芯片成本低</td>
</tr>
<tr>
<td>性能</td>
<td>减少代码尺寸，增加指令的执行周期数</td>
<td>使用流水线降低指令的执行周期数，增加代码尺寸</td>
</tr>
<tr>
<td>指令集</td>
<td>大量的混杂指令集，有简单快速的指令，也有复杂多周期指令，符合HLL</td>
<td>简单的单周期指令，在汇编指令方面有相应的SISC伪代码指令</td>
</tr>
<tr>
<td>高级语言支持</td>
<td>硬件完成</td>
<td>软件完成</td>
</tr>
<tr>
<td>寻址模式</td>
<td>复杂的寻址模式，支持内存到内存寻址</td>
<td>简单的寻址模式，仅允许LOAD和STORE指令存取内存，<strong>其他所有的操作都基于寄存器到寄存器</strong></td>
</tr>
<tr>
<td>寄存器数目</td>
<td><strong>寄存器较少</strong></td>
<td><strong>寄存器较多</strong></td>
</tr>
</tbody>
</table>
</li>
</ul>
<h4 id="3-1-3-流水线技术">3.1.3. 流水线技术</h4>
<p>RISC机器用来减少指令周期的一种技术，提高处理器和总线的使用率，在CPU中由<strong>若干个不同功能的电路单元组成一条指令处理流水线</strong>，然后将一条指令分成若干步后再由这些电路单元分别执行，<strong>这样就能实现在一个CPU时钟周期完成一条指令</strong>，因此提高CPU的运算速度。</p>
<p>优点：提高CPU利用率、并行计算，减少指令周期</p>
<h4 id="3-1-4-微处理器分类">3.1.4. 微处理器分类</h4>
<ol>
<li>嵌入式微处理单元(MPU)：功能和微处理器一样，具有较高的性能，具有体积小、功耗少、成本低、可靠性高的优点。具有<strong>32位及以上</strong>的处理器</li>
<li>嵌入式微控制器(MCU)：嵌入式微控制器就是将整个计算机系统的主要硬件集成到一块芯片中，芯片内部集成ROM/EPROM、RAM、总线, 总线逻辑、定时/计数器、Watchdog、I/O、串行口等各种必要功能和外设。<strong>是目前嵌入式工业的主流，50%的份额</strong>。<strong>多是8位和16位处理器，32位的也不多</strong></li>
<li>嵌入式DSP处理器(Data Signal Process)：嵌入式DSP是专门用于信号处理方面的处理器，其在系统结构和指令算法方面进行了特殊设计，具有很高的编译效率和指令执行速度。</li>
<li>嵌入式SoC：嵌入式SoC是追求产品<strong>系统最大包容</strong>的集成器件，绝大多数系统构件都在一个系统芯片内部。</li>
</ol>
<p><strong>都具有体积小、功耗小、可靠性高、设计生产效率高的特点。</strong></p>
<h4 id="3-1-5-选型">3.1.5. 选型</h4>
<ol>
<li><strong>有效且经济</strong>地满足任务的计算需求
<ol>
<li>速度，ROM和RAM的数量，I / O端口和计时器的数量，大小，包装，功耗</li>
<li>容易升级</li>
<li>单位成本</li>
</ol>
</li>
<li>软件开发工具的可用性：汇编器，调试器，C编译器，仿真器，模拟器，技术支持(开源框架可能没有多少人维护)</li>
<li>微控制器的广泛可用性和可靠来源。</li>
</ol>
<h3 id="3-2-看门狗（Watch-Dog）">3.2. 看门狗（Watch Dog）</h3>
<ol>
<li>
<p>功能：</p>
<p>在<strong>对系统稳定性要求较高的场合</strong>，防止嵌入式控制系统运行时收到外部干扰或者系统错误，<strong>程序出现跑飞</strong>，<strong>导致整个系统瘫痪</strong>，加入看门狗电路，当系统跑飞进入死循环时，回复系统的运行</p>
</li>
<li>
<p>基本原理：</p>
<p>程序完整运行一周期的时间是tp，看门狗的定时周期为ti，且ti&gt;tp，在程序运行一周期后就修改定时器的计数值（即重新设定看门狗的定时周期）（喂狗），只要程序正常运行，定时器就不会溢出。若由于干扰等原因使系统不能再tp时刻修改定时器的计数值，<strong>定时器将在ti时刻溢出</strong>，引发系统复位，使系统得以重新运行，从而起到监控的作用。</p>
</li>
</ol>
<h3 id="3-3-嵌入式系统的存储体系">3.3. 嵌入式系统的存储体系</h3>
<h4 id="3-3-1-存储器系统：存储器系统的层次结构">3.3.1. 存储器系统：存储器系统的层次结构</h4>
<p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Introduction-to-Embedded-Systems/img/exam3/8.png" alt=""></p>
<h4 id="3-3-2-ROM的种类与选型">3.3.2. ROM的种类与选型</h4>
<ul>
<li>
<p>ROM：固定内容、掩膜工艺、无法修改</p>
<blockquote>
<p>只读存储器（Read-Only Memory）是一种只能读取资料的存储器。在制造过程中，将资料以一特制光罩（mask）烧录于线路中，其资料内容在写入后就不能更改，所以有时又称为“光罩式只读内存”（mask ROM）。</p>
</blockquote>
</li>
<li>
<p>PROM：一次编程ROM，一旦导入、无法改变</p>
<blockquote>
<p>可编程程序只读存储器（Programmable ROM，PROM）之内部有行列式的熔丝，是需要利用电流将其烧断，写入所需的资料，但仅能写录一次。 PROM在出厂时，存储的内容全为1，用户可以根据需要将其中的某些单元写入数据0</p>
</blockquote>
</li>
<li>
<p>EPROM：加电可擦除，多次，字节级</p>
<blockquote>
<p>可抹除可编程只读存储器（Erasable Programmable Read Only Memory，EPROM）可利用高电压将资料编程写入，抹除时将线路曝光于紫外线下，则资料可被清空，并且可重复使用。通常在封装外壳上会预留一个石英透明窗以方便曝光。</p>
</blockquote>
</li>
<li>
<p>快闪存储器flash：电可擦，块级</p>
<blockquote>
<p>快闪存储器（Flash memory）的每一个记忆胞都具有一个“控制闸”与“浮动闸”，利用高电场改变浮动闸的临限电压即可进行编程动作。</p>
</blockquote>
</li>
</ul>
<h4 id="3-3-3-Flash的种类与选型">3.3.3. Flash的种类与选型</h4>
<p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Introduction-to-Embedded-Systems/img/exam2/7.png" alt=""></p>
<ol>
<li>NAND Flash与NOR Flash相比，具有读性能比较差、写性能较好、串行读取、成本低、容量大的特点</li>
<li>NAND Flash：需要BootLoader的引导模式</li>
<li>NOR Flash：不需要BootLoader的引导模式</li>
</ol>
<h4 id="3-3-4-RAM的种类与选型">3.3.4. RAM的种类与选型</h4>
<ul>
<li>
<p>RAM</p>
<blockquote>
<p>RAM也称随机存储器，那么随机是什么意思？所谓随机，指的是当存储器中的数据被读取或写入时，所需要的时间与这段信息所在的位置无关（任何位置读写速度一样）。</p>
</blockquote>
</li>
<li>
<p>DRAM：(内存)速度稍慢，加电更新</p>
<blockquote>
<p>DRAM（Dynamic Random Access Memory，动态随机存储器）是最为常见的系统内存。我们使用的电脑和手机的运行内存都是DRAM。DRAM使用电容存储，DRAM 只能将数据保持很短的时间。</p>
</blockquote>
</li>
<li>
<p>SRAM：不用刷新，速度快，价格贵，容量小</p>
<blockquote>
<p>SRAM（Static Random Access Memory，静态随机存储器），它是一种具有静止存取功能的内存，其内部机构比DRAM复杂，可以做到不刷新电路即能保存它内部存储的数据。</p>
</blockquote>
</li>
<li>
<p>SDRAM：提升性能(时钟)</p>
<blockquote>
<p>SDRAM：（Synchronous Dynamic Random Access Memory，同步动态随机存取存储器），为DRAM的一种，同步是指Memory工作需要同步时钟，<strong>内部命令的发送与数据的传输都以时钟为基准</strong>；动态是指存储阵列需要不断的刷新来保证数据不丢失；随机是指数据不是线性依次存储，而是由指定地址进行数据读写。</p>
</blockquote>
</li>
<li>
<p>还有DDR SDRAM、DDR2 SDRAM、DDR3SDRAM不做过多赘述，感兴趣可以自己百度。</p>
</li>
</ul>
<h3 id="3-4-嵌入式系统总线">3.4. 嵌入式系统总线</h3>
<h4 id="3-4-1-总线结构，常见的总线及特点">3.4.1. 总线结构，常见的总线及特点</h4>
<ul>
<li>
<p>单总线结构</p>
<p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Introduction-to-Embedded-Systems/img/exam3/10.png" alt=""></p>
<blockquote>
<p>使用一条单一的系统总线来链接CPU、主存和IO设备。总线只能分时工作，是信息的传送的吞吐量受到限制。四次握手(1 enq， 2 ack, 2 low_ack, 1 low_enq)</p>
</blockquote>
</li>
<li>
<p>双总线结构</p>
<p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Introduction-to-Embedded-Systems/img/exam3/11.png" alt=""></p>
<blockquote>
<p>在CPU和主存之间专门设置了一组高速的存储总线，使CPU可通过专用总线与存储器交换信息，并减轻了系统总线的负担。主存仍可通过系统总线与外设之间实现DMA操作，而不经过CPU</p>
</blockquote>
</li>
<li>
<p>多总线结构</p>
<p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Introduction-to-Embedded-Systems/img/exam3/12.png" alt=""></p>
<blockquote>
<p>在双总线系统的基础上增加IO总线，其中系统总线是CPU、主存和通道（IOP）之间进行数据传送的公共通路，而IO是多个外部设备与通道之间进行数据传送的公共通路。通道实际上是一台具有特殊功能的处理器，他分担了一部分CPU的功能，以实现对外设的统一管理及外设与主存之间的数据传送。</p>
</blockquote>
</li>
</ul>
<h4 id="3-4-2-输入输出编程：忙等IO和中断IO">3.4.2. 输入输出编程：忙等IO和中断IO</h4>
<ol>
<li>
<p>忙等IO：用指令来检查设备是否就绪【即轮询看设备是否就绪】</p>
<ul>
<li>最简单的设备驱动方式</li>
<li>CPU不能在检查设备的过程中执行其他指令</li>
<li>很难处理同时发生的IO操作</li>
</ul>
</li>
<li>
<p>中断IO：基于子程序调用，使下一条指令为一个子程序调用的预定位置，返回位置被保存确保执行前台程序。【即采用中断机制来 IO】</p>
<ul>
<li>CPU和设备之间通过总线连接</li>
<li>CPU和设备之间进行握手</li>
<li>设备发出中断请求</li>
<li>当CPU能处理中断时发出中断确认请求。</li>
</ul>
<p>两种机制确保中断更加有效：</p>
<ul>
<li>优先级决定哪个中断先获得CPU；</li>
<li>中断向量决定每个中断对应的执行代码。</li>
</ul>
</li>
</ol>
<h4 id="3-4-3-Programming-I-O：Independent-I-O-port-memory-mapped-I-O">3.4.3. Programming I/O：Independent I/O port. memory-mapped I/O</h4>
<p><strong>可编程I/O</strong></p>
<ol>
<li>通信期间选择控制寄存器或数据缓冲区的三种方法
<ol>
<li><strong>独立的I/O端口</strong>：需要专门的指令来完成。</li>
<li><strong>内存映射的I/O</strong>。</li>
<li><strong>混合解决方案(统一编址)</strong>。混合模型包括内存映射的I/O数据缓冲区和用于控制寄存器的单独的I/O端口。</li>
</ol>
</li>
<li>英特尔x86提供了输入输出说明。<strong>大多数其他CPU使用内存映射</strong>的I/O。</li>
</ol>
<p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Introduction-to-Embedded-Systems/img/lec5/4.png" alt=""></p>
<p>a. 独立的I/O和内存空间。</p>
<p>b. 内存映射的I/O。</p>
<p>c. 混合解决方案。</p>
<h2 id="4-嵌入式系统软件知识【重点】">4. 嵌入式系统软件知识【重点】</h2>
<h3 id="4-1-嵌入式软件基础知识">4.1. 嵌入式软件基础知识</h3>
<h4 id="4-1-1-嵌入式软件的特点">4.1.1. 嵌入式软件的特点</h4>
<ol>
<li>
<p>独特的实用性</p>
<blockquote>
<p>每种嵌入式软件都有自己独特的应用环境和实用价值</p>
</blockquote>
</li>
<li>
<p>灵活的适用性</p>
<blockquote>
<p>嵌入式软件通常可以认为是一种模块化软件，它应该能非常方便灵活地运用到各种嵌入式系统中，而不能破坏或更改原有的系统特性和功能</p>
</blockquote>
</li>
<li>
<p>程序代码精简</p>
<blockquote>
<p>由于嵌入式系统本身的应用有小体积、小存储空间、低成本、低功耗等要求，嵌入式软件和大型机上的软件相比，具有代码精简、执行效率高等特点</p>
</blockquote>
</li>
<li>
<p>可靠性、稳定性高</p>
<blockquote>
<p>嵌入式系统应用要求一般较为苛刻，特别是在涉及安全相关的领域，如汽车电子、工业控制、航空航天等</p>
</blockquote>
</li>
</ol>
<h4 id="4-1-2-嵌入式软件的分类">4.1.2. 嵌入式软件的分类</h4>
<ol>
<li>
<p>系统软件</p>
<blockquote>
<p>即OS，负责嵌入系统的全部软、硬件资源的分配、调度工作，控制、协调并发活动；它必须体现其所在系统的特征，能够通过装卸某些模块来达到系统所要求的功能</p>
</blockquote>
</li>
<li>
<p>支撑软件</p>
<blockquote>
<p>支撑软件是用于帮助和支持软件开发的软件，通常包括<strong>数据库和开发工具</strong>，其中以<strong>数据库最为重要</strong></p>
</blockquote>
</li>
<li>
<p>应用软件</p>
<blockquote>
<p>嵌入式应用软件是针对特定应用领域，基于某一固定的硬件平台，用来达到用户预期目标的计算机软件。由于用户任务可能有时间和精度上的要求，因此有些嵌入式应用软件需要特定嵌入式操作系统的支持</p>
</blockquote>
</li>
</ol>
<h4 id="4-1-3-嵌入式软件体系结构">4.1.3. 嵌入式软件体系结构</h4>
<ol>
<li>轮询</li>
<li>有限状态机</li>
<li>带中断的轮询</li>
<li>仅有中断</li>
<li>功能队列调度</li>
<li>实时操作系统(RTOS)</li>
</ol>
<table>
<thead>
<tr>
<th></th>
<th>优先级</th>
<th>响应时间</th>
<th>变动的影响</th>
<th>共享数据</th>
</tr>
</thead>
<tbody>
<tr>
<td>轮询</td>
<td>无，一切按序运行</td>
<td>所有任务之和</td>
<td>非常大，增加任务或修改任务时间影响所有任务</td>
<td>无</td>
</tr>
<tr>
<td>状态机</td>
<td>无，当前状态决定下一个状态优先级，非顺序执行</td>
<td>所有任务之和</td>
<td>同上</td>
<td>同上</td>
</tr>
<tr>
<td>带中断轮询</td>
<td>中断比主循环优先级高，中断有优先级</td>
<td>所有任务之和和中断执行时间和</td>
<td>主循环同轮序一样，对中断服务例程影响不大</td>
<td>必须处理和中断服务例程分享的数据</td>
</tr>
<tr>
<td>纯中断</td>
<td>中断有优先级</td>
<td>中断执行时间</td>
<td>对中断服务例程影响不大</td>
<td>同上</td>
</tr>
<tr>
<td>函数队列</td>
<td>中断有优先级，其他任务按序进行</td>
<td>最长任务执行时间</td>
<td>低，中断管理优先级函数，队列管理较低优先级</td>
<td>同上</td>
</tr>
</tbody>
</table>
<ul>
<li>函数队列:函数指针被添加到队列中，主循环在队列中循环并执行任务，任务或中断将新任务添加到功能队列中。以中断优先为优先级</li>
</ul>
<h3 id="4-2-嵌入式操作系统基础知识-关注实时调度部分，关注和通用OS的差别">4.2. 嵌入式操作系统基础知识 (关注实时调度部分，关注和通用OS的差别)</h3>
<h4 id="4-2-1-RTOS-Real-time-operating-systems">4.2.1. RTOS  Real time operating systems</h4>
<p><strong>概念</strong></p>
<p>对外来事件能在<strong>限定的响应时间</strong>内做出<strong>预定质量处理</strong>的计算机系统</p>
<p><strong>特点</strong></p>
<p>可移植性、强调实时性能、内核精简、<strong>抢占式内核、使用可重入函数</strong>、可配置、可裁剪、高可靠性</p>
<p><strong>选型原则</strong></p>
<p>首先确认是否需要使用RTOS(系统对相应延迟时间有要求，对事件处理复杂度有要求，对RAM、ROM的占用有一定规模要求)：</p>
<ul>
<li>成本，可靠性，实时性，工具链，模块丰富，RTOS内核RAM、ROM占用量，支持</li>
</ul>
<h4 id="4-2-2-任务管理">4.2.2. 任务管理</h4>
<h5 id="进程、线程、任务的概念">进程、线程、任务的概念</h5>
<ol>
<li>
<p>进程概念</p>
<p><strong>一个程序的单次执行</strong>。（如果两次运行一个相同的程序，就创建了两个不同的进程）</p>
<p>进程是操作系统资源分配和调度的基本单位，<strong>进程之间的地址空间和资源相互独立</strong></p>
</li>
<li>
<p>线程概念</p>
<p>轻量级进程，是操作系统任务调度和执行的基本单位</p>
</li>
<li>
<p>任务概念</p>
<p>最抽象、软件完成一个活动，可以是进程可以是线程。</p>
</li>
</ol>
<h5 id="任务的实现">任务的实现</h5>
<ul>
<li>
<p><strong>任务控制块</strong></p>
<p>任务控制块(TCB)描述一个任务的核心数据包括任务堆栈指针、任务状态、优先级等，任务创建的时候创建TCB表</p>
</li>
</ul>
<h5 id="任务调度">任务调度</h5>
<ol>
<li>
<p>可抢占调度</p>
<p>系统总是选择优先级别的最高的算法进行调度，并且一旦高优先级别的任务准备就绪之后，它就会马上被调度而不等待低优先级的任务主动放弃CPU</p>
</li>
<li>
<p>不可抢占调度</p>
<p>让进程运行直到结束或阻塞的调度方式，主要用于批处理或某些实时性要求不严的实时系统。</p>
</li>
<li>
<p>先来先服务</p>
<p>将处理机分配给最先来的进程，只考虑先后。(FCFS: first come first service)是一种<strong>非抢占式</strong>策略</p>
</li>
<li>
<p>时间片轮转算法</p>
<p>系统把所有就绪进程按先入先出的原则排成一个队列。<strong>新来的进程加到就绪队列末尾</strong>。每当执行进程调度时,进程调度程序总是选出就绪队列的队首进程,让它在CPU上运行一个时间片的时间（时间片是一个小的时间单位,通常为10~100ms数量级）。<strong>当进程用完分给它的时间片后</strong>,系统的计时器发出时钟中断,调度程序便停止该进程的运行,<strong>把它放入就绪队列的末尾</strong>;然后,把CPU分给就绪队列的队首进程,同样也让它运行一个时间片。<strong>非抢占调度</strong></p>
</li>
<li>
<p>优先级算法</p>
<p>系统将处理器分配给就绪队列中优先数最高的进程(分为抢占式优先级算法和非抢占式优先级算法)</p>
</li>
</ol>
<h5 id="实时系统及任务调度⭐">实时系统及任务调度⭐</h5>
<ol>
<li>
<p>单一速率调度 **RMS **算法Rate Monotonic Scheduling</p>
<p><a href="https://www.cdsy.xyz/computer/system/OS/20210307/cd161510310410910.html">单调速率调度（RMS）算法（详解版） (cdsy.xyz)</a></p>
<p><strong>静态</strong>调度策略，分配给每个进程的优先级是固定不变的，基于单一速率分析。</p>
<p>周期（即最后期限）短的进程被指定为最高优先级。每个周期进去，p进去，根据优先级调度执行，执行结束就从就绪状态退出直到下一个周期开始</p>
</li>
<li>
<p>最早截止时限优先调度 <strong>EDF</strong> 算法 Earliest deadline first</p>
<p><a href="https://www.cdsy.xyz/computer/system/OS/20210307/cd161510310310909.html">最早截止时间优先（EDF）算法详解 (cdsy.xyz)</a></p>
<p><strong>动态</strong>的优先级方案，在进程执行时当前所有进程的截止时限改变进程的优先级，截止时限最近的优先级最高</p>
<p>与单调速率调度不一样，EDF 调度不要求进程应是周期的，也不要求进程的 CPU 执行的长度是固定的。**唯一的要求是，进程在变成可运行（即就绪态）时，每个时刻应该宣布它的截止期限。**如果截止时限比当前的进程高，那就会抢占当前进程</p>
</li>
</ol>
<p>例子：</p>
<p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Introduction-to-Embedded-Systems/img/exam3/3.png" alt=""></p>
<h5 id="任务间通信">任务间通信</h5>
<ol>
<li>
<p>共享内存</p>
<blockquote>
<p>两个组件（比如CPU和I/O设备），通过一个共享内存位置进行通信，这个内存区域可以被看作一个通信设备，这个设备上所有的数据都存储在通信链路/内存中</p>
</blockquote>
</li>
<li>
<p>消息</p>
<blockquote>
<p>消息传递通信机制是共享内存模型的一种补充</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>每个通信实体都具有自己的消息发送/接收单元。消息不在通信链路上存储，而是<strong>存储在端点的发送器/接收器</strong>。</p>
</blockquote>
<ol start="3">
<li>
<p>管道</p>
<blockquote>
<p>发送进程以字符流形式将大量数据送入管道，接收进程可从管道接收数据，二者利用管道进行通信。<strong>本质是固定大小的内存缓冲区</strong></p>
</blockquote>
</li>
</ol>
<blockquote>
<p>由于当前操作系统的不惟一性，各个系统都有其独自的通信协议，导致了不同系统间通信的困难。尽管TCP/IP协议目前已发展成为Internet的标准，但仍不能保证C/S应用程序的顺利进行。命名管道作为一种通信方法，有其独特的优越性，这主要表现在它不完全依赖于某一种协议，而是适用于任何协议——只要能够实现通信</p>
</blockquote>
<ol start="4">
<li>
<p>信号</p>
<blockquote>
<p>信号很简单，因为除了信号本身不会传递其他数据，信号类似于中断，但它完全由软件创建。一个信号是由进程产生的，并由操作系统传送给另一个进程</p>
</blockquote>
</li>
</ol>
<h5 id="同步与互斥">同步与互斥</h5>
<p><strong>同步可以通过开关中断实现，互斥使用信号量。</strong></p>
<ol>
<li>
<p>竞争条件</p>
<blockquote>
<p>多个进程并发访问和操作同一数据且执行结果与访问的特定顺序有关，称为竞争条件。</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>竞争条件发生在当多个进程或者线程在读写数据时，其最终的的结果依赖于多个进程的指令执行顺序。</p>
</blockquote>
<ol start="2">
<li>
<p>代码临界区</p>
<p><strong>临界区</strong>指的是<strong>一个访问共用资源的程序片段</strong>，而这些共用资源又无法同时被多个线程访问的特性。当有线程进入临界区段时，其他线程或是进程必须等待</p>
</li>
<li>
<p>互斥</p>
<blockquote>
<p>一个公共资源同一时刻只能被一个进程或线程使用，多个进程或线程不能同时使用公共资源</p>
</blockquote>
</li>
<li>
<p>信号量</p>
<p>信号量广泛用于进程或线程间的同步和互斥</p>
<blockquote>
<p>管理多进程运行的方式，信号量是一种变量类型，仅能由操作原语PV对其操作。P：将 信号量value值减1，若小于0，相关进程被阻塞，加入队列，若大于0相关进程继续执行 V:value+1，若不大于0，则从队列中释放一个进程进入就绪态，然后自己继续执行，否则自己继续执行，没有别的操作</p>
</blockquote>
</li>
<li>
<p>死锁</p>
<blockquote>
<p>线程死锁是指由于两个或者多个线程互相持有对方所需要的资源，导致这些线程处于等待状态，无法前往执行</p>
<p>当一些进程被永久地阻止获取互斥锁时就发生了死锁</p>
<p>例如线程A持有lock1且被阻止lock2，线程B持有lock2但被阻止获取lock1，就会出现死锁</p>
</blockquote>
</li>
</ol>
<h4 id="4-2-3-存储管理">4.2.3. 存储管理</h4>
<h5 id="1-嵌入式系统静态内存管理">1. 嵌入式系统静态内存管理</h5>
<p>系统在启动前，所有的任务都获得了所需要的所有内存，<strong>运行过程中将不会有新的内存请求</strong></p>
<ul>
<li>
<p>在强实时系统中，减少内存分配在时间上可能带来的不确定性。</p>
</li>
<li>
<p>不需要操作系统进行专门的内存管理操作。</p>
</li>
<li>
<p>系统使用内存的效率比较低下，只适合于那些强实时，且应用比较简单，<strong>任务数量可以静态确定的系统</strong></p>
</li>
</ul>
<h5 id="2-嵌入式系统动态内存管理">2. 嵌入式系统动态内存管理</h5>
<p>应用通过分配（malloc）与释放（free）操作来使用内存</p>
<ul>
<li>
<p>堆（heap）会带来碎片</p>
</li>
<li>
<p>垃圾回收</p>
<p>对内存堆进行重新排列，把碎片组织成为大的连续可用内存空间。但垃圾回收的时间长短不确定：<strong>不适合于处理实时应用</strong></p>
</li>
<li>
<p><strong>在实时系统中，避免内存碎片的出现，而不是在出现内存碎片时进行回收</strong></p>
</li>
</ul>
<p><strong>malloc 和 free：</strong></p>
<ol>
<li>
<p>在嵌入式系统中不常用，因为容易<strong>产生碎片</strong>。</p>
</li>
<li>
<p>解决办法</p>
<p>由于内存管理算法的原因，malloc()和free()函数执行时间是不确定的【是指执行完malloc返回花费的时间，因为分配的内存块大小不确定】。μC/OS-II 对malloc()和free()函数进行了改进，使得它们可以<strong>分配和释放固定大小的内存块</strong>，同时也不会产生碎片。这样⼀来，malloc()和free()函数的执⾏时间也是<strong>固定</strong>的了</p>
</li>
</ol>
<h2 id="5-嵌入式系统程序设计">5. 嵌入式系统程序设计</h2>
<h3 id="5-1-嵌入式软件开发基础知识">5.1. 嵌入式软件开发基础知识</h3>
<h3 id="5-2-嵌入式软件开发环境">5.2. 嵌入式软件开发环境</h3>
<p>交叉开发</p>
<ol>
<li>
<p>为什么嵌入式软件要交叉开发？<strong>为了满足代码编写编译调试与运行环境有不同要求的情况。</strong></p>
<p>嵌入式系统是面向特定应用的一体化软件，不具备软件编写编译等功能，这么做可以降低嵌入式系统复杂度，降低成本</p>
</li>
<li>
<p>宿主机和目标机差异:</p>
<ol>
<li>宿主机是通用计算机系统，而目标机则多为嵌入式系统</li>
<li>宿主机具有完整的开发软件如IDE、Complier、Debugger等，用于软件的编写，生成的二进制可执行代码则通过串口传输，在专用的面向应用的目标机上运行，并采取交叉方式进行调试</li>
</ol>
</li>
<li>
<p>过程</p>
<ol>
<li>宿主机上开发，模拟调试</li>
<li>通过串口或网络传到目标机上</li>
<li>目标机上基于监视器和操作系统的调试</li>
<li>目标机脱离宿主机运行</li>
</ol>
</li>
</ol>
<table>
<thead>
<tr>
<th>特征</th>
<th>通用计算机</th>
<th>嵌入式系统</th>
</tr>
</thead>
<tbody>
<tr>
<td>形式与类型</td>
<td>看得见的计算机、按照其体系结构、运算速度和结构规模等因素分为大中小型机和微机</td>
<td>看不见的计算机，形式多样，应用领域广泛，按应用来分</td>
</tr>
<tr>
<td>组成</td>
<td>通用处理器、标准总线和外设，软件和硬件相对独立</td>
<td>面向应用的嵌入式微处理器，总线和外部接口多集成在处理器内部。<strong>软件与硬件是紧密集成在一起的</strong></td>
</tr>
<tr>
<td>开发方式</td>
<td>开发平台和运行平台都是通用计算机</td>
<td>采用交叉开发方式，<strong>开发平台一般是通用计算机，运行平台是嵌入式系统</strong></td>
</tr>
<tr>
<td>二次开发性</td>
<td>应用程序可重新编制</td>
<td>一般不能再编程</td>
</tr>
</tbody>
</table>
<h2 id="6-嵌入式实时内核（以ucosII为例）">6. 嵌入式实时内核（以ucosII为例）</h2>
<h3 id="6-1-实时任务调度">6.1. 实时任务调度</h3>
<p>μC/OS_II进行任务调度的思想是 “近似地每时每刻总是让优先级最高的就绪任务处于运行状态” 。为了保证这一点，它在系统或用户任务<strong>调用系统函数及执行中断服务程序结束时总是调用调度器，来确定应该运行的任务并运行它 。</strong></p>
<p>μC/OS_II进行任务调度的<strong>依据就是任务就绪表</strong>，根据就绪表确定最高优先级</p>
<p><strong>μC/OS-II 实时调度机制：</strong></p>
<ol>
<li>
<p>存储管理采用固定分区存储管理，以固定块大小来分配，避免内存碎片的产生</p>
</li>
<li>
<p>任务调度时间采用固定优先级的优先级调度，为确保任务的实时性，μC/OS-II 要确保每次调度的耗时具有可预测性，最多可以管理64个任务，且保留了 4 个最高和 4 个最低优先级任务给自己使用，因此用户最多 56 个任务。</p>
<p><strong>不⽀持时间⽚轮转法</strong>，<strong>每个任务的优先级要求不⼀样且是唯⼀的</strong></p>
</li>
<li>
<p>使用查表法，具有确定的时间，增加了系统的可预测性。TaskUnMapTbl表格存储256种情况下出现1的最低位，在代码为</p>
<ol>
<li><code>Y = TaskUnMapTbl[TaskRdyGrp]</code></li>
<li><code>X = TaskUnMapTbl[TaskRdyTbl[Y]]</code></li>
<li><code>Prio = (Y &lt;&lt; 3) + X</code></li>
<li>由此找到相应进程，保证耗时固定</li>
</ol>
</li>
<li>
<p>允许中断与异常存在，使得系统允许实时的高优先级任务执行。</p>
</li>
<li>
<p>任务调度总是选择<strong>就绪任务</strong>中<strong>优先级最高的一个运行</strong></p>
</li>
<li>
<p>允许任务间的抢占</p>
</li>
<li>
<p>具有优先级的中断机制</p>
</li>
<li>
<p>μC/OS中所有的系统调用时间都是确定的</p>
</li>
</ol>
<h3 id="6-2-中断与时钟">6.2. 中断与时钟</h3>
<p>μC/OS-II系统响应中断的过程为：</p>
<p>系统接收到中断请求后，这时如果CPU处于中断允许状态（即中断是开放的），系统就会中止正在运行的当前任务，而按照中断向量的指向转而去运行中断服务子程序；当中断服务子程序的运行结束后，系统将会根据情况返回到被中止的任务继续运行或者转向运行另一个具有更高优先级别的就绪任务。</p>
<p><strong>时钟节拍是一种特殊的中断</strong>，μC/OS需要⽤户提供周期性信号源，⽤于实现时间延时和确认超时。时钟节拍的实际频率取决于用户应用程序的精度</p>
<h3 id="6-3-同步与通信">6.3. 同步与通信</h3>
<p>所有的通信信号都被看成是事件(event), μC/OS-II通过**事件控制块(ECB)**来管理每⼀个具体事件。</p>
<p>同步可以通过开关中断实现。互斥使用信号量。</p>
<p>​	当处理临界段代码时，需要关中断，处理完毕后，再开中断</p>
<p>通信可以使用邮箱和消息队列实现。</p>
<h3 id="6-4-存储管理">6.4. 存储管理</h3>
<p>μC/OS中是实模式存储管理</p>
<p>不划分内核空间和用户空间，整个系统只有一个地址空间，即物理内存空间，应用程序和内核程序都能直接对所有的内存单元进行访问</p>
<p>系统中的“任务”，实际上都是线程–––只有运行上下文和栈是独享的，其他资源都是共享的。</p>
<h4 id="静态">静态</h4>
<p>所谓静态存储方式是指在程序编译期间分配固定的存储空间的方式。该存储方式通常是在变量定义时就分定存储单元并一直保持不变， 直至整个程序结束。<strong>全局变量，静态变量等就属于此类存储方式。</strong></p>
<h4 id="动态">动态</h4>
<p>μC/OS中的存储管理 μC/OS采用的是<strong>固定分区的存储管理方法</strong>，即malloc和free分配的是固定大小的</p>
<p>μC/OS把连续的大块内存按分区来管理，每个分区包含有整数个大小相同的块;</p>
<p>在一个系统中可以有多个内存分区，这样，用户的应用程序就可以从<strong>不同的内存分区中得到不同大小的内存块</strong>。但是，特定的内存块在释放时必须重新放回它以前所属于的内存分区;</p>
<p>采用这样的内存管理算法，动态分配的内存碎片问题就得到了解决。</p>
<h2 id="7-BSP，BootLoader【不重要，就几分】">7. BSP，BootLoader【不重要，就几分】</h2>
<h3 id="7-1-嵌入式系统的启动过程">7.1. 嵌入式系统的启动过程</h3>
<ol>
<li>上电复位</li>
<li>板级初始化</li>
<li>引导操作系统</li>
<li>操作系统初始化</li>
<li>应用程序初始化</li>
<li>多任务应用</li>
</ol>
<h3 id="7-2-BSP-Board-Support-Packages">7.2. BSP Board Support Packages</h3>
<ol>
<li>
<p><strong>概念</strong>:全称&quot;板级支持包&quot;(Board Support Packages)，<strong>就是⼀段启动代码</strong>，和计算机主板的BIOS差不多，但提供的功能区别就相差很大</p>
<p>位于上层应用和下层硬件之间的存在</p>
</li>
<li>
<p><strong>特点:</strong></p>
<ol>
<li>
<p>硬件相关性:</p>
<blockquote>
<p>因为嵌入式实时系统的硬件环境具有相关性，所以，作为高层软件与硬件之间的接口，BSP必须为操作系统提供操作和控制具体硬件的方法。</p>
</blockquote>
</li>
<li>
<p>操作系统相关性:</p>
<blockquote>
<p>不同的操作系统具有各自的软件层次结构，因此，不同的操作系统具有特定的硬件接口形式.</p>
</blockquote>
</li>
</ol>
</li>
<li>
<p><strong>功能:</strong></p>
<blockquote>
<ol>
<li>单板硬件初始化，主要是CPU的初始化，为整个软件系统提供底层硬件支持</li>
<li>为操作系统提供<strong>设备驱动程序</strong>和系统中断服务程序</li>
<li>定制操作系统的功能，为软件系统提供一个实时多任务的运行环境</li>
<li>初始化操作系统，为操作系统的正常运行做好准备</li>
</ol>
</blockquote>
</li>
<li>
<p><strong>与bios、EFI区别:</strong></p>
<ol>
<li>BIOS: BIOS主要是负责在电脑开启时检测、初始化系统设备(设置栈指针，中断分配，内存初始化)、装入操作系统并调度操作系统向硬件发出的指令。</li>
<li>BSP是和操作系统绑在一起运行在主板上的，尽管BSP的开始部分和BIOS所做的工作类似，可是大部分和BIOS不同，作用也完全不同。程序员还可以编程修改BSP，在BSP中<strong>任意添加一些和系统无关的驱动或程序，甚至可以把上层开发的统统放到BSP中</strong>。而BIOS程序是用户不能更改，编译编程的，<strong>只能对参数进行修改设置</strong>。<strong>更不会包含一些基本的硬件驱动</strong>。</li>
<li>EFI:由于EFl框架比BIOS要大得多，其启动过程也比BIOS要复杂。于BIOS最大的区别就是EFI首先需要EBC虚拟机，然后再启动设备驱动和EFI应用程序，最后通过EFI boot manager加载操作系统引导程序。</li>
</ol>
</li>
</ol>
<h3 id="7-3-引导模式">7.3. 引导模式</h3>
<ul>
<li>
<p>操作系统<strong>引导概念</strong></p>
<p><strong>将操作系统装入内存并开始执行的过程</strong></p>
</li>
<li>
<p>按时间效率和空间效率不同的要求，分为两种模式：</p>
<ul>
<li>
<p>需要BootLoader的引导模式</p>
<p>NAND flash启动，节省空间，牺牲时间，适用于硬件成本低，运行速度快，但启动速度相对慢</p>
</li>
<li>
<p>不需要BootLoader的引导模式</p>
<p>时间效率高，空间占用大，直接在NOR flash或ROM系列非易失性存储介质中运行，但运行速度慢</p>
</li>
</ul>
</li>
</ul>
<h3 id="7-4-BootLoader及其启动过程">7.4. BootLoader及其启动过程</h3>
<ul>
<li>概念：bootloader是嵌入式系统中的OS启动加载程序</li>
<li>启动过程
<ol>
<li>初始化硬件</li>
<li>从 kernel.bin 中读取内核，并放入内存</li>
<li>设置启动参数</li>
<li>然后跳转到内核所在的开始地址， 运行内核</li>
<li>消亡</li>
</ol>
</li>
</ul>
<h2 id="8-建模【重要，设计题】">8. 建模【重要，设计题】</h2>
<blockquote>
<p>对应前面的设计</p>
</blockquote>
<h3 id="8-1-有限状态机及其应用。">8.1. 有限状态机及其应用。</h3>
<ol>
<li>
<p><strong>定义：</strong></p>
<p>有限状态机表示有限个状态以及在这些状态之间的转移和动作等行为的数学模型。</p>
</li>
<li>
<p><strong>分类：</strong></p>
<ol>
<li>Moore State models：输出信号仅与当前状态有关，即可以把Moore型有限状态的输出看成是<strong>当前状态的函数</strong></li>
<li>Mealy State models：输出信号不仅仅与当前状态有关，还与所有的输入信号有关，即可以把Mearly型有限状态看成是<strong>当前状态和输入信号的函数</strong></li>
</ol>
</li>
<li>
<p>**示例：**交通信号灯、电话、定时炸弹、自动贩卖机、电梯等</p>
</li>
</ol>
<p>层次型有限状态机：近似的状态归属为一个更大的状态</p>
<p><img src="https://spricoder.oss-cn-shanghai.aliyuncs.com/2020-Introduction-to-Embedded-Systems/img/lec8/25.png" alt=""></p>
<p><strong>注意，不同层次也是可以直接到达具体的状态的，不一定要进入该层次再确定，如上面的 Z→A</strong></p>
<h3 id="8-2-有限状态机的实现。">8.2. 有限状态机的实现。</h3>
<ol>
<li>
<p>Switch-case</p>
</li>
<li>
<p>状态表</p>
<p><img src="https://pic3.zhimg.com/80/v2-de3a8e09c4e2d6c71b05656166a22f12_720w.webp" alt="img"></p>
</li>
<li>
<p>面向对象设计模式：相比于其他方式，更容易维护和扩展，降低了实际状态之间的耦合，通过抽象接口来实现，当需要修改或添加状态时，只需要修改内部实现而不需要改变接口，隐藏内部实现一定程度上分解了复杂度，使得代码容易理解。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>嵌入式</category>
      </categories>
      <tags>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>10 外部存储器</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84/10%20%E5%A4%96%E9%83%A8%E5%AD%98%E5%82%A8%E5%99%A8/</url>
    <content><![CDATA[<h4 align="center">图片来源：南京大学软件学院COA课程PPT</h4>
<h5 align="center">©author:zzb</h5>
<div style="text-align: center"><a href="https://github.com/wbl-z">Github主页</a>  <a href="https://blog.csdn.net/m0_51691879">CSDN主页</a></div> 
<h1>10 外部存储器</h1>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211114150452483.png" alt="image-20211114150452483"></p>
<span id="more"></span>
<p>外存不在计算机系统的内部，不在冯诺依曼架构中</p>
<p>用于存储<strong>不常用，数据量大</strong>的数据，外存是<strong>非易失的</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211114150620522.png" alt="image-20211114150620522"></p>
<h2 id="磁盘存储器">磁盘存储器</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211114150958798.png" alt="image-20211114150958798"></p>
<p><strong>玻璃</strong>基材更具优势</p>
<p>其中，<strong>能够支持磁头有较低的飞行高度</strong>。飞行高度是指磁头离盘片的高度，飞行高度越低，能分辨的范围就越小，那么磁盘上就能把更小的范围作为一个单元，这样存储的信息就能更多</p>
<p><strong>飞行高度取决于基材的性质</strong>，飞行高度越低，就要求基材越平整（否则就可能撞到），同时要求基材受外界环境因素如气温的影响要小，如温度变化时形变小</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211114151806520.png" alt="image-20211114151806520"></p>
<p><strong>基材的圆片是软的那么就是软盘，硬的就是硬盘</strong></p>
<p>软盘的存储数据量为<strong>1.44MB</strong>，常用的就是容量为1.44MB的<strong>3.5英寸</strong>软盘，之后由于U盘的出现，软盘的应用逐渐衰落直至淘汰</p>
<p>硬盘可以多个盘片叠在一起，增大容量，而软盘只有一层；硬盘更加稳定，软盘很容易坏</p>
<h3 id="结构">结构</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211114152631105.png" alt="image-20211114152631105"></p>
<p>蓝色的是中间的轴，红色的是盘片，盘片的两个面都可以用来存储信息，绿色的是读写头，可以移动读写头的位置来读取/写入想要的信息</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211114153453098.png" alt="image-20211114153453098"></p>
<p>每一个面都需要一个读写磁头，所有的磁头都是固定在一起，同时移动的，所处位置相同。盘片是和轴固定在一起的，一起旋转，转速相同。</p>
<p><strong>磁头只能在一条直线上来回移动，盘片在旋转移动</strong>。</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211114153905447.png" alt="image-20211114153905447"></p>
<p><strong>温彻斯特磁头</strong>：盘片静止时，停留在盘片上，盘片选择时，空气压力使得磁头上升，从而达到一个比较小飞行高度</p>
<h3 id="读写机制">读写机制</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211114154240752.png" alt="image-20211114154240752"></p>
<p>读写时静止是指读写单个位置的信息时，磁头当然是不动的，但在广义的读写上，磁头当然是要移动的</p>
<p>现在的硬盘用两个磁头（双磁头）<strong>分别来进行读和写</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211114154723264.png" alt="image-20211114154723264"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211114154824299.png" alt="image-20211114154824299"></p>
<p>早期单磁头的使用的仅仅是上面的写磁头，也即利用感应磁场来进行写入，感应电流来读取（但显然感应电流的产生需要变化的磁场，同时电流不够稳定，因此利用感应电流来读取信息<strong>效率不好</strong>）<em>（应该是根据感应电流的方向来判断信息，如果没有产生感应电流，那么信息和之前的一样）</em></p>
<p>后来新加入的读取磁头利用的是一个<strong>磁阻敏感器</strong>，根据<strong>磁场的方向</strong>不同，敏感器的<strong>电阻会改变</strong>，通过检测敏感器的电压变化即可实现读取信息，<strong>效率更高</strong>，<strong>因此硬盘的读取速度一般比写入速度快</strong>。同时使用这种方式，对介质的大小要求也会更低*（如果是感应电流，那么介质面积不能太小，否则可能产生不了感应电流）*，<strong>因此存储密度也可以更高</strong></p>
<h3 id="数据组织">数据组织</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211114155912307.png" alt="image-20211114155912307"></p>
<p>数据以扇区的形式来传输信息，默认一个扇区是512B（即使面积大小不同的扇区容量也都一样为512B）</p>
<p>磁道<strong>从外往里面编号</strong>，最外面是0，里面是N</p>
<p>磁头不读取信息时会<strong>停留在最外侧，也即磁道0</strong></p>
<h4 id="扇区划分——恒定角速度（CAV）">扇区划分——恒定角速度（CAV）</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211114160253407.png" alt="image-20211114160253407"></p>
<h4 id="扇区划分——多带式记录-多重区域记录">扇区划分——多带式记录/多重区域记录</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211114160721871.png" alt="image-20211114160721871"></p>
<p>外层的扇区数目<strong>多于内层</strong>，而扇区的<strong>容量是一样的，同时为了保证数据传输的稳定性</strong>（即读写不同区域的速度应当一样）因此外层扇区对应的<strong>圆心角会更小，所以在读取外层数据时，盘的转速要小</strong>，而内层扇区对应的<strong>圆心角会更大，因此读取内层数据盘的转速要更大</strong>。这样需要更加精细的调控，所以<strong>电路更加复杂</strong></p>
<p><strong>注意</strong>：上图中的<strong>一个同心圆不是一个磁道，而是一组磁道，里面包含了多个磁道</strong> <em>（因为往外一个磁道，周长的增加是很小的，可能不够在多放进去一个扇区，所以这个磁道应当保持和里面一层磁道相同的扇区划分，<strong>就像恒定角速度划分一样</strong>，即多个相邻磁道是采用恒定角速度的）</em></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211114161833891.png" alt="image-20211114161833891"></p>
<h3 id="格式化">格式化</h3>
<p>如何将磁盘按上面说的数据组织方式来组织呢？并不是在加工时就划分好，<strong>而是后期来处理的</strong>，这个过程就是<strong>格式化</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211114162349970.png" alt="image-20211114162349970"></p>
<p><strong>同步字节是用来告诉磁头接下来就是一个新的扇区了</strong>，就可以读取后面的内容来判断如扇号等信息了</p>
<p><strong>间隙的留出是让磁头去处理判定读到的信息如扇号是不是想要的那个</strong>（因为盘是不停地在转的，而判断需要时间，如果没有间隙，数据和扇号紧挨着，那么当判定完时，数据已经转过一部分了。如果判断的时间是固定的，那么就可以用一个固定长度的间隙让其反应）。<strong>转速越快，那么间隙就要越大</strong></p>
<ul>
<li>
<p>仅消除数据是<strong>高级格式化</strong></p>
</li>
<li>
<p>建立磁道，建立扇区是<strong>低级格式化</strong>，完全清除数据，对整个硬盘做格式化，不能区分C/D盘等，同时低级格式化是对硬盘有损伤的</p>
</li>
</ul>
<blockquote>
<p>现在的新标准是是指将8个扇区（每扇区512Byte）重新定义为一个“4K扇区”格式，共用1个ID，这样可以提高效率，一次读取数据只要读取更少的扇区即可</p>
<p>新标准的&quot;4K扇区&quot;硬盘，为了保证与之前512B的兼容性，会将扇区模拟成512B，这才会有4K扇区和4K簇不对齐的情况发生</p>
</blockquote>
<h3 id="I-O访问时间">I/O访问时间</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211114165106721.png" alt="image-20211114165106721"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211114170106854.png" alt="image-20211114170106854"></p>
<p>访问多个相邻磁道</p>
<ul>
<li><strong>旋转延迟都要考虑</strong></li>
<li>寻道时间通常指考虑<strong>第一个磁道的寻道时间</strong>，<strong>因为后续磁道很近，寻道时间非常短</strong>，但在明确指出跨越每个磁道的寻道时间时仍要考虑</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211114170520159.png" alt="image-20211114170520159"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211114170530312.png" alt="image-20211114170530312"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211114170751906.png" alt="image-20211114170751906"></p>
<p>这里随机存取，<strong>平均寻道时间是要算入的，因为不是相邻的磁道</strong></p>
<p>显然顺序组织的方式速度更快</p>
<p>计算机中的<strong>磁盘整理</strong>就是把分散的文件信息放到连续的一起，因此一定的磁盘整理是有必要的，但不能过于频繁，因为在这个过程中会对磁盘有大量的读写，会对磁盘有损伤</p>
<h3 id="磁头寻道-磁盘调度">磁头寻道/磁盘调度</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211114171146332.png" alt="image-20211114171146332"></p>
<h4 id="先来先服务（FCFS）">先来先服务（FCFS）</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211114171424559.png" alt="image-20211114171424559"></p>
<h4 id="最短寻道时间优先（SSTF）">最短寻道时间优先（SSTF）</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211114171545685.png" alt="image-20211114171545685"></p>
<p>饥饿现象是指最边上的会很难被访问到，要一直等待</p>
<h4 id="扫描-电梯（SCAN）">扫描/电梯（SCAN）</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211114171845112.png" alt="image-20211114171845112"></p>
<p>先以一个方向到头，再返回，循环往复，对于不同位置的磁道响应频率不同，靠近两端的会在一次响应后很快又得到一次响应，而明明刚刚已经处理过了，这时再次响应会有所浪费，而再下一次想要响应间隔时间又会很长，<strong>也即两次响应的间隔不均匀（中间的磁道是均匀的）</strong></p>
<h4 id="循环扫描（C-SCAN）">循环扫描（C-SCAN）</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211114172946698.png" alt="image-20211114172946698"></p>
<h4 id="LOOK">LOOK</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211114174202886.png" alt="image-20211114174202886"></p>
<p>对SCAN的升级，但也有代价：如果调转方向后，又产生了原来方向上的任务，这时候就会导致这个新任务需要较长时间才能被响应</p>
<h4 id="C-LOOK">C-LOOK</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211114174703606.png" alt="image-20211114174703606"></p>
<h2 id="光存储器">光存储器</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211115194524279.png" alt="image-20211115194524279"></p>
<h3 id="CD和CD-ROM">CD和CD-ROM</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211115194950266.png" alt="image-20211115194950266"></p>
<p><strong>CD和CD-ROM都是只读的</strong>，只是CD-ROM具有耐用和纠错的功能，因此加了给ROM后缀</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211115195527048.png" alt="image-20211115195527048"></p>
<p><strong>保护高反射材料的丙烯酸树脂保护层是不透明的</strong>，而<strong>聚碳酸酯塑料是透明的</strong>，因此上图中，下面是反光的那一层，上面是可以用来印制图案的，即标签</p>
<p><em>光盘需要光驱来读取，事实上磁盘也是需要特定的驱动器来读取的，但随着磁盘容量增大，对环境的要求增大，因此磁盘驱动器是和磁盘<strong>绑定</strong>在一起了，但光盘的容量小，且比较廉价，<strong>因此和光驱还是分开的</strong></em></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211115195913347.png" alt="image-20211115195913347"></p>
<p>用<strong>低强度激光</strong>来读取</p>
<p>光盘中是以<strong>一根单螺旋线来存储信息的</strong>，而不是和磁盘那样分磁道，因此，光盘上<strong>所有扇区长度一样长</strong>，就像是把一根直线弯曲成一圈圈圆</p>
<p>同样为了保证读取速度的恒定，光驱应当以<strong>恒定的线速度读出，所以盘片要变速选旋转</strong></p>
<p>光盘的一个扇区分为4个部分（如图以CD-ROM为例）：<strong>同步区，ID区，数据区，纠错区</strong>（CD-ROM有纠错功能）</p>
<p><strong>CD-ROM的容量大约为650MB</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211115200512391.png" alt="image-20211115200512391"></p>
<h3 id="CD-R和CD-RW">CD-R和CD-RW</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211115200621591.png" alt="image-20211115200621591"></p>
<p><strong>CD-R（可刻录）只能写一次，CD-RW（可重写）可以写多次</strong>。使用<strong>高强度激光</strong>来改变</p>
<h3 id="DVD（DVD-R-DVD-RW）">DVD（DVD-R/DVD-RW）</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211115201029656.png" alt="image-20211115201029656"></p>
<p><strong>DVD的容量更大，因此DVD的激光束会比较细，波长更短</strong>，这也是为什么DVD的光驱可以读CD的，但反过来CD的光驱不能读DVD</p>
<p><strong>DVD采用两层结构（一个半反射层，一个全反射层），注意不是两面，而是在一面中有两层</strong>，通过调整激光束可以读取不同层的信息</p>
<p><strong>DVD-ROM是用两面都可以用于记录</strong></p>
<h3 id="高清晰光盘">高清晰光盘</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211115201702715.png" alt="image-20211115201702715"></p>
<h2 id="磁带">磁带</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211115201852159.png" alt="image-20211115201852159"></p>
<p><strong>串行记录（蛇形记录）方式</strong>，如上图，是左右的蛇形方式，先在磁道0上从左读写到右，再从磁道1上从右到左读写。</p>
<p>上图下面的一张是指在局部上会有并行，但整体主要是串行方式，比如有12个磁道，从左到右先<strong>同时</strong>读取0-3这4个磁道，再从右到左读写4-7这4个磁道</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211115202726138.png" alt="image-20211115202726138"></p>
<h2 id="U盘和固态硬盘">U盘和固态硬盘</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211115203225240.png" alt="image-20211115203225240"></p>
<p><strong>内存和外存的界限在变得模糊</strong></p>
<h2 id="总结">总结</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211115203708592.png" alt="image-20211115203708592"></p>
]]></content>
      <categories>
        <category>计算机组织结构</category>
      </categories>
      <tags>
        <tag>计算机组织结构</tag>
      </tags>
  </entry>
  <entry>
    <title>13 总线</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84/13%20%E6%80%BB%E7%BA%BF/</url>
    <content><![CDATA[<h4 align="center">图片来源：南京大学软件学院COA课程PPT</h4>
<h5 align="center">©author:zzb</h5>
<div style="text-align: center"><a href="https://github.com/wbl-z">Github主页</a>  <a href="https://blog.csdn.net/m0_51691879">CSDN主页</a></div> 
<h1>13 总线</h1>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207153248644.png" alt="image-20211207153248644"></p>
<span id="more"></span>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207153453753.png" alt="image-20211207153453753"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207153523369.png" alt="image-20211207153523369"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207153628700.png" alt="image-20211207153628700"></p>
<p>总线包括<strong>芯片内部总线、系统总线、通信总线</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207153843673.png" alt="image-20211207153843673"></p>
<p>系统总线在不同位置不同场景下会有不同的含义，课程中主要把系统总线作为一个通用的概念，而不是特指某条总线</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207154032467.png" alt="image-20211207154032467"></p>
<p>地址不一定只能一次传输，事实上有时候是可以分成两次来传输地址的，这样就能扩展寻址空间，即寻址空间不是由地址线的宽度来决定的</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207154229952.png" alt="image-20211207154229952"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207154449894.png" alt="image-20211207154449894"></p>
<p><strong>当总线被使用时，其他设备不能抢占</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207154524872.png" alt="image-20211207154524872"></p>
<h2 id="用途">用途</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207154644495.png" alt="image-20211207154644495"></p>
<h2 id="仲裁">仲裁</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207154759597.png" alt="image-20211207154759597"></p>
<p>要在<strong>优先级和公平性之间取得平衡</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207163212308.png" alt="image-20211207163212308"></p>
<p>仲裁器是硬件设备，集中处理总线使用权</p>
<h3 id="集中式">集中式</h3>
<h4 id="链式查询">链式查询</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207163402586.png" alt="image-20211207163402586"></p>
<p>允许信号从仲裁器下发，按优先级从高到底传递（<strong>串行</strong>），从而高优先级的设备如果要使用总线，则可以截取允许信号</p>
<p>繁忙线与各个设备之间是<strong>双向箭头</strong>，因为各个设备要去监听看总线是否繁忙，如果繁忙则不能发起请求。同时得到允许的设备要去修改这条线的状态，使之变成繁忙</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207164628442.png" alt="image-20211207164628442"></p>
<p>连接的设备<strong>越多</strong>，那么速度就会<strong>越慢</strong>，因为允许信号要经过每一个设备</p>
<h4 id="计数器查询">计数器查询</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207164945819.png" alt="image-20211207164945819"></p>
<p>至少要<strong>log<sub>2</sub>n</strong>根线，来区分不同的设备ID，可以灵活的调整优先级</p>
<p>相当于一个个的报学号，可以按不同的顺序报，也可以从不同的位置开始报，从而来平衡优先级和公平性，先报到的可以使用总线</p>
<p>如果一个响应后又从1开始计数，那么就和上面的链式查询效果一样的</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207165624775.png" alt="image-20211207165624775"></p>
<h4 id="独立请求">独立请求</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207165913987.png" alt="image-20211207165913987"></p>
<p>仲裁器可以灵活使用不同的策略来分配总线</p>
<p>但线路更多了</p>
<p>不需要和前面一样要等待询问其他设备就可以请求总线，随时都发送请求，如果仲裁器通过了，就可以直接获得允许</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207171157206.png" alt="image-20211207171157206"></p>
<h3 id="分布式">分布式</h3>
<h4 id="自举式">自举式</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207171325430.png" alt="image-20211207171325430"></p>
<p>设备<strong>只需要</strong>关心优先级比它高的设备是否需要使用总线，而<strong>无需</strong>去关心优先级比它低的设备是否需要总线</p>
<p>因此<strong>高优先级需要关心的少</strong>，上面设备3的优先级最高，只需要关心是否总线忙即可</p>
<p>而<strong>最低优先级的设备没有请求线</strong>，如上的设备0，因为没有其他设备需要去关心它的请求</p>
<p>同样的当使用总线时要把总线设为忙</p>
<p><strong>优先级很明显</strong></p>
<h4 id="冲突检测">冲突检测</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207172059705.png" alt="image-20211207172059705"></p>
<p><strong>公平性很明显</strong></p>
<p>解决冲突要消耗一定的时间，效率会低一些</p>
<h2 id="时序">时序</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207172448029.png" alt="image-20211207172448029"></p>
<p><strong>总线事务</strong>是指在总线上完成一次数据的传递：是指根据<strong>一个地址，但数据可能会传输多次</strong></p>
<h4 id="同步时序？？">同步时序？？</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207172655523.png" alt="image-20211207172655523"></p>
<p>所有设备共用一个时钟，会导致快的设备要去迁就慢的设备(即要等待慢的设备，而不像下面的异步一样快的设备只要发出信号就可以去做其他事情)，也即快的设备的速度没法发挥出来。</p>
<blockquote>
<p>如时钟周期为50ns，存储器准备数据230ns，那么实际上仍然需要250ns才能完成数据的准备，因为必须在一个时钟周期开始才能进行下一步，所以即使存储器完成了准备，也需要等待时钟周期，而异步时序则当数据准备完成即可直接传输</p>
</blockquote>
<p>总线不能太长，如果总线很长，那么时钟信号会有较大的延迟</p>
<h4 id="异步时序">异步时序</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207173006368.png" alt="image-20211207173006368"></p>
<p>Ready信号说明已经准备好了，设备可以来取，Ack信号表明告诉对方已经取完了，对方可以把ready信号给拿走了</p>
<p>信号都有上升沿和下降沿，分别表示把信号放到总线上和把信号从总线上拿走的过程</p>
<p><strong>一次握手其实就是表明一个前后关系</strong></p>
<ul>
<li><strong>非互锁</strong>是一个自然的状态，只通过<strong>一次握手</strong>，而没有加额外的限制，只是一个自然的先后关系，先准备好才能去取，然后才有取好信号</li>
<li><strong>半互锁</strong>是用<strong>两次握手</strong>强调已经取完了之后Ready信号才能撤走，这是为了防止出现在取之前（并不是一出现Ready就去取，可能正在处理其他事务）就已经撤走了Ready，即撤早了，而无法取数据就一直处于等待的情况</li>
<li><strong>全互锁</strong>是用<strong>三次握手</strong>强调只有Ready撤走后，才能撤走Ack，如果ready的设备正在处理其他事务，而另一个设备已经取好了，并撤走了Ack，那么设备就以为对方还没有取好，因此会一直处于Ready状态</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207205114405.png" alt="image-20211207205114405"></p>
<p>注意总共为<strong>7次握手</strong>，<strong>握手中即有数据传输的时间</strong>，所有的握手时间加起来即一次总线事务的时间，而不需要额外考虑数据传输。</p>
<blockquote>
<p>如1花费了40ns，即存储器得到ReadReq信号并读取了地址并设置了Ack信号花费40ns。此时存储器已经得到了地址信息，可以<strong>开始准备数据</strong>。</p>
<p>数据准备阶段：在234中有3次握手，是为了保证顺序，当4结束时存储器把数据放到数据线上，因此这里花费的时间为<img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220107113225293.png" alt="image-20220107113225293">3次握手的时间和存储器准备这些数据的时间的<strong>最大值</strong>。</p>
<p>数据传输阶段：567则是通过3次握手，保证数据能传输到CPU中</p>
<p>上面3个部分全部加起来就是一次总线事务的时间，数据量/时间即数据传输速率</p>
</blockquote>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207205610699.png" alt="image-20211207205610699"></p>
<p>速度快的设备在Ready后，就可以去忙别的事情了，而等慢的设备Ack后，快的设备再回来处理这件事，从而<strong>协调好不同速度的设备</strong></p>
<p><strong>对噪声敏感</strong>是指设备可能把噪声误认为是信号，从而出现错误。因为异步信号的发送是没有固定的时间的，是<strong>很随意的</strong>，任何时间段都可以发出信号，所以会容易把偶然的噪声当作信号</p>
<h4 id="半同步时序">半同步时序</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207205842375.png" alt="image-20211207205842375"></p>
<p>固定在<strong>上升沿</strong>才能发出<strong>准备和响应信号</strong>，其他时间段的信号均为无效，从而减少噪声的影响</p>
<h4 id="分离事务">分离事务</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207210148594.png" alt="image-20211207210148594"></p>
<p>即把总线事务分成地址传过去和数据传过来两个过程，在得到地址后准备数据的过程中，可以把总线释放出来，给其他设备使用，等数据准备好了，再去申请总线</p>
<p>提高了<strong>总线利用率</strong></p>
<p>但这样会<strong>增加每个总线事务的时长</strong>，因为在数据准备好后再申请总线不一定立刻就能得到，可能需要等待一段时间</p>
<h2 id="总线带宽和数据传输速率">总线带宽和数据传输速率</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207210713756.png" alt="image-20211207210713756"></p>
<p>总线带宽是<strong>理想状态</strong>下的<strong>数据传输速率</strong>，不考虑<strong>地址传输</strong>和总线仲裁</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207211038040.png" alt="image-20211207211038040"><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207211207154.png" alt="image-20211207211207154"></p>
<p><strong>地址不算数据</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207211252537.png" alt="image-20211207211252537"></p>
<p>同步总线中一个时钟周期内只能做一件事情</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207211412513.png" alt="image-20211207211412513"></p>
<p>计算数据传输速率只要计算传输一次4个或16个字即可，同时<strong>最后全部传完之后的空闲也要算进去，因为肯定还会有下一次总线事务，所以可以算入到每次传完后里面</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207212358935.png" alt="image-20211207212358935"></p>
<p>这里每次总线事务都是可以理解是第一次访问内存，所以都需要花费200ns，只有像下面的一次传输一个块的，才是考虑后面的访cache速度快</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211207212407122.png" alt="image-20211207212407122"></p>
<h4 id="提高总线的数据传输率">提高总线的数据传输率</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211211201211349.png" alt="image-20211211201211349"></p>
<p>块传输可以<strong>减少地址传输的时间</strong>，同时<strong>减少了准备数据的时间</strong>，因为有cache的存在，所以第一次数据读取会比较慢，但后续的读取会很快</p>
<h2 id="总线的层次结构">总线的层次结构</h2>
<p>总线主要讨论<strong>CPU、主存、IO</strong>之间的连接和数据传输</p>
<h4 id="单总线结构">单总线结构</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211211213440303.png" alt="image-20211211213440303"></p>
<h4 id="双总线结构1">双总线结构1</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211211213600776.png" alt="image-20211211213600776"></p>
<h4 id="双总线结构2">双总线结构2</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211211213732850.png" alt="image-20211211213732850"></p>
<p>####　多总线结构１</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211211213813963.png" alt="image-20211211213813963"></p>
<p>这种情况是cache还设计在CPU外,与之分离的时候的总线结构,当cache合并到CPU中时,就是内部总线了,而不存在上面的本地总线</p>
<h4 id="多总线结构2">多总线结构2</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211211214009253.png" alt="image-20211211214009253"></p>
<p><strong>从外部输入的数据可以直接存入主存，而不需要经过CPU</strong></p>
<h4 id="多总线结构3">多总线结构3</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211211214258764.png" alt="image-20211211214258764"></p>
<h2 id="总结">总结</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211211214355193.png" alt="image-20211211214355193"></p>
<p><strong>总线的巨大缺点是一次只能有一个数据在总线上，如果多个，那么会出错</strong></p>
]]></content>
      <categories>
        <category>计算机组织结构</category>
      </categories>
      <tags>
        <tag>计算机组织结构</tag>
      </tags>
  </entry>
  <entry>
    <title>12 虚拟存储器</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84/12%20%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8/</url>
    <content><![CDATA[<h4 align="center">图片来源：南京大学软件学院COA课程PPT</h4>
<h5 align="center">©author:zzb</h5>
<div style="text-align: center"><a href="https://github.com/wbl-z">Github主页</a>  <a href="https://blog.csdn.net/m0_51691879">CSDN主页</a></div> 
<h1>12.虚拟存储器</h1>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211129172949605.png" alt="image-20211129172949605"></p>
<span id="more"></span>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211129173241691.png" alt="image-20211129173241691"></p>
<p><strong>系统软件并不是操作系统</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211129173659417.png" alt="image-20211129173659417"></p>
<p>实用程序一般是指程序的创建，文件管理等</p>
<p>当然操作系统本身也是一个程序，自身还是需要占用资源的，同时又在分配计算机的资源</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211129175001089.png" alt="image-20211129175001089"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211129175239499.png" alt="image-20211129175239499"></p>
<p>通过仅将当前需要的页调用主存，其他的页暂时放在外存上，可以让主存中尽可能多的包含更多的任务，提高CPU的利用率</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211129175319015.png" alt="image-20211129175319015"><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211129183712793.png" alt="image-20211129183712793"></p>
<p>分区方式：（系统区占用的大小在不同分区方式中都是一样的，不同分区方式是针对用户分区的）</p>
<ul>
<li><strong>简单固定分区：<strong>把用户区划分成长度不等的固定长度的区域，给任务分配一个</strong>可用</strong>且可以<strong>容纳它</strong>的<strong>最小</strong>分区。<strong>注意一个分区只能放一个任务，不能多个任务一起放在一个分区，因此会非常浪费内存</strong></li>
<li>**可变长分区：**根据任务需要的大小来分配内存，提高主存利用率，但时间长了之后，<strong>碎片会变多，这些碎片很难被利用</strong></li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211129184112800.png" alt="image-20211129184112800"></p>
<p><strong>利用页可以使得一个任务的不同页不需要用连续的页框来存储</strong>，注意这里是把一个任务的<strong>所有部分都分成页装进来</strong>（还不是下面的请求分页的思想）</p>
<h2 id="虚拟内存">虚拟内存</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211129191908177.png" alt="image-20211129191908177"></p>
<p>任务越来越多，对内存的需求越来越大</p>
<p>基本思想：</p>
<ul>
<li><strong>请求分页</strong>：仅仅把需要的页面载进来，而不是把任务的所有页都载进来。因此会存在未命中的问题</li>
</ul>
<p>优点：</p>
<ul>
<li>在物理内存不变的情况下，可以载入更多的任务</li>
<li>编写程序时无需考虑物理内存的情况，因此程序可以在不同内存大小的计算机上运行</li>
<li>可以在比物理内存还大的虚拟地址空间中编程</li>
</ul>
<h3 id="流程">流程</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211129192341451.png" alt="image-20211129192341451"></p>
<p><strong>所有使用的页面要载入到硬盘里，当前使用的页面载入到内存里</strong>，<strong>同时被替换且已经被修改的页重新存储到硬盘中，即写回法</strong></p>
<h3 id="设计">设计</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211129192616096.png" alt="image-20211129192616096"></p>
<p>cache比主存快10倍，而主存比硬盘快100000倍，因此在cache中缺失来访问主存比在内存中缺失来访问硬盘的开销要小很多，所以要<strong>尽可能减少对硬盘的访问</strong></p>
<ul>
<li>增大页大小，一次能多加载些：如4KB</li>
<li>使用关联映射，增大命中率</li>
<li>采用写回法，减少对硬盘的访问</li>
</ul>
<h2 id="分页式虚拟存储器">分页式虚拟存储器</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211129193003620.png" alt="image-20211129193003620"></p>
<p>程序运行时，会生成一个<strong>页表</strong>，记录程序<strong>所有虚拟页</strong>的信息，<strong>页表同样也是存在内存里</strong></p>
<h3 id="页表">页表</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211129193703884.png" alt="image-20211129193703884"></p>
<p>在页表中，<strong>虚拟页号是不用记录的</strong>，因为页表中是所有页的信息，数组的下标就代表了页的标号</p>
<p>物理地址和虚拟地址的<strong>页内地址是一样的</strong>，所以只要替换虚拟页号就可以，一般来说，<strong>虚拟地址的长度会比物理地址的长度要长</strong></p>
<h3 id="快表TLB">快表TLB</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211129194533164.png" alt="image-20211129194533164"></p>
<p>页表的使用增加了主存的访问，每次访存都要通过页表去得知这个虚拟地址所对应的物理地址是多少，而之前的cache就是要尽可能减少主存的访问</p>
<p>而页表很大，不能全部放到cache中，<strong>所以把最活跃使用的几个页表项放到cache中，称为快表（TLB）</strong>，对应的主存中的页表就称为<strong>慢表</strong></p>
<p>快表采取<strong>关联/组关联映射，增大命中率；替换方法采用随机替换法</strong></p>
<h3 id="CPU访存过程">CPU访存过程</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211129195949467.png" alt="image-20211129195949467"></p>
<p><strong>如果在TLB中hit了，那么这个页一定已经被载入内存中了。</strong></p>
<p>要出现TLB中命中但页没有被载入的情况，只有一种可能就是，TLB中有记录，但主存中对应的那一页被其他页给替换了，但这时新的页进来，那么TLB和页表自然也要更新，所以只要把刚刚被替换掉的那一页的记录也给替换掉即可。<strong>这样就可以保证TLB中的记录一定是已经被载入的</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211129200701995.png" alt="image-20211129200701995"></p>
<h3 id="缺失组合">缺失组合</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211129201443716.png" alt="image-20211129201443716"></p>
<p>第8种情况和上面的TLB命中必定载入同理，当一个页从主存中被替换出去后，<strong>cache中也会发生替换，那么这个新的数据自然是去把被替换掉的页的信息给替换掉最好</strong></p>
<p><strong>TLB缺失可以由硬件处理也可以由软件处理</strong></p>
<p><strong>缺页由软件处理，虚拟地址到物理地址的转换由硬件处理</strong></p>
<h2 id="分段式虚拟存储器">分段式虚拟存储器</h2>
<p>分页式可能会把数据分到不同的页，不利于保护和管理</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211129204057971.png" alt="image-20211129204057971"></p>
<p>分段式和前面的分区类似，但同样是把需要的段载入内存中去，而不是和前面的分区那样是全部载入。同样会出现<strong>碎片化的问题</strong></p>
<h2 id="段页式虚拟存储器">段页式虚拟存储器</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211129204431193.png" alt="image-20211129204431193"></p>
<p>每一个段都有一个自己的页表<img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220106215707945.png" alt="image-20220106215707945"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211129204604663.png" alt="image-20211129204604663"></p>
]]></content>
      <categories>
        <category>计算机组织结构</category>
      </categories>
      <tags>
        <tag>计算机组织结构</tag>
      </tags>
  </entry>
  <entry>
    <title>15 指令周期和流水线</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84/15%20%E6%8C%87%E4%BB%A4%E5%91%A8%E6%9C%9F%E5%92%8C%E6%B5%81%E6%B0%B4%E7%BA%BF/</url>
    <content><![CDATA[<h4 align="center">图片来源：南京大学软件学院COA课程PPT</h4>
<h5 align="center">©author:zzb</h5>
<div style="text-align: center"><a href="https://github.com/wbl-z">Github主页</a>  <a href="https://blog.csdn.net/m0_51691879">CSDN主页</a></div> 
<h1>15 指令周期和指令流水线</h1>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212172556900.png" alt="image-20211212172556900"></p>
<span id="more"></span>
<h2 id="指令周期">指令周期</h2>
<h3 id="指令周期-2">指令周期</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212172643616.png" alt="image-20211212172643616"></p>
<p>只有机器关闭，发生错误，遇到停止计算机的指令时，程序才会停止。只要计算机开着，即使不使用，也是持续在执行指令的</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212172844488.png" alt="image-20211212172844488"></p>
<p><code>返回字符串或向量数据</code>是指比如要取一个字符串，那么一次可能无法全部得到，那么就<strong>必须要分多次，多次的计算源操作地址，取字符串，计算目的操作数地址，存字符串</strong>。但这是<strong>一条指令的功能</strong>，所以直到全部取完后，才进行下一条指令的地址计算</p>
<h3 id="带中断的指令周期">带中断的指令周期</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212173408972.png" alt="image-20211212173408972"></p>
<p><strong>在这条指令执行完，下一条指令未开始的中间进行中断的判断</strong>（这时候PC已经是下一条指令的地址了）</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212173517551.png" alt="image-20211212173517551"></p>
<h3 id="间址周期">间址周期</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212173634159.png" alt="image-20211212173634159"></p>
<p>把间接地址的读取看作一个额外的指令子周期，相比于直接寻址，<strong>多了存储器的访问，所以单独作为一个子周期</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212173845638.png" alt="image-20211212173845638"></p>
<h2 id="CPU的任务">CPU的任务</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212174036530.png" alt="image-20211212174036530"></p>
<h3 id="寄存器">寄存器</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212174727688.png" alt="image-20211212174727688"></p>
<h3 id="数据流">数据流</h3>
<h4 id="取指周期">取指周期</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212174908311.png" alt="image-20211212174908311"></p>
<p>如果是同步的总线，那么只要按时间取做上面的流程即可，如果是异步总线，那么在存储器把数据放到数据总线上时，还要通过控制总线告诉CPU已经好了，所以存储器与控制总线之间是双向箭头。</p>
<p>而这里单向箭头，说明是同步总线。事实上，一般来说，<strong>CPU和存储器之间都是采用同步的</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212175521345.png" alt="image-20211212175521345"></p>
<p>黄色箭头代表两个含义：</p>
<ol>
<li>
<p>控制PC传输地址，从而取指令</p>
</li>
<li>
<p><strong>当指令取完后、指令执行前</strong>（一般是<strong>要取到IR中后才加1</strong>，即在<strong>取指周期的最后</strong>加1，否则不知道+1是加多少），而不是指令执行完，控制PC+1。但其实也不一定，<strong>如下，PC+1可以和其他的一起执行</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220107160454915.png" alt="image-20220107160454915"></p>
</li>
</ol>
<h4 id="间址周期-2">间址周期</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212175802748.png" alt="image-20211212175802748"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212175852485.png" alt="image-20211212175852485"></p>
<p>注意：<strong>间址周期取回来到MBR的只是有效地址EA，而通过有效地址EA去取操作数的过程是在执行周期里的</strong></p>
<h4 id="中断周期">中断周期</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212180314902.png" alt="image-20211212180314902"></p>
<p>这里数据线都是指向存储器的，表明<strong>写操作</strong>，同时PC连到MBR，因此这里想要做的是对<strong>PC进行保存（PC这时候存的是下一条指令的地址）</strong>，从而能够在中断之后能够准确的<strong>返回</strong></p>
<p>中断中由<strong>控制器去告诉MAR地址</strong>，即PC要存储在存储器的哪一个位置，这个地址<strong>很可能是栈的指针</strong>，中断也是过程调用</p>
<p><strong>（在取指过程中由PC告诉MAR，在间址过程中由MBR告诉MAR）</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212181013832.png" alt="image-20211212181013832"></p>
<h2 id="指令流水线">指令流水线</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212195915496.png" alt="image-20211212195915496"></p>
<p>流水线可以让每个部件各司其职，只做它要做的单一的事，提高效率，<strong>节省时间</strong></p>
<p><strong>CPU就像一个生产线</strong>，如果各个步骤的任务分配不够好，比如不同步骤所需时间不同，那么就会造成资源的浪费，如矿泉水的生产，不同步骤时间不同，那么时间短的就会闲着。</p>
<p><strong>因此对CPU生产线上的步骤进行阶段划分：</strong></p>
<h3 id="两阶段方法">两阶段方法</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212200713610.png" alt="image-20211212200713610"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212200819371.png" alt="image-20211212200819371"></p>
<p>取指令要访问内存，执行指令也可能要访问内存，可能会造成访存冲突</p>
<ul>
<li><strong>取指令的等待</strong>是执行的时间比取指令的时间长，所以要等待</li>
<li><strong>执行阶段的等待</strong>是可能执行的是跳转指令，所以取指令在执行期间取好的指令就要<strong>作废</strong>，要<strong>根据新的地址去取指令</strong>，此时执行阶段要等待</li>
</ul>
<h3 id="六阶段方法">六阶段方法</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212201501405.png" alt="image-20211212201501405"></p>
<p>六个阶段的所需时间<strong>几乎相等</strong>，因此如下可以把每个阶段<strong>所需时间当作一个时间单位</strong></p>
<p><strong>注意在EI阶段就会把目的操作数写入目的位置（主要是CPU内的寄存器），而如果是要写入主存的，才在WO阶段写，就和上面的FO一样，对于寄存器中的值不需要取，取的是主存中的操作数</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212201648969.png" alt="image-20211212201648969"></p>
<p>如同生产矿泉水的流水线</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212201926683.png" alt="image-20211212201926683"></p>
<ul>
<li>为了简化流水线的设计，可以假定每个指令都是6个阶段，如果没有某个阶段，不执行即可（如果为特殊指令设计不同阶段，那么是非常不划算的）</li>
<li>阶段之间<strong>不一定全都能并行，如对内存的访问，会产生访存冲突</strong></li>
<li>几乎相等，仍然是有差别时间，那么会导致一定的等待，所以<strong>时间单位应该以最长的时间的为准</strong>，保证每个阶段在这个时间单位内都能执行完</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212203056479.png" alt="image-20211212203056479"></p>
<p><strong>限制</strong>：在两阶段中跳转指令会使得已经取得的下一条指令失效。而在六阶段中会使得上面<strong>红框中执行了一半的指令的全部失效</strong></p>
<p><strong>注意</strong>：上面的<strong>最后一个指令的WO的同时，下面的FI也在执行</strong>，这是因为跳转指令<strong>不需要写存储器</strong>，而是在EI执行指令的过程中就把PC寄存器的值给改变了，<strong>所以在EI后面一个单位时间会执行正确的FI</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212203319302.png" alt="image-20211212203319302"></p>
<p>和跳转一样，中断也会使得指令失效，如上图中的<strong>排空流水线</strong>，这里多了一个无条件转移，<strong>那么在无条件转移把PC值修改后的一个单位时间内的FI才是有效的，中间的流水线全部失效</strong>，但已经在执行的指令的后续阶段是不受影响的</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212203406279.png" alt="image-20211212203406279"></p>
<p>绿色框是导致<strong>空闲</strong>的区域，而红色框内的执行是<strong>无效</strong>的，同理指令13的EI修改了PC，所以下面一个单位时间的I15才是有效的，中间的全部失效，但I13剩下的阶段正常进行</p>
<h3 id="流水线的性能">流水线的性能</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212203637784.png" alt="image-20211212203637784"></p>
<p>这里的<strong>t即单位时间</strong>，应当为各阶段中花费时间最大的时间，加上两阶段切换的时间</p>
<p>锁存时间是在<strong>两个阶段之间切换的时间</strong>，<code>就像接力赛，接力棒由前一个人放到桌子上，下一个人再去桌子上拿，这样是最稳妥安全的。</code></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212204131466.png" alt="image-20211212204131466"></p>
<p>T<sub>k,n</sub>是<strong>最理想</strong>的情况，第一条指令执行需要kt，后面的每多一条指令，总时间只增加1t，所以是$[k+(n-1)]t$</p>
<p><strong>加速比</strong>是指<strong>没有使用流水线和使用了流水线的时间之比</strong>，是一个大于1的数（所以才叫加速比）</p>
<p><strong>注意</strong>：其中分子没有使用流水线是<strong>固定的就是</strong>$nkt$，n条指令，每个需要kt时间，而分母使用了流水线的可能会有<strong>跳转</strong>的情况，会<strong>导致时间的改变</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212204913493.png" alt="image-20211212204913493"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212204955419.png" alt="image-20211212204955419"></p>
<p>当<strong>流水线中的阶段增多时，刚开始是会加快执行速度</strong>，但不是越多越好，当阶段太多，<strong>锁存延时会增加，增大开销</strong>。同时阶段越多，对<strong>硬件的使用冲突就会越大</strong>，需要更为复杂的控制逻辑</p>
<h2 id="冒险（Hazard）">冒险（Hazard）</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212192410033.png" alt="image-20211212192410033"></p>
<h3 id="结构冒险">结构冒险</h3>
<p><strong>硬件资源冲突</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212192529705.png" alt="image-20211212192529705"></p>
<p>分时使用如在时钟的上升沿和下降沿分给不同指令使用</p>
<h3 id="数据冒险">数据冒险</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212192825027.png" alt="image-20211212192825027"></p>
<p>第一条指令中r1寄存器被更新，但根据指令的周期，后面的若干条指令中获得的r1寄存器都是未更新的</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212193228583.png" alt="image-20211212193228583"></p>
<p>用<strong>软件</strong>nop指令让这3个时钟周期啥也不干，直到r1被成功更新后再执行后续指令，从而不需要改动硬件</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212193309257.png" alt="image-20211212193309257"></p>
<p>插入气泡——即<strong>硬件</strong>通过<strong>阻塞</strong>阻止可能出问题的指令的执行，因此需要判断哪些指令相关，怎么去阻塞的问题，虽然没有加nop指令，但在判断处理过程中也会有<strong>时间开销</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212193513871.png" alt="image-20211212193513871"></p>
<p><strong>把需要的结果从中间就取过来，而不必去等指令的完全执行。</strong></p>
<blockquote>
<p>如r1要存放的新数据在经过ALU时即已经产生，只是结果没有更新到所在的r1寄存器中。此时第二条指令可以把这个结果取过来直接用，而不必等待第一条指令完全执行完。因为ALU不会同时被两条指令占用，第一条用完ALU，才会给第二条使用，因此上面的取中间结果是可行的</p>
</blockquote>
<p>这就是<strong>转发/旁路</strong>。<strong>当后面要用到的数据是<code>前面算出来的</code>经过ALU即可得到时，这时候旁路很有效</strong>，当不是时，旁路无法解决，如下</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212194118012.png" alt="image-20211212194118012"></p>
<p>r1寄存器此时要从内存中加载数据，而下面sub r1就要用这个数据进行alu计算，但数据还没有从内存中读取过来，所以必须<strong>要等待到从内存中取到数据</strong>才行，根据转发机制，<strong>同样不必等待这个数据加载到r1即可取到</strong>。即上面的红线的</p>
<p>解决办法就是<strong>交换指令的顺序</strong>，如右，lw b 和lw c到两个寄存器中，当执行add时，还没加载好，所以要等待。因此可以通过把下面的一条不相关的指令换上来，这样可以<strong>把等待的时间变成执行后面指令的时间</strong>。<strong>总体执行时间会缩短</strong></p>
<h3 id="控制冒险">控制冒险</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212194833356.png" alt="image-20211212194833356"></p>
<p>当指令的执行顺序被改变，那么就会出现一部分的指令执行白处理了，原因就是取错了。</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212195029198.png" alt="image-20211212195029198"></p>
<p>即把跳转指令之后的指令和跳转到的指令都取过来，<strong>因为不知道这个跳转指令是不是真的要跳转（如多个条件跳转指令），所以就不能确定到底是执行后面的指令还是执行跳转指令中的指令</strong></p>
<p>所以把两个都取过来，两条流水线处理，那么就保证了流水线的正常运行，即使有一条是失效的，那么不管它即可，另外一条在按照流水线正常运行</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212195049933.png" alt="image-20211212195049933"></p>
<p>预测会不会发生转移，<strong>如果预测会发生转移，那么就直接取跳转指令中指出的指令，而不去取跳转指令后面的指令。</strong></p>
<p><code>如果预测失败了，那么就造成了流水线中已经执行的部分指令的失效；反之如果预测成功了，那么就避免了指令的失效，从而提高了流水线的效率</code></p>
<p>静态预测是和当前状态没有关系的，不会去根据刚刚处理的历史来改变，<strong>仅仅是按照规则</strong></p>
<h4 id="动态预测">动态预测</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212195529046.png" alt="image-20211212195529046"></p>
<p>根据状态来动态预测</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212195749976.png" alt="image-20211212195749976"></p>
<p>遇到条件分支，看是不是第一次遇到，如果是就加入表中，如果发生过，看前面的预测是怎么样的，然后根据现在的状态来调整</p>
]]></content>
      <categories>
        <category>计算机组织结构</category>
      </categories>
      <tags>
        <tag>计算机组织结构</tag>
      </tags>
  </entry>
  <entry>
    <title>16 控制器</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84/16%20%E6%8E%A7%E5%88%B6%E5%99%A8/</url>
    <content><![CDATA[<h4 align="center">图片来源：南京大学软件学院COA课程PPT</h4>
<h5 align="center">©author:zzb</h5>
<div style="text-align: center"><a href="https://github.com/wbl-z">Github主页</a>  <a href="https://blog.csdn.net/m0_51691879">CSDN主页</a></div> 
<h1>16 控制器</h1>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220141451495.png" alt="image-20211220141451495"></p>
<span id="more"></span>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220141603472.png" alt="image-20211220141603472"></p>
<p>左边的图中粗的箭头表示控制信息，细的箭头表示数据的流动</p>
<h2 id="寄存器分类">寄存器分类</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220141923575.png" alt="image-20211220141923575"></p>
<p>两种的划分并不严格，有些寄存器具有两种特点</p>
<h3 id="用户可见寄存器">用户可见寄存器</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220142121884.png" alt="image-20211220142121884"></p>
<p><strong>条件码寄存器不是必须的</strong>，有些机器没有条件码寄存器</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220142440645.png" alt="image-20211220142440645"></p>
<p>太多的寄存器不能显著减少存储器的访问：指的是当寄存器的数量多于一定数目时，对存储器访问的减少作用很小了，但带来了成本的上升，因此是不值得的</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220142816292.png" alt="image-20211220142816292"></p>
<p>子程序的调用会自动保存用户可见寄存器，这样子程序运行时就可以随意使用用户可见寄存器，而不用担心会对调用者的数据产生影响（<em>即可以理解是如call指令包括了对寄存器保存的指令</em>）</p>
<p>但在子程序调用之外，想要保存相关的寄存器内容，就是程序员的任务了，需要编写相关的指令去保存（汇编）</p>
<h3 id="控制和状态寄存器">控制和状态寄存器</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220143225326.png" alt="image-20211220143225326"></p>
<p>从主存中读出的<strong>数据先到MBR，再通过MBR到通用寄存器</strong></p>
<p>ALU可以<strong>对MBR和用户可见寄存器</strong>直接存取</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220143400782.png" alt="image-20211220143400782"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220143441675.png" alt="image-20211220143441675"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220143456971.png" alt="image-20211220143456971"></p>
<p><strong>控制信息并不全部都是存放在寄存器中的</strong>，有相当一部分的控制信息是存放在主存中的，这样可以平衡成本（寄存器越多越贵）和速度（寄存器速度更快）</p>
<h2 id="微操作">微操作</h2>
<p>关于微操作的出现：<a href="https://blog.csdn.net/sinat_40003796/article/details/126701654">CISC和RISC：为什么手机芯片都是ARM？</a></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220144658432.png" alt="image-20211220144658432"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220144733549.png" alt="image-20211220144733549"></p>
<p><strong>涉及CPU寄存器操作的更小步骤，称为微操作</strong></p>
<h3 id="取指周期">取指周期</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220144902430.png" alt="image-20211220144902430"></p>
<p>第二步从主存中取指令的过程中也同时进行了PC+1（<strong>1是指一条指令的长度</strong>）的操作</p>
<p>上面的<strong>t表示一个时间单位</strong>，即微操作要表示出**<font color=#ff00>做什么、发生在哪个时间单位</font>**两个内容</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220145504299.png" alt="image-20211220145504299"></p>
<p>如上，PC+1的操作放到t2和放到t3均可以</p>
<h3 id="微操作分组的原则">微操作分组的原则</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220145554405.png" alt="image-20211220145554405"></p>
<ul>
<li>事件的顺序必须是<strong>恰当的</strong></li>
<li><strong>同一时间段</strong>内的微操作必须是<strong>无关的</strong>，可以同时进行的，即谁先谁后都一样，如上面的PC+1</li>
<li>满足前两条的情况下，要让<strong>所用时间单位尽可能少</strong>，如上面的IR&lt;—(MBR)不能放到第四个时间单位t4，因为这样所花费的时间更多了，事实上3个时间单位就能完成</li>
</ul>
<h3 id="间址周期">间址周期</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220150048983.png" alt="image-20211220150048983"></p>
<p><strong>注意</strong>：这里通过间接地址取回来的有效地址<strong>EA是用于修改指令寄存器中指令的里面的地址的</strong>，而<strong>不是直接放到MAR</strong>中，这样可以保证与不使用间址周期的状态一致，从而为执行周期做好准备，执行周期直接使用指令中的地址就可以得到正确的操作数，<strong>保证了兼容性</strong></p>
<h3 id="执行周期">执行周期</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220150843375.png" alt="image-20211220150843375"></p>
<p>BSA指令中：t1中把要保存PC的地址送到MAR，把PC的内容送到MBR，从而可以把MBR中的内容保存在MAR所存的地址中去。同时这两个微操作是不冲突的，因此放到一个时间单位中执行</p>
<h3 id="中断周期">中断周期</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220151555675.png" alt="image-20211220151555675"></p>
<p>两个时间单位即可完成</p>
<h2 id="指令周期代码（ICC）">指令周期代码（ICC）</h2>
<p>对于整个的指令、多条指令如何将不同的微操作联系起来？</p>
<p>通过<strong>ICC来实现</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220152020014.png" alt="image-20211220152020014"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220152327430.png" alt="image-20211220152327430"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220152400973.png" alt="image-20211220152400973"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220152432604.png" alt="image-20211220152432604"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220152512047.png" alt="image-20211220152512047"></p>
<h2 id="CPU内部总线">CPU内部总线</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220152617231.png" alt="image-20211220152617231"></p>
<p>上面右图中的空心圆就表示门，由控制信号来决定这些门的开关</p>
<p>这里的例子是一个加法指令，其中数据要先存放到一个Y寄存器中，<strong>Y寄存器起到暂存数据的作用，Y与ALU直接连接</strong>。</p>
<p>注意：</p>
<ul>
<li>总线上一次只能有一个数据，否则会出错，因此不能说把上图中红色和绿色的实心箭头的门都打开，两个数据一起到ALU运算。</li>
<li>同时，当ALU运算完成后，也不能直接把数据存到AC中，因为这时候总线上还是AC的数据，因此要把结果先存放到另一个寄存器Z中，再通过关闭红色的两个箭头的门，打开蓝色的两个箭头的门，将结果送到AC中</li>
</ul>
<p><strong>因此，一个add M %eax的指令事实上包含了若干个微操作</strong></p>
<hr>
<h2 id="控制器">控制器</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220153912815.png" alt="image-20211220153912815"></p>
<p>控制器的基本任务：</p>
<ul>
<li><strong>定序</strong></li>
<li><strong>执行</strong></li>
</ul>
<h3 id="控制器的输入">控制器的输入</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220154436278.png" alt="image-20211220154436278"></p>
<p>控制器的输入有四个：</p>
<ul>
<li>指令寄存器</li>
<li>标志</li>
<li>时钟</li>
<li>来自控制总线的控制信号：一般情况下是控制器发出信号，在特定情况下，如控制器会收到中断请求</li>
</ul>
<h3 id="控制器的输出">控制器的输出</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220154808602.png" alt="image-20211220154808602"></p>
<p>控制器输出控制信号：</p>
<ul>
<li>CPU内的控制信号</li>
<li>到控制总线的控制信号（CPU外的）</li>
</ul>
<p><strong>控制信号最终作为二进制输入量（即0和1）来控制各个逻辑门，如0即关闭门，1打开门</strong></p>
<h4 id="控制信号示例：取指周期">控制信号示例：取指周期</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220155304109.png" alt="image-20211220155304109"></p>
<h3 id="控制器的最小特性">控制器的最小特性</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220155827906.png" alt="image-20211220155827906"></p>
<p><strong>最小特性意思是控制器在实现上应该尽可能的简洁</strong>，只需要知道是什么指令，逻辑运算结果的性质，无需知道要处理的是什么数据，也不需要知道结果是什么，只需要知道它们的部分性质（如是否为0，正还是负即可，比如条件转移指令中要不要跳转就要看标志信息）</p>
<h3 id="控制器的实现">控制器的实现</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220160029056.png" alt="image-20211220160029056"></p>
<h4 id="硬布线实现">硬布线实现</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220160211471.png" alt="image-20211220160211471"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220160620191.png" alt="image-20211220160620191"></p>
<p>定时器在完成一个子周期（取指周期、间址周期等）后会清零，在下一次子周期继续T<sub>1</sub>，T<sub>2</sub>的计数</p>
<p><strong>因此需要控制器在指令周期结束后通知定时器清零</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220173459074.png" alt="image-20211220173459074"></p>
<p>为输出的控制信号设计<strong>利用控制器输入的布尔表达式</strong></p>
<p>PQ的非表示0，+表示或，·表示与</p>
<p><strong>随着输入和输出的逐渐复杂，布尔表达式会变得很庞大，用电路去实现会非常困难</strong></p>
<h4 id="微程序实现">微程序实现</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220174705236.png" alt="image-20211220174705236"></p>
<p><strong>微程序即固件，位于硬件和软件之间</strong></p>
<p><strong>微指令：用一行微指令可以描述在一个时间内出现的一组微操作</strong>（因为可以同时进行，所以它们是互不干扰的，因此它们的控制字可以组合在一起）<strong>即微指令是t<sub>i</sub>内的所有微操作</strong></p>
<p><strong>微指令即为一个控制字，微指令的执行就是把控制字通过控制器输出</strong></p>
<p><strong>控制字</strong>：用一串01序列，每一位表示一根控制线，其中1表示控制线所连的门打开，0表示关闭，每个微操作对应的门的开闭是不同的，所以每个微操作可以对应一个控制字</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220175249145.png" alt="image-20211220175249145"></p>
<p>把<strong>所有情况的控制字存储到控制器存储器</strong>中，使得每一个控制字都有自己的地址</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220175527795.png" alt="image-20211220175527795"></p>
<p>在例程的最后会有一个<strong>分支或转移微指令</strong>，指出下面要到何处执行</p>
<p>上面有一个执行周期例程，<strong>它的目的仅仅在于根据当前操作码指明哪个机器指令的例程将被执行</strong></p>
<p>如上图，<strong>微程序是要存储所有可能指令的序列</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220180108834.png" alt="image-20211220180108834"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220180234225.png" alt="image-20211220180234225"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220180613466.png" alt="image-20211220180613466"></p>
<p><strong><font color=#ff00>所有的微指令都存储在控制存储器中</font></strong><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220180731607.png" alt="image-20211220180731607"></p>
<p><strong>上面的流程发生在一个时钟单位内</strong></p>
<p>控制缓冲寄存器的<strong>左半部分</strong>与控制器的控制线相连，发出控制信号，<strong>右半部分</strong>用于为定序逻辑提供下一条地址信息</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220180926089.png" alt="image-20211220180926089"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220181215826.png" alt="image-20211220181215826"></p>
<ul>
<li>由于微程序设计的易实现性，它已经成为CISC控制器的主要技术</li>
<li>而对于RISC，由于指令格式简单，所以一般使用硬布线控制器</li>
</ul>
<h2 id="总结">总结</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211220181456373.png" alt="image-20211220181456373"></p>
]]></content>
      <categories>
        <category>计算机组织结构</category>
      </categories>
      <tags>
        <tag>计算机组织结构</tag>
      </tags>
  </entry>
  <entry>
    <title>14 指令系统</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84/14%20%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h4 align="center">图片来源：南京大学软件学院COA课程PPT</h4>
<h5 align="center">©author:zzb</h5>
<div style="text-align: center"><a href="https://github.com/wbl-z">Github主页</a>  <a href="https://blog.csdn.net/m0_51691879">CSDN主页</a></div> 
<h1>14 指令系统</h1>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212092749737.png" alt="image-20211212092749737"></p>
<span id="more"></span>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212092911122.png" alt="image-20211212092911122"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212093045231.png" alt="image-20211212093045231"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212093132151.png" alt="image-20211212093132151"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212093330607.png" alt="image-20211212093330607"></p>
<h2 id="操作码">操作码</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212093423565.png" alt="image-20211212093423565"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212094308250.png" alt="image-20211212094308250"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212094720725.png" alt="image-20211212094720725"></p>
<ul>
<li>寄存器可以支持没有嵌套的函数调用，如果要多层调用，多个寄存器会用来存放返回地址</li>
<li>每一个过程开始的位置是空出来的，空出来存放调用它的程序需要返回的位置，可以多层调用，但不能支持如递归调用，重复调用一个过程。</li>
<li>使用栈可以解决上述问题</li>
</ul>
<h2 id="操作数">操作数</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212095506376.png" alt="image-20211212095506376"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212095700587.png" alt="image-20211212095700587"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212141558649.png" alt="image-20211212141558649"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212141622889.png" alt="image-20211212141622889"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212141640355.png" alt="image-20211212141640355"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212141844113.png" alt="image-20211212141844113"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212141939122.png" alt="image-20211212141939122"></p>
<h3 id="寻址方式">寻址方式</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212141957517.png" alt="image-20211212141957517"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212142102038.png" alt="image-20211212142102038"></p>
<p>地址A指向的不一定是操作数本身，而可能是一个地址，这个地址才指向操作数，那么这个地址就叫做<strong>有效地址EA</strong></p>
<h4 id="立即寻址">立即寻址</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212155348063.png" alt="image-20211212155348063"></p>
<p>地址字段存放的就是操作数，操作数以<strong>立即数</strong>的方式给出</p>
<h4 id="直接寻址">直接寻址</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212155841498.png" alt="image-20211212155841498"></p>
<p>地址字段是有效地址，可以直接获取操作数的有效地址EA，操作数始终可以表示为（EA）</p>
<h4 id="间接寻址">间接寻址</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212160306179.png" alt="image-20211212160306179"></p>
<p><code>地址引用的数量限制可能是有益的</code>指的是虽然采用了间接寻址，虽然A的长度会限制放EA的范围（A长度可能很小，涵盖的地址空间小）<strong>但这未必是一件坏事</strong></p>
<h4 id="寄存器寻址">寄存器寻址</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212160858665.png" alt="image-20211212160858665"></p>
<p>寄存器数量少，所以需要的编号长度小，寄存器里面存放了操作数，所以EA=R</p>
<p>当一个数/变量被多次使用时，数据存放在寄存器才有意义，因为寄存器速度快，如果只是从主存中取一个数，使用一次就不用了，那么就没必要存放在寄存器中，直接从主存中读取即可</p>
<h4 id="寄存器间接寻址">寄存器间接寻址</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212161338438.png" alt="image-20211212161338438"></p>
<p>寄存器中存放的是有效地址</p>
<h4 id="偏移寻址（计算出的都是EA，需要到EA中取得操作数，因此偏移寻址都是要计算出EA的，都可以看作是一种间接寻址，直接寻址的EA是直接给出的）">偏移寻址（计算出的都是EA，需要到EA中取得操作数，因此偏移寻址都是要计算出EA的，都可以看作是一种间接寻址，直接寻址的EA是直接给出的）</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212162310774.png" alt="image-20211212162310774"></p>
<p>偏移寻址结合了直接寻址（A）和寄存器间接寻址（（R））两个地址字段，即上面的<strong>寄存器编号和偏移地址A</strong>。其中至少有一个必须是显式，即<strong>A必须是显式的</strong></p>
<h5 id="相对寻址">相对寻址</h5>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212162632473.png" alt="image-20211212162632473"></p>
<p>利用程序的局部性原理，用短的地址差，去代替长的实际地址，节省指令中地址段长度</p>
<h5 id="基址寄存器寻址">基址寄存器寻址</h5>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212163015601.png" alt="image-20211212163015601"></p>
<p>寄存器（基址寄存器）的引用可以是显式的，也可以是隐式的（隐含在操作码中）</p>
<h5 id="变址寻址">变址寻址</h5>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212163206119.png" alt="image-20211212163206119"></p>
<p>A是地址，而寄存器中存放的是偏移量（所以是变址寄存器），比如访问数组，寄存器中的值增加，就可以逐步访问数组中的内容</p>
<p>前变址就是先变址再用间接寻址；后变址就是先对A间接寻址，再变址，得到的都是EA</p>
<h4 id="栈寻址">栈寻址</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212163601750.png" alt="image-20211212163601750"></p>
<h2 id="栈">栈</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212163843782.png" alt="image-20211212163843782"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212163935559.png" alt="image-20211212163935559"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212164209420.png" alt="image-20211212164209420"></p>
<ul>
<li>中缀表达式转后缀表达式，<strong>对于操作数，直接输出</strong>，而对于<strong>运算符</strong>，则<strong>看这个运算符和栈顶的运算符的优先级</strong>，如果这个运算符比栈顶运算符优先级<strong>高</strong>，那么把这个运算符<strong>压栈</strong>，反之，如果<strong>小于等于</strong>，则<strong>弹出栈顶运算符</strong>，然后再比较下一个运算符</li>
<li><strong>对于左括号，直接压入</strong>，但括号的优先级比其他运算符低，所以新的+遇到栈顶的括号，+优先级比括号高，直接压入</li>
<li><strong>对于右括号，则把运算符弹出</strong>，直到遇到左括号，把左括号弹出就结束，即左右括号被消除了</li>
<li><strong>当输入为空，则把栈中的运算符逐个弹出</strong></li>
</ul>
<h2 id="指令格式">指令格式</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212170223424.png" alt="image-20211212170223424"></p>
<h4 id="设计原则">设计原则</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212170339085.png" alt="image-20211212170339085"></p>
<h4 id="指令长度">指令长度</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212170548422.png" alt="image-20211212170548422"></p>
<h4 id="位的分配">位的分配</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212170801192.png" alt="image-20211212170801192"></p>
<p>变长操作码是指<strong>指令的长度是固定的，只是对于有些指令，操作码长度长，有些短</strong>，所以操作数的长度也会相应变化，操作码长，那么操作数就少/短</p>
<h4 id="变长指令">变长指令</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212171345310.png" alt="image-20211212171345310"></p>
<p><strong>指令的长度是变化的</strong></p>
<p>通过取至少为最长指令长度的内容，来保证每次至少能取到一条指令</p>
<blockquote>
<p>CPU内部有个指令预取单元，每周期从一级指令缓存中取16字节指令流，此时并不知道取了多少指令。随后有一个指令预译码阶段，会根据x86指令的译码规则界定出每条指令的边界。后续是指令译码阶段，将x86指令翻译成微指令。</p>
</blockquote>
<blockquote>
<p>RISC处理器是定长指令，没有这个问题，CISC处理器采用变长指令，指令预取部件会从指令缓存中取一段到指令队列中，并不限于单指令最大长度，可能达到几十字节，和每时钟周期指令发射条数有关。</p>
</blockquote>
<h2 id="指令集设计">指令集设计</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212171634673.png" alt="image-20211212171634673"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212171738524.png" alt="image-20211212171738524"></p>
<p>指令集的设计要和寄存器个数匹配</p>
<h2 id="总结">总结</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211212171915782.png" alt="image-20211212171915782"></p>
]]></content>
      <categories>
        <category>计算机组织结构</category>
      </categories>
      <tags>
        <tag>计算机组织结构</tag>
      </tags>
  </entry>
  <entry>
    <title>17 输入输出</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84/17%20%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</url>
    <content><![CDATA[<h4 align="center">图片来源：南京大学软件学院COA课程PPT</h4>
<h5 align="center">©author:zzb</h5>
<div style="text-align: center"><a href="https://github.com/wbl-z">Github主页</a>  <a href="https://blog.csdn.net/m0_51691879">CSDN主页</a></div> 
<h1>17 输入输出</h1>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222144030233.png" alt="image-20211222144030233"></p>
<span id="more"></span>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222144607958.png" alt="image-20211222144607958"></p>
<p>外设提供了<strong>外部环境与计算机系统之间的数据交换</strong></p>
<ul>
<li>人可读设备</li>
<li>机器可读设备</li>
<li>通信设备</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222163028529.png" alt="image-20211222163028529"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222163205466.png" alt="image-20211222163205466"></p>
<h2 id="I-O模块">I/O模块</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222163232088.png" alt="image-20211222163232088"></p>
<p><strong>I/O模块属于计算机系统</strong>，但外设是不属于的，通过I/O模块这一<strong>中介</strong>来沟通计算机系统和其他的各种外设</p>
<h3 id="外围设备接口">外围设备接口</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222163613673.png" alt="image-20211222163613673"></p>
<p><strong>状态信息是指外设的状态</strong>，如打印机会有多种不同的状态</p>
<p><strong>转换器</strong>是负责将计算机内的01信号转换成外部的如音频信号等，同时也要把外部的信号如音频信号转换成内部的01信号</p>
<h3 id="功能">功能</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222164149549.png" alt="image-20211222164149549"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222164248293.png" alt="image-20211222164248293"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222164401606.png" alt="image-20211222164401606"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222164451234.png" alt="image-20211222164451234"></p>
<h3 id="结构">结构</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222164524243.png" alt="image-20211222164524243"></p>
<p><strong>控制线传输的是对I/O模块的控制信息</strong></p>
<p>而上面的<strong>状态/控制模块传输的是CPU对外设的控制指令</strong>，如打印等，同时由于CPU传输给外设的控制信息和外设传输回来的状态信息是不会同时出现的，因此<strong>可以复用一个寄存器</strong></p>
<h3 id="外部接口">外部接口</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222165008723.png" alt="image-20211222165008723"></p>
<ul>
<li>并行接口</li>
<li>串行接口</li>
</ul>
<p>总线上的数据都是多位同时传输的。</p>
<p>但对于外部的数据传输，并行传送要求上面每一根线的数据能同时到达。如何实现同时到达：</p>
<ol>
<li>减少走的距离（距离长了，不同速度的差异会放大）：<strong>那么数据传输线不能太长</strong></li>
<li>两批数据之间的传输间隔增大：<strong>那么数据传输的频率会降低</strong></li>
</ol>
<p>因此外部的数据传输入<strong>大多采用串行接口</strong>，虽然<strong>一次只传输一位</strong>，<strong>但可以以很高的频率传输，同时可以传输得非常远。</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222165634136.png" alt="image-20211222165634136"></p>
<h2 id="I-O操作技术">I/O操作技术</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222171452996.png" alt="image-20211222171452996"></p>
<p>这里的不需要处理器干涉是指<strong>数据交换的过程不需要处理器的干涉</strong>，但对于I/O的整个过程，一定是需要处理器的参与的（事实上，没有什么是处理器不管的）</p>
<h3 id="编程式I-O">编程式I/O</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222171755899.png" alt="image-20211222171755899"></p>
<p>数据<strong>先传输到CPU，再由CPU来把数据写入主存中</strong></p>
<p><strong>CPU始终在参与整个I/O过程，要判断I/O设备的状态是否为就绪</strong></p>
<h4 id="I-O命令">I/O命令</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222172128415.png" alt="image-20211222172128415"></p>
<p><strong>命令是对I/O设备的</strong></p>
<h4 id="I-O指令">I/O指令</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222172212631.png" alt="image-20211222172212631"></p>
<p><strong>指令是对CPU的</strong>，需要CPU去执行的指令</p>
<p>编址方式：</p>
<ul>
<li>存储器映射式I/O：即把I/O设备也当作一个地址，和其他存储单元地址一样统一在一起，访问这个地址就是去调用I/O设备，可以方便的编程。但会占用存储单元的地址空间</li>
<li>分离式I/O：总线上有专门的输入输出线，不与存储器的线共用</li>
</ul>
<h3 id="中断驱动式I-O">中断驱动式I/O</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222172705302.png" alt="image-20211222172705302"></p>
<p>中断驱动式<strong>解决的是在等待就绪时所消耗的时间</strong>（但读取数据并写入内存的时间是两种模式都必要的）</p>
<p><strong>等待外设的状态交给I/O模块去做了，当得到状态时就发起一个中断，告诉CPU</strong>，CPU处理中断，即执行数据的传送，完成后再恢复中断前的指令执行</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222173126368.png" alt="image-20211222173126368"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222173354244.png" alt="image-20211222173354244"></p>
<h4 id="中断允许和禁止">中断允许和禁止</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222173458206.png" alt="image-20211222173458206"></p>
<p><strong>响应了中断后就会禁止中断</strong>，因为<strong>此时要保存现场</strong>，现场信息不能一次就保存完，涉及多条指令，需要多个指令周期，在这期间，是不允许又有新的中断请求的，避免出错</p>
<p>同理中断处理完要<strong>恢复现场</strong>时，也要禁止中断</p>
<p><strong>而在中断处理过程中，是允许中断的</strong>，如果此时有新的中断，那么也<strong>可以响应中断</strong>，但不是必须，要考虑中断的优先级</p>
<h4 id="响应-处理优先级">响应/处理优先级</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222173920550.png" alt="image-20211222173920550"></p>
<p><strong>在有多个中断时，会首先去响应响应优先级最高的，但最后能被处理的中断是处理优先级最高的</strong></p>
<blockquote>
<p>在同时来的一批中断中，CPU只会看到<strong>处理优先级（不是响应优先级）比当前高的中断</strong>（<strong>对相同或者低优先级的视而不见</strong>），在这些高的中断中，处理器会首先去响应响应优先级高的，但最后能拿到处理权限的是处理优先级最高的</p>
</blockquote>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222175024998.png" alt="image-20211222175024998"></p>
<p><strong>掩码字/屏蔽字</strong>是根据处理优先级看这个中断能够屏蔽哪些中断，1表示能屏蔽，这一行的中断能屏蔽哪些列的中断（<strong>行屏蔽列</strong>）</p>
<p>因此，从处理优先级的角度，<strong>主程序的优先级是最低的</strong>，否则中断就没有意义了（有些中断得不到响应）</p>
<blockquote>
<p>先禁止中断，保存现场，为L3的处理做好准备。接下来就是处理中断，先中断允许，正准备去处理L3，但此时发现了L4的中断，那么又要保存现场，进而处理L4，处理完L4，就应当把L3的现场恢复，从而去执行L3的处理</p>
<p>而在其他如L1、L3、L2的中断处理中，因为之前保存的是主程序的现场，所以要恢复主程序的现场，因此此时正要执行主程序的指令，但中断判断时，发现又有中断，因此不执行主程序而是去响应中断</p>
</blockquote>
<p><strong>可以用栈来理解，从哪里来，到哪里去</strong></p>
<h4 id="设备识别">设备识别</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222180749094.png" alt="image-20211222180749094"></p>
<h4 id="分配优先级">分配优先级</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222180903441.png" alt="image-20211222180903441"></p>
<h3 id="直接存储器存取">直接存储器存取</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222192851958.png" alt="image-20211222192851958"></p>
<p>在前两种方式中，数据都需要经过CPU<strong>才能存储到主存中或者从主存中读出</strong>，因为CPU才具有控制权</p>
<p>用<strong>DMA模块</strong>来代替CPU转运数据</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222193302934.png" alt="image-20211222193302934"></p>
<p>当采取DMA模块时，主存就要<strong>同时处理DMA和CPU对主存访问的请求，可能会产生冲突</strong>。</p>
<p>这时应当<strong>以DMA优先</strong>，因为DMA连接的是高速的I/O，如果不能及时把数据存入主存，那么就可能导致数据被冲刷掉</p>
<p>因为是把任务交给DMA来做，所以需要交代很多的信息给DMA，因此会花比较多的时间，最后读写完成时CPU也要有一些处理，<strong>因此在开始和结束时都会一定的时间开销，而在中间过程中CPU无需去管，数据的传输都交给DMA</strong></p>
<h4 id="DMA内存访问">DMA内存访问</h4>
<h5 id="CPU停止法">CPU停止法</h5>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222193948940.png" alt="image-20211222193948940"></p>
<p><strong>一次I/O中的</strong>数据不一定是连续地从I/O传输过来的，而是<strong>一波一波的传输过来的</strong>，即中间会有空闲，但此时主存的访问权限仍在DMA上，<strong>会造成浪费</strong></p>
<h5 id="周期窃取-周期挪用">周期窃取/周期挪用</h5>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222194310204.png" alt="image-20211222194310204"></p>
<p>周期窃取是<strong>适用于数据块不是一次性全部传送过来的</strong>，如键盘，当有传送时DMA模块就请求总线，当没有时就把总线交给CPU</p>
<h5 id="交替分时访问">交替分时访问</h5>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222194419344.png" alt="image-20211222194419344"></p>
<p>交替分时访问是固定了一个时间段，前面由CPU访问，后面由DMA访问，因此DMA不需要请求总线</p>
<p>需要满足一个前提，CPU每次处理完指令的时间内，主存不仅能把数据提供出去，还可以满足DMA的数据传送的需求</p>
<h4 id="DMA配置机制">DMA配置机制</h4>
<h5 id="单总线分离DMA">单总线分离DMA</h5>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222194735618.png" alt="image-20211222194735618"></p>
<p>这种方式就是把编程式I/O中CPU的任务分离出来给了DMA，其他基本没有改动</p>
<h5 id="单总线集合的DMA-I-O">单总线集合的DMA-I/O</h5>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222194918391.png" alt="image-20211222194918391"></p>
<p><strong>DMA与I/O的连接不通过总线，而是把I/O作为DMA的一个部分，通过单独的线来通讯</strong></p>
<p>这样会带来成本的上升，要为每个/多个I/O配备一个DMA，而当这个I/O没有任务时，对应的DMA就是闲置的</p>
<h5 id="I-O总线">I/O总线</h5>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222195159331.png" alt="image-20211222195159331"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222195237853.png" alt="image-20211222195237853"></p>
<p>只有在连续读写时才交给DMA，<strong>而其他时候仍然是CPU在处理</strong>，因此CPU仍然有很高的参与度，仅仅是无需CPU负责存储器和I/O模块之间的数据传递</p>
<h2 id="I-O模块的演变">I/O模块的演变</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222195415943.png" alt="image-20211222195415943"></p>
<ul>
<li>I/O模块有了自己的处理器就叫做I/O通道</li>
<li>I/O模块有了自己的局部存储器就叫做I/O处理器</li>
</ul>
<h2 id="总结">总结</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211222195715027.png" alt="image-20211222195715027"></p>
]]></content>
      <categories>
        <category>计算机组织结构</category>
      </categories>
      <tags>
        <tag>计算机组织结构</tag>
      </tags>
  </entry>
  <entry>
    <title>3 数据的机器级表示</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84/3%20%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/</url>
    <content><![CDATA[<h4 align="center">图片来源：南京大学软件学院COA课程PPT</h4>
<h5 align="center">©author:zzb</h5>
<div style="text-align: center"><a href="https://github.com/wbl-z">Github主页</a>  <a href="https://blog.csdn.net/m0_51691879">CSDN主页</a></div> 
<h1>3 数据的机器级表示</h1>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211218090244930.png" alt="image-20211218090244930"></p>
<span id="more"></span>
<h2 id="信息的二进制编码">信息的二进制编码</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210914164832038.png" alt="image-20210914164832038"></p>
<p>编码：用<strong>少量简单</strong>的<strong>基本符号</strong>对<strong>复杂多样</strong>的<strong>数据</strong>进行一定规律的组合。</p>
<p>采用二进制的原因：</p>
<ol>
<li>多种物理器件可以表示为两种稳定的状态，如开和关</li>
<li>二进制的规则简单</li>
<li>二进制的0和1可以对应逻辑运算中的真和假</li>
</ol>
<p>用离散有限的数据去表示连续无限的数据，必然会产生偏差</p>
<h2 id="整数的二进制表示">整数的二进制表示</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210914171400831.png" alt="image-20210914171400831"></p>
<p>对于<strong>无符号整数不存在各种码的问题</strong>。各种码是用来解决如何表示带符号数的</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220105164323076.png" alt="image-20220105164323076"></p>
<p><strong>补码表示的数，不必关心其符号而可以直接相加</strong>，即对应机器不关心数据到底是无符号数还是带符号数</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220105170903478.png" alt="image-20220105170903478"></p>
<p>补码的最高位符号位，<strong>如果是0那么和无符号一样，如果是1，那么就需要-2<sup>n-1</sup>，才是真正的值</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220105171042276.png" alt="image-20220105171042276"></p>
<p>补码移码都只有一个0，而原码和反码中有两个0</p>
<blockquote>
<p>反码跟原码是正数时，一样；负数时，反码就是原码符号位除外，其他位按位取反</p>
</blockquote>
<p><strong>当移码的偏置常数为2<sup>n-1</sup>时，移码和补码仅第一位不同</strong></p>
<h2 id="浮点数的二进制数表示">浮点数的二进制数表示</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220105171706899.png" alt="image-20220105171706899"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220105171859823.png" alt="image-20220105171859823"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220105172415066.png" alt="image-20220105172415066"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220105172521518.png" alt="image-20220105172521518"></p>
<p><strong>精度和范围的大小是相互矛盾的</strong>，因为k位二进制数最多只能表示2<sup>k</sup>个数字，因此范围大精度就小</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220105172626111.png" alt="image-20220105172626111"></p>
<p>由上图可见，在两个阶码之间，能表示的数字个数为2<sup>23</sup>个，而随着阶码变大，<strong>这个区间变大，所以数字的精度会变小</strong>。</p>
<p>非规格化数把阶码全0用于表示0~2<sup>-126</sup>之间的数字，和上面同理<strong>这个区间的长度是2<sup>-126</sup>-0=2<sup>-126</sup></strong>，<strong>而2<sup>-126</sup>~2<sup>-125</sup>之间的长度也是2<sup>-126</sup></strong>，因此在这<strong>两个区间内都可以均匀地表示2<sup>23</sup>个数字</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220105173227836.png" alt="image-20220105173227836"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220105173456901.png" alt="image-20220105173456901"></p>
<h2 id="总结">总结</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220105173947144.png" alt="image-20220105173947144"></p>
]]></content>
      <categories>
        <category>计算机组织结构</category>
      </categories>
      <tags>
        <tag>计算机组织结构</tag>
      </tags>
  </entry>
  <entry>
    <title>2 计算机的顶层视图</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84/2%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E9%A1%B6%E5%B1%82%E8%A7%86%E5%9B%BE/</url>
    <content><![CDATA[<h4 align="center">图片来源：南京大学软件学院COA课程PPT</h4>
<h5 align="center">©author:zzb</h5>
<div style="text-align: center"><a href="https://github.com/wbl-z">Github主页</a>  <a href="https://blog.csdn.net/m0_51691879">CSDN主页</a></div> 
<h1>2 计算机的顶层视图</h1>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210909141552837.png" alt="image-20210909141552837"></p>
<span id="more"></span>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210909142008485.png" alt="image-20210909142008485"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220105151814210.png" alt="image-20220105151814210"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220105151913519.png" alt="image-20220105151913519"></p>
<h2 id="CPU">CPU</h2>
<p>利用系统总线把各个部分连接起来</p>
<p>数据和指令存储在一起，存储器只需要按位置寻址，而无需去考虑其中的数据类型</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210909144340448.png" alt="image-20210909144340448"></p>
<p>如I/O设备可以使得程序中断，因此CPU可以大胆去做其他的事情，因为I/O设备可以使得其他事情中断，从而继续处理待I/O输入后才发生的事情（如add），这样可以增大CPU的利用率，避免了CPU在等待I/O的过程中空闲</p>
<p><strong>为什么要禁止中断？</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210909144638643.png" alt="image-20210909144638643"></p>
<h2 id="存储器">存储器</h2>
<p>内存（主存）。内存又分为随机读写存储器（RAM）和只读存储器（ROM）。前者主要用于大容量内存储器和调整缓冲存储器；后者用于存放专用的固定程序，如BIOS</p>
<p>外存（辅存）。外存包括硬盘、磁盘、磁带、光盘和U盘等，特点是容量大、价格低，但存取速度较低。磁盘是最常用的外存，一般分为软磁盘和硬磁盘两类</p>
<p><strong>外存不是冯诺依曼结构中的存储器</strong>，而是属于计算机外的</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210909151708072.png" alt="image-20210909151708072"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210909152123388.png" alt="image-20210909152123388"></p>
<p>cache在主存和CPU之间，容量小，速度快（接近CPU），把CPU需要在主存中获取的数据先放在cache中，这样CPU需要数据时可以快速提供。从而解决了内存墙的问题</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210909153134834.png" alt="image-20210909153134834"></p>
<h2 id="I-O">I/O</h2>
<p>冯诺依曼结构中的I/O不是I/O设备，如鼠标键盘，而是<strong>I/O模块</strong>，如USB接口，是帮助计算机系统与外界进行信息交换的</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210909154127490.png" alt="image-20210909154127490"></p>
<p>采用缓冲区来解决数据传输速度时快时慢的问题，如数据太少了就先放在缓冲区，等数据量较大时一起输入</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210909154609403.png" alt="image-20210909154609403"></p>
<h2 id="总线">总线</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220105154039892.png" alt="image-20220105154039892"></p>
<p>问题：计算机部件互连复杂</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210909154935686.png" alt="image-20210909154935686"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210909155043045.png" alt="image-20210909155043045"></p>
<h2 id="总结">总结</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220105154430876.png" alt="image-20220105154430876"></p>
]]></content>
      <categories>
        <category>计算机组织结构</category>
      </categories>
      <tags>
        <tag>计算机组织结构</tag>
      </tags>
  </entry>
  <entry>
    <title>4 数据校验码</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84/4%20%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C%E7%A0%81/</url>
    <content><![CDATA[<h4 align="center">图片来源：南京大学软件学院COA课程PPT</h4>
<h5 align="center">©author:zzb</h5>
<div style="text-align: center"><a href="https://github.com/wbl-z">Github主页</a>  <a href="https://blog.csdn.net/m0_51691879">CSDN主页</a></div> 
<h1>4 数据校验码</h1>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220105193631099.png" alt="image-20220105193631099"></p>
<span id="more"></span>
<h2 id="差错error">差错error</h2>
<p>以存储为例：</p>
<ul>
<li>硬故障：永久性物理故障</li>
<li>软故障：随机非破坏性事件，改变了某些内容，但没有损坏机器</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220105195420473.png" alt="image-20220105195420473"></p>
<h2 id="纠错error-correction">纠错error correction</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210925101417978.png" alt="image-20210925101417978"></p>
<p>注意，C’'不是和C去比较，<strong>因为既然D有可能出现差错变成D’，那么与之相应的校验码C也可能差错</strong>，因此，取出来的不是C，而是C‘，是将用D’生成的C‘’去和取出来的C‘比较</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210925102425592.png" alt="image-20210925102425592"></p>
<p>一旦D存进存储器/网络，那么原来的D就消失了，取出来的就是D’。（<em>如果能保证存进去和取出来的是一样的，那么也就不存在纠错</em>，<strong>事实上，这是无法保证的</strong>）</p>
<h2 id="奇偶校验码">奇偶校验码</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210925103619330.png" alt="image-20210925103619330"></p>
<p>奇校验码：如果有奇数个1，那么C=0，否则为1</p>
<p>偶校验码：如果有偶数个1，那么C=0，否则为1</p>
<p>（理解：<strong>把原来的数据和这个校验码拼在一起时应当还是和校验码名字中的奇偶一致</strong>，所以奇校验码当1为奇数，C=0，那么拼在一起还是奇数个）</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210925110201147.png" alt="image-20210925110201147"></p>
<p>当数据D中<strong>出错的位数为偶数</strong>时，那么1的个数的奇偶性仍然是不变的，因此校验码不变</p>
<p><strong>因此奇偶校验码适用于较短的数据进行检错</strong>，这样出现<strong>多位错的概率相对较小</strong>，检错的效果较好（当然还是会有可能出现多位错误，但概率很小）</p>
<p>代价很低，<strong>只需要1位</strong>即可</p>
<blockquote>
<p><strong>发现错误比发现后纠正更难</strong>，因为如果发现了，那么纠正也就是把0变成1，1变成0就好了，相对找到错误更为简单</p>
</blockquote>
<p>##　海明码</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210925111310238.png" alt="image-20210925111310238"></p>
<p>分组的时候要求任何两位所属的组的情况都是不一样的，同时一位数据可能会属于若干个小组（<strong>至少两个组</strong>，与下面的故障字规则一致，否则如果只一个组的话，会和校验码出错冲突）</p>
<p><font color=#FF0000><strong>前提假设：最多一位发生错误</strong></font></p>
<p>奇偶校验码是海明码的基础</p>
<p>利用的原理就是校验码出错的几个所在小组中公共的那一位就是出错的位，这样就<strong>能够定位到错误</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210925112636796.png" alt="image-20210925112636796"></p>
<p>因为K位校验码可以表示2^K种情形，而出错的情形为M+K+1，因此可以求出K的最小值</p>
<p>由表格可见，随着数据位的增加，最小校验码的位数增加较少，所占比例较小</p>
<p>但是不能通过把M的位数设成很大，来使得校验码的的位数相对少，<strong>因为如果数据位数很大，则只发生一位错误的假设就不成立了</strong></p>
<p>因此要实现一个<strong>平衡</strong>：<strong>海明码有效且所占比例较少</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210925113559485.png" alt="image-20210925113559485"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210925114223953.png" alt="image-20210925114223953"></p>
<p><strong>先把故障字分配给每一位数据位故障，然后再进行分组，把这一个Dn放到故障字中数值为1的那一位所对应的组中</strong>，如上，D8对应故障字1100，那么D8应当分到C1和C2组中去</p>
<p>故障字从0001开始分配，因为0000已经用于表示没有发生故障</p>
<p>这里C的计算用的是偶校验（当然奇校验也行）</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210925115343889.png" alt="image-20210925115343889"></p>
<p>注意：<strong>存储时是按上面表格的顺序来存储的</strong>，而不是D8D7……D1C4……C1（<em>上图蓝色的表示校验码，黑色表示数据</em>）</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211219093628238.png" alt="image-20211219093628238"></p>
<p><strong>将计算出的C‘’与C‘异或，那么就可以得到故障字</strong>，从而定位到出错的是哪一位</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210925120406447.png" alt="image-20210925120406447"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210925120449107.png" alt="image-20210925120449107"></p>
<blockquote>
<p>主存的实际容量比用户可以使用的容量要<strong>大</strong>，因为对于存储的数据，<strong>也是可能会发生错误的</strong>，因此需要去添加纠错码，如磁盘中就有纠错区，之后的区域才是数据区等</p>
</blockquote>
<p><strong>加强版的海明码</strong></p>
<hr>
<h2 id="循环冗余校验">循环冗余校验</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210925120653073.png" alt="image-20210925120653073"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210925120852514.png" alt="image-20210925120852514"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210925121203909.png" alt="image-20210925121203909"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211219095317053.png" alt="image-20211219095317053"></p>
<ul>
<li>当<strong>余数位数与除数位数相同</strong>时，才进行异或运算（模二除法），<strong>即与除数对齐的第一位为1时才异或并上商为1，否则不进行异或直把除数右移并上商为0</strong>了，直到被除数最后一位</li>
</ul>
<p>如果这两个 CRC结果不一致，则说明发送中出现了差错，接收方计算机可要求发送方计算机重新发送该数据</p>
<p>CRC 算法检验的检错能力极强，且检测成本较低</p>
<p>因而，CRC 成为计算机信息通信领域最为普遍的校验方式</p>
<hr>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210925121237083.png" alt="image-20210925121237083"></p>
]]></content>
      <categories>
        <category>计算机组织结构</category>
      </categories>
      <tags>
        <tag>计算机组织结构</tag>
      </tags>
  </entry>
  <entry>
    <title>7 二进制编码的十进制数运算</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84/7%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%BC%96%E7%A0%81%E7%9A%84%E5%8D%81%E8%BF%9B%E5%88%B6%E6%95%B0%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h4 align="center">图片来源：南京大学软件学院COA课程PPT</h4>
<h5 align="center">©author:zzb</h5>
<div style="text-align: center"><a href="https://github.com/wbl-z">Github主页</a>  <a href="https://blog.csdn.net/m0_51691879">CSDN主页</a></div> 
<h1>7 二进制编码的十进制数运算</h1>
<p>NCBD码用于解决<strong>精度和范围</strong>之间的矛盾，但代价是数字位数过多<img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210914180115014.png" alt="image-20210914180115014"></p>
<span id="more"></span>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210915155218952.png" alt="image-20210915155218952"></p>
<h2 id="加法">加法</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211012165334270.png" alt="image-20211012165334270"></p>
<ul>
<li>
<p>对发生10进位的要补上6，如1010为十进制的10，补上0110，就利用16进制的进位实现了十进制的进位</p>
</li>
<li>
<p>对于红色1，是加法本身已经超过16，发生了进位到前面一位，同样要加6，补上因为进位而丢失的6</p>
</li>
<li>
<p><strong>即发生了16进制的进位或者值超过9,那么都需要进行补6操作</strong>（其中发生16进制的进位，会出现上面红色的1,这时候补6,一定不会再发生进位.值超过9,不会出现红色的1,但补6后仍然会发生16进制的进位,因此还是会产生红色的1,即两种情况都会进一位到高位）</p>
</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211012165939633.png" alt="image-20211012165939633"></p>
<p>如果要超过10，第4位必须是1，第2和第3位中至少有一个是1，因此会有上面的两个与门</p>
<p>两个与后的结果再和高位进位一起通过或门，这样就有3种情况会出现满10进位了，也就要加上0110，即6，所以C4后面有连出两条线给S2，S1</p>
<p>此外只要判断一次就可以了，因为即使是最大的结果19（9+9+1（1来自前一位的进位））加上6后，结果是25，25-16=9，结果9并不会再进位</p>
<h2 id="减法">减法</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211012172909448.png" alt="image-20211012172909448"><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220106114717172.png" alt="image-20220106114717172"></p>
<p>这里原理和原码计算一样，但是把2<sup>n</sup>改成10<sup>n</sup>，9999……-x+1</p>
<p><strong>先取反再加10和先加6后取反是一样的，均可</strong>，<strong>倾向于先各位加6再取反</strong></p>
<p>如果不够减10<sup>n</sup>，那么就提个负号出来，使得<strong>第一个数的符号位</strong>变反，即res-10<sup>n</sup>变成-(10<sup>n</sup>-res)，这样用取反加1表示即可</p>
<p>如果够减10<sup>n</sup>即产生了高位的进位，那么舍弃进位即可，<strong>符号取第一个数的符号</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211219100203218.png" alt="image-20211219100203218"></p>
<h2 id="总结">总结</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211219100209577.png" alt="image-20211219100209577"></p>
]]></content>
      <categories>
        <category>计算机组织结构</category>
      </categories>
      <tags>
        <tag>计算机组织结构</tag>
      </tags>
  </entry>
  <entry>
    <title>5 整数运算</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84/5%20%E6%95%B4%E6%95%B0%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h4 align="center">图片来源：南京大学软件学院COA课程PPT</h4>
<h5 align="center">©author:zzb</h5>
<div style="text-align: center"><a href="https://github.com/wbl-z">Github主页</a>  <a href="https://blog.csdn.net/m0_51691879">CSDN主页</a></div> 
<h1>5 整数运算</h1>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211218090925893.png" alt="image-20211218090925893"></p>
<span id="more"></span>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211218090935971.png" alt="image-20211218090935971"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210928164942515.png" alt="image-20210928164942515"></p>
<p><strong>异或门是不能多个一起输入的</strong>，只能两两。a⊕b = (¬a ∧ b) ∨ (a ∧¬b)，由此推断，非门的门延迟也为1ty</p>
<p><strong>而与和或则可以多个一起输入</strong>，因为如或门，只要有一个1 ，那么结果就是1，与门，只要有一个0，那么结果都是0</p>
<h2 id="串行进位加法器">串行进位加法器</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210928165948285.png" alt="image-20210928165948285"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210928170122630.png" alt="image-20210928170122630"></p>
<p>之所以s=x⊕y⊕c，把x和y先做异或，是为了节省时间，因为c需要由前面的数据得到，如上，C<sub>n</sub>的延迟是2n ty，因此可以提前把x<sub>n</sub>⊕y<sub>n</sub>计算好，等C<sub>n-1</sub>计算好后再和C<sub>n-1</sub>异或，因此Sn的延迟为2(n-1)+3=2n+1</p>
<p>（<strong>但第一和第二位除外，它们的延迟都是6</strong>，因为得到C<sub>1</sub>为2，而此时X<sub>2</sub>和Y<sub>3</sub>还没有异或就绪，所以仍然是S<sub>2</sub>的延迟仍是6。C<sub>2</sub>的延迟是4&gt;3，因此X<sub>3</sub>和Y<sub>3</sub>已经异或完成，在等C<sub>2</sub>）</p>
<p>（<strong>所有的A<sub>i</sub>和B<sub>i</sub>是同时输入的，等到C<sub>i-1</sub>到来时，除了最低2位，A<sub>i</sub>和B<sub>i</sub>已经通过了异或门，因此这个3ty的时间延迟不算，而只用考虑与C<sub>i-1</sub>的异或</strong>）</p>
<h2 id="全先行进位加法器">全先行进位加法器</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210928172853824.png" alt="image-20210928172853824"></p>
<p>把C都换掉代入，形成这些式子</p>
<p>C<sub>i-1</sub>=1，P<sub>i</sub>=1则表示能把这个C<sub>i-1</sub>的1传递到C<sub>i</sub></p>
<p>只有X<sub>i</sub>和Y<sub>i</sub>都是1，G<sub>i</sub>才为1，G<sub>i</sub>表示这位能不能自己生成1</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210928173321855.png" alt="image-20210928173321855"></p>
<p>第一步把P和G都计算出，需要1ty</p>
<p>第二步根据式子把C全部计算出，因为式子中只有与和或，因此与可以一起进行，或可以一起进行，所以只要2ty</p>
<p>在第一步和第二步进行的过程中，同时在进行第三步X⊕Y，刚好3ty，<strong>因此第一第二和第三步是同时进行的</strong></p>
<p>所以第四步就是进行（X⊕Y）⊕C计算出S，需要3ty</p>
<p>因此总共需要1+2+3=6ty</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210928174916195.png" alt="image-20210928174916195"></p>
<h2 id="部分先行进位加法器">部分先行进位加法器</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210928174424653.png" alt="image-20210928174424653"></p>
<p>每8位用CLA（全先行进位加法器），整体用串行进位加法器，在时间和空间内得到平衡</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20210928175133879.png" alt="image-20210928175133879"></p>
<p>最后的5是=2+3，第4个CLA要进行第二步2ty和第四步3ty，所以是5ty，当最后一个计算完成时，前面的已经计算完了，所以全部计算好了</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003094155887.png" alt="image-20211003094155887"></p>
<p><strong>两个数加的补码是两个数补码的和</strong></p>
<p>溢出的两种判定：</p>
<ol>
<li>加数符号相同而和不同（若符号不同不可能溢出）</li>
<li>Cn异或Cn-1</li>
</ol>
<h2 id="减法">减法</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003094430337.png" alt="image-20211003094430337"></p>
<h2 id="乘法">乘法</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003095101641.png" alt="image-20211003095101641"></p>
<p>计算机只能进行两两相加，因此<strong>每一步都把部分积求和</strong></p>
<p>如下图，参与运算的是红色的部分，通过右移保证高4位是参与运算的</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003095842388.png" alt="image-20211003095842388"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003101651095.png" alt="image-20211003101651095"></p>
<p>刚开始积为n为0，在乘的过程中，部分积的长度会慢慢变长，最终变成2n</p>
<p>但这样的话，2n位的右边n位会空着，会产生浪费，因此把右边n位用来存放乘数Y，这样Y的一位乘完后，右移空出来的位置就可以给积用，如上图，<strong>左边一半是乘积寄存器，右边一半是乘数寄存器</strong></p>
<p><strong>加了之后再右移</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003101951588.png" alt="image-20211003101951588"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003102110215.png" alt="image-20211003102110215"></p>
<p><strong>上面的乘法只适用于原码。</strong></p>
<p>补码不能用于乘法，要用原码去乘，再把积用补码表示，<strong>但这样很麻烦，会消耗大量的计算资源</strong>。</p>
<p>因此出现了布斯乘法，可以用于补码的乘法</p>
<h3 id="布斯乘法">布斯乘法</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003102745966.png" alt="image-20211003102745966"></p>
<p>在第四行中，为了保证式子的统一性，引入Y<sub>0</sub>=0</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003102848122.png" alt="image-20211003102848122"></p>
<p>2的-1次方即右移一位，与原来的乘法不同的地方就在绿色框中，原来是Y<sub>i+1</sub>，现在是Y<sub>i</sub>-Y<sub>i+1</sub>（<strong>i从0开始，Y<sub>0</sub>=0</strong>），这样，<strong>就可以适用于补码的乘法运算了</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003103243188.png" alt="image-20211003103243188"></p>
<p>因为是Y<sub>i</sub>-Y<sub>i+1</sub>，相比于原来多了一种可能性**+X，-X，+0**</p>
<p>一共n位，所以要进行n次</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003103612562.png" alt="image-20211003103612562"></p>
<p>因为这里可以处理<strong>补码整数，所以会出现负数的情况</strong>，如果右移补零那么会无论乘数如何，最后符号位总是0，即总是正数。而对于原来只能处理原码的情况，是不会出现负数的，因此始终是补零</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003104513678.png" alt="image-20211003104513678"></p>
<p>因此在布斯乘法用于处理补码整数乘法时，右移应当是<strong>算术右移，符号拓展</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003104844369.png" alt="image-20211003104844369"></p>
<h2 id="除法">除法</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003104912664.png" alt="image-20211003104912664"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003105359117.png" alt="image-20211003105359117"></p>
<p>补充符号位直到<strong>除数最高位和余数的次高位对齐</strong></p>
<p><strong>因此即拓展除数位数长度的符号</strong></p>
<p>要把4位的被除数<strong>符号拓展成8位</strong>，因为最终结果商应当是4位的</p>
<p>余数实际上是2n位，但只有低n位有用，因此余数只取低n位</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003105722654.png" alt="image-20211003105722654"></p>
<h3 id="恢复余数除法">恢复余数除法</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003110508948.png" alt="image-20211003110508948"></p>
<p>实际上只有n位参与运算，但为了实现移位操作，用了2n位，因此造成了浪费，同样可以类比乘法来充分利用空间</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003110809081.png" alt="image-20211003110809081"></p>
<p><strong>把除数右移的操作，改成了余数左移的操作，左移右边空出来的就作为商</strong>，这样余数同样也只要四位即可</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003110958423.png" alt="image-20211003110958423"></p>
<p>判断够不够减，是根据<strong>余数的左边四位</strong>来比较的</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003111354476.png" alt="image-20211003111354476"></p>
<ul>
<li><strong>余数减去除数后，余数符号不发生改变，那么就是够减的</strong></li>
<li><strong><font color =#FF00>要使得余数的绝对值不断变小，并且符号不改变</font></strong></li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003111751337.png" alt="image-20211003111751337"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003113300997.png" alt="image-20211003113300997"></p>
<p><strong>最后如果除数和被除数的符号不同，那么要将商变成相反数，即取反加一</strong></p>
<p><strong>没有办法事先去判断够不够减，因此只能运算后看符号有没有变</strong>，因此对于机器来说，尝试运算后，发现不够减，<strong>那么要恢复余数</strong></p>
<p>当商为4位时，达到所需精度，就运算完成，留下了余数</p>
<ul>
<li>
<p>有没有可能左移的过程中符号变号了，如果有，那么余数的符号到底应该以那个为准**?**</p>
</li>
<li>
<p>我认为不会移出，如32位cpu中，除数和被除数都是32位，为了得到32位的商，应当把32位被除数符号拓展成64位，而总共运算n=32次，因此不会移出符号位，<strong>因此在这个过程中，符号一定不会发生改变，因此发生改变说明不够减，那么需要恢复</strong></p>
</li>
</ul>
<h3 id="不恢复余数的除法">不恢复余数的除法</h3>
<p>类似开车，当车偏离直线时，不会退回去变成直线，而是往右偏来纠正</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003113412552.png" alt="image-20211003113412552"></p>
<ul>
<li><strong>乘2是左移</strong></li>
<li><strong>这里的余数R<sub>i</sub>是不论是否够减了，都减去Y得到的</strong></li>
<li>只考虑减法（当然有可能是加法，余数和除数异号时）：
<ul>
<li>如果不够减，不需要在上一步进行恢复，而是在下一步通过加Y来<strong>同时实现上一步的恢复和这一步的减Y</strong></li>
</ul>
</li>
</ul>
<hr>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211218230006824.png" alt="image-20211218230006824"></p>
<p><strong><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003114022720.png" alt="image-20211003114022720"></strong></p>
<p><strong>第一次没有左移，是多一位商放在后面</strong></p>
<p>然后再看余数和除数符号是否相同</p>
<p>同样运算n次</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003114435963.png" alt="image-20211003114435963"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211218231331207.png" alt="image-20211218231331207"></p>
<p>最后还需要对整除可能出现的问题进行判断（原因是如果发生整除，0的符号是0，会产生错误的判断）：</p>
<ul>
<li>如果余数+除数=0，说明多减去一个除数，所以商要-1，余数置0</li>
<li>如果余数=除数，说明少减去一个除数，所以商要+1，余数置0</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003171509243.png" alt="image-20211003171509243"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003115033240.png" alt="image-20211003115033240"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211003115057588.png" alt="image-20211003115057588"></p>
<h2 id="原码加减法理解">原码加减法理解</h2>
<ol>
<li>
<p>特点：</p>
<ul>
<li>符号位不作为数的一部分参与运算</li>
<li>符号位和加减法指令共同作为运算的依据</li>
</ul>
</li>
<li>
<p>规则</p>
<ul>
<li>加法指令：同号求和，异号求差</li>
<li>减法指令：异号求和，同号求差</li>
</ul>
</li>
<li>
<p>对于求和：</p>
<ul>
<li>两个操作数相加得到的数值位，如果数值位最高位产生进位，则结果溢出</li>
<li>若不溢出，则和的符号位采用<strong>第一操作数的符号</strong></li>
</ul>
</li>
<li>
<p>对于求差：第一操作数的数值位<strong>加上</strong>第二操作数数值位的补码</p>
<ul>
<li>
<p>最高数值位有进位，表明加法结果为正，结果符号位采用第一操作数的符号</p>
</li>
<li>
<p>最高数值位没有进位，表明结果为负（补码形式），应对结果求补码，还原成原码形式，结果的符号位为第一操作数的符号取反</p>
</li>
<li>
<p><strong>理解</strong>：事实上，是通过加模再减模（2^k）的方式把减法转成加法，因此如果加后最高位有进位，那么结果减去模就仍然是正数，那么直接取n位结果即可，最高位的进位截断（或者理解为减去了模，因此这个1被减去了）</p>
<p>如果没有进位，那么说明结果减去模是负数，那么res-2<sup>k</sup>就不够减，那么就提个负号出来变成-(2<sup>k</sup>-res)，括号里面自然就是取反加1，同时外面的负号用于把第一操作数的符号位取反</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>计算机组织结构</category>
      </categories>
      <tags>
        <tag>计算机组织结构</tag>
      </tags>
  </entry>
  <entry>
    <title>6 浮点数运算</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84/6%20%E6%B5%AE%E7%82%B9%E6%95%B0%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h4 align="center">图片来源：南京大学软件学院COA课程PPT</h4>
<h5 align="center">©author:zzb</h5>
<div style="text-align: center"><a href="https://github.com/wbl-z">Github主页</a>  <a href="https://blog.csdn.net/m0_51691879">CSDN主页</a></div> 
<h1>6 浮点数运算</h1>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220106111044394.png" alt="image-20220106111044394"></p>
<span id="more"></span>
<h2 id="加法和减法">加法和减法</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220106111118500.png" alt="image-20220106111118500"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220106111144297.png" alt="image-20220106111144297"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220106111200885.png" alt="image-20220106111200885"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220106111738061.png" alt="image-20220106111738061"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220106111922628.png" alt="image-20220106111922628"></p>
<h2 id="乘法">乘法</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220106112054244.png" alt="image-20220106112054244"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220106112148801.png" alt="image-20220106112148801"></p>
<p>这里是原码乘法，因此右移补0，注意原码乘法中符号位不参与运算，而是<strong>通过异或得到结果的符号位</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220106113144292.png" alt="image-20220106113144292"></p>
<h2 id="除法">除法</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220106113216775.png" alt="image-20220106113216775"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220106113328635.png" alt="image-20220106113328635"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220106113715022.png" alt="image-20220106113715022"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220106113744626.png" alt="image-20220106113744626"></p>
<h2 id="总结">总结</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220106113854572.png" alt="image-20220106113854572"></p>
]]></content>
      <categories>
        <category>计算机组织结构</category>
      </categories>
      <tags>
        <tag>计算机组织结构</tag>
      </tags>
  </entry>
  <entry>
    <title>9 高速缓冲存储器（Cache）</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84/9%20%E9%AB%98%E9%80%9F%E7%BC%93%E5%86%B2%E5%AD%98%E5%82%A8%E5%99%A8%EF%BC%88Cache%EF%BC%89/</url>
    <content><![CDATA[<h4 align="center">图片来源：南京大学软件学院COA课程PPT</h4>
<h5 align="center">©author:zzb</h5>
<div style="text-align: center"><a href="https://github.com/wbl-z">Github主页</a>  <a href="https://blog.csdn.net/m0_51691879">CSDN主页</a></div> 
<h1>9 高速缓冲存储器（Cache）</h1>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211028134654827.png" alt="image-20211028134654827"></p>
<span id="more"></span>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211028134803191.png" alt="image-20211028134803191"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211028134847367.png" alt="image-20211028134847367"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211028135033591.png" alt="image-20211028135033591"></p>
<p>大部分是集成在CPU内部的，存放的还是主存内的信息，是主存内部分信息的副本</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211028141114903.png" alt="image-20211028141114903"></p>
<p>如果不在cache中，那么会将<strong>包含这个字的固定大小的块</strong>读入cache，然后<strong>再从cache中把这个字传给CPU</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211028141432926.png" alt="image-20211028141432926"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211028141818855.png" alt="image-20211028141818855"></p>
<p>cache中除了<strong>要存内容，还得存这个内容的位置</strong>，因为CPU是通过位置来访问主存中的内容的，而不关心其中的内容。</p>
<p>cache不是存放了完整的位置，<strong>而是通过tags标记</strong>来对应内容在内存中的位置</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211028142420549.png" alt="image-20211028142420549"></p>
<p>如果大部分时间都是未命中，那么使用cache后反而时间会更慢，而事实上cache很好的处理了内存墙问题，因此大部分情况应当是命中的</p>
<p>这是由于程序访问的局部性原理，<strong>即CPU总是会频繁的访问相同位置或者是相邻位置的内容</strong>：</p>
<ul>
<li>时间局部性：在相对短时间内，重复访问相同位置的信息</li>
<li>空间局部性：在相对短时间内，会访问相邻存储位置的数据
<ul>
<li>顺序局部性：相邻位置的按顺序的，如访问数组</li>
</ul>
</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211028142834398.png" alt="image-20211028142834398"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211028144013339.png" alt="image-20211028144013339"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211028144140819.png" alt="image-20211028144140819"></p>
<p>注意这个块是<strong>事先就在内存中划分好了（哪一部分属于哪个块都是确定的）</strong>，要哪个字时，只要把这个字的所在块搬过去，而不是临时从这个字开始再划分块</p>
<p>所以只要想要访问的字所属的块在cache中，那么这个字就在cache中，因此只要对每个块做一个标记（块号）就可以知道有没有命中</p>
<p><strong>cache中每一行是一个块，记录了块的标记和块中的K个字</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211028145432136.png" alt="image-20211028145432136"></p>
<p>T<sub>A</sub>的两个式子，是<strong>两种不同的理解</strong>，第一行是分为命中和未命中来理解，第二行是分成check检查阶段和到主存取数据阶段来理解的，<strong>一般第二行使用更多</strong></p>
<p>Tc很快，Tm相对慢，因此Tc/Tm是比较小的值，所以p是相对很小时就能满足条件。但事实上这个条件虽然小也很难满足，因为cache容量远小于主存容量，p实际上按概率来算应该是cache的容量/主存容量，是非常小的，但之所以能满足，就是<strong>因为前面提到的局部性原理</strong></p>
<h1>Cache的设计要素</h1>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211030133530602.png" alt="image-20211030133530602"></p>
<h2 id="一、cache容量">一、cache容量</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211030133602704.png" alt="image-20211030133602704"></p>
<p>cache容量不是越大越好，也不是越小越好。</p>
<ul>
<li>因为内存是以地址来寻找的，所以直接解码地址就能找到要的信息，而cache则是通过遍历来找的（遍历块的标号），所以如果cache很大的话，会导致遍历检查的时间增加，增大了T<sub>c</sub>。</li>
<li>如果cache很小的话，则可能出现从内存中复制的新的块把原来cache中的块覆盖后，又需要原来的块中的内容，因此又需要从内存中复制到cache，浪费时间</li>
</ul>
<h2 id="二、映射功能">二、映射功能</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211030134508748.png" alt="image-20211030134508748"></p>
<p>cache中记录的是块号，块号要能反映地址</p>
<p>块内地址：如果一个块内有K个字节，那么地址的后log<sub>2</sub>K位表示块内地址</p>
<p>而cache中分辨不同块的标记可以直接使用块号来作为标记，但这样会造成一些浪费（块号不是我们想要的信息），<strong>因此就要去想怎么尽可能缩短标记的长度</strong></p>
<h3 id="1-直接映射"><strong>1.直接映射</strong></h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211104160957975.png" alt="image-20211104160957975"></p>
<p>比如0~7块只能放到第一行，8~15块只能放到第二行，因此如果加载了第2个块，想再加载第3个块，那么第3个块会把第二个覆盖</p>
<p>如上图$i=jmodC$是间隔的把块规定放到同一行，而不是上面的连续的几个块都只能在一个行中，显然下面这种更合理，因为局部性原理，访问相邻块的概率更大，<strong>因此间隔的放，可以把连续的块都加载到cache中，而不会出现上面的覆盖情况</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211105091155893.png" alt="image-20211105091155893"></p>
<p>映射到同一行的块号（二进制表示）的后$log_2C$位都是一样的</p>
<p>因此只要比较块号的前面$log_2M-log_2C$位即可（M是块的数量，C是cache中行的数量）<strong>相当于把C个块当作一个组，只要记录这个组的地址即可</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211105091937397.png" alt="image-20211105091937397"></p>
<p>再看主存中一个具体的字节，它在主存的地址可以被分成三个部分：</p>
<ul>
<li>块内地址（用于块内寻址）</li>
<li>块映射到cache的行号</li>
<li>若干个块分为一个组对应的标号，用于区分映射到相同行的不同块，记录为cache标号</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211105092857092.png" alt="image-20211105092857092"></p>
<ul>
<li><strong>优点</strong>：因为块映射到cache中的行的位置是固定的，因此检查时，只要去找这一行中有没有要的数据即可，而不必全部搜索一遍，<strong>所以T<sub>c</sub>是固定的，不会因cache容量增大而使得T<sub>c</sub>变大</strong></li>
<li><strong>缺点</strong>：抖动现象：如果要重复访问的两个块刚好映射到同一行，就会降低命中率，<strong>当两个块比较相邻（才可能被重复访问）时并被映射到同一行，说明cache比较小，即行数比较少</strong>时会出现这种情况。</li>
<li>因此<strong>直接映射适合大容量cache使用</strong></li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211105093628480.png" alt="image-20211105093628480"></p>
<ol>
<li>根据内存地址的块地址去找cache对应行</li>
<li>再比较cache标记和主存地址的块标记是否相等</li>
<li>相等就命中，命中就再根据主存地址的块内地址到cache取对应字节</li>
</ol>
<h3 id="2-关联映射">2.关联映射</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211105094020890.png" alt="image-20211105094020890"></p>
<p>关联映射中的标记<strong>必须是块号</strong>，所以长度只能是$log_2M$，不像直接映射中有规律，可以缩短。<strong>关联映射是可以按一定规则放的，只要有空位就能放</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211105094456359.png" alt="image-20211105094456359"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211105094539163.png" alt="image-20211105094539163"></p>
<ul>
<li><strong>优点</strong>：在cache比较小时<strong>不会出现抖动</strong>，想加载哪些块都可，不会出现反复加载，除非cache行数不够了</li>
<li><strong>缺点</strong>：怎么规定放块实现比较复杂，同时检查时要<strong>平均检查$\frac{1}{2}$的cache，在cache很大时开销太大</strong></li>
<li>因此<strong>关联映射适合容量小的cache</strong></li>
</ul>
<h3 id="3-组关联映射（介于前面两种方法之间）">3.组关联映射（介于前面两种方法之间）</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211105100521745.png" alt="image-20211105100521745"></p>
<p><strong>K是指每组里面包含的行数</strong>，<strong>S是组数</strong></p>
<p><strong>即将cache分成不同的组，一个块只能映射到对应的组中，但在这个组中可以放在任意一行</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211105100934013.png" alt="image-20211105100934013"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211105102834862.png" alt="image-20211105102834862"></p>
<p>标记中不需要存全部块号，因为组号是固定的，只要$log_2M-log_2S$位即可</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211105110048821.png" alt="image-20211105110048821"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211105110041424.png" alt="image-20211105110041424"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211105110328246.png" alt="image-20211105110328246"></p>
<p>**关联度：**一个块映射到cache中可能存放的位置个数</p>
<p><strong>关联度越低，命中率越低，检查是否命中的时间越短，标记所占的额外空间开销越小</strong></p>
<h2 id="三、替换算法">三、替换算法</h2>
<p><strong>目的：将最不可能被使用的行替换掉，尽可能增大命中率</strong></p>
<p><strong>替换算法使用硬件来实现，因为替换需要非常快的速度</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211105111310863.png" alt="image-20211105111310863"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211105111503677.png" alt="image-20211105111503677"></p>
<h3 id="1-最近最少使用算法（LRU）">1.最近最少使用算法（LRU）</h3>
<p><em><strong>假设前提相当于看文件被修改过到现在的时间</strong></em></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211105111643511.png" alt="image-20211105111643511"></p>
<p><strong>需要限定路的数目</strong>，多路会很复杂，在模拟中可以通过设置时间戳的方式来记录最近使用的时间，要替换时最早的那个就是最近最少使用的</p>
<h3 id="2-先进先出算法（FIFO）">2.先进先出算法（FIFO）</h3>
<p><em><strong>假设前提相当于看文件被创建到现在的时间</strong></em></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211105112007246.png" alt="image-20211105112007246"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211105113453795.png" alt="image-20211105113453795"></p>
<p><strong>无需限定路的数目</strong>，只要循环轮下来即可</p>
<p>最开始初始化是应该把每一行的use位设为0，因为相当于替换哪行都可以。</p>
<p><strong>替换时把被替换的行设为1，把它的下一行设为0</strong>（如果是最开始，那么它的下一行本来就是0），如果被替换的是最后一行，那么把第一行设为0，这样循环，<strong>可以保证一个组中至少存在一个use位为0的行</strong>，从而用新数据去替换这一行</p>
<h3 id="3-最不经常使用算法（LFU）">3.最不经常使用算法（LFU）</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211105113541410.png" alt="image-20211105113541410"></p>
<h3 id="4-随机替换算法（Random）">4.随机替换算法（Random）</h3>
<p><em><strong>能到cache中的的块都是使用率较高的，否则不会进到cache中，所以不再去区分cache中块的使用率</strong></em></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211105113638088.png" alt="image-20211105113638088"></p>
<p>性能只比其他区分cache中块优先级的差一点点，但实现起来相对简单很多</p>
<h2 id="四、写策略">四、写策略</h2>
<p>写数据时，CPU同样会<strong>优先修改cache中的数据</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211105114158557.png" alt="image-20211105114158557"></p>
<p><strong>对cache的修改不需要直接同步到内存中</strong>，因为之后CPU读的还是cache中的内容，因此只要存在cache中即可；<strong>只有在cache中这个块要被替换时，才要把修改同步到内存</strong>，否则这个修改就丢失了</p>
<h3 id="1-写直达">1.写直达</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211105114613288.png" alt="image-20211105114613288"></p>
<p>对于多CPU共享一个内存的情况，实时同步数据是必要的</p>
<h3 id="2-写回法">2.写回法</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211105114926754.png" alt="image-20211105114926754"></p>
<p>缺点就是如果这个块被修改但没有被替换，<strong>那么它不会写回主存同步修改</strong>，而I/O模块对主存如打印时就得不到最新的数据了，只能增加设计：<strong>在打印时把所有cache中脏位为1的都同步到主存</strong></p>
<h2 id="五、行大小">五、行大小</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211105115851686.png" alt="image-20211105115851686"></p>
<h2 id="六、cache数目">六、cache数目</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211105184945853.png" alt="image-20211105184945853"></p>
<p>L2容量比L1更大，L2从内存中取了数据，L1从L2中取了数据，同样找数据时也是先在L1中找，如果未命中，再去L2中找</p>
<p><font color=#ff000>为什么不只使用大容量的L2，而是加入了L1?</font></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211105185556019.png" alt="image-20211105185556019"></p>
<p><strong>分立</strong>：对指令和数据分别用不同的cache</p>
<h2 id="总结">总结</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211105185857351.png" alt="image-20211105185857351"></p>
]]></content>
      <categories>
        <category>计算机组织结构</category>
      </categories>
      <tags>
        <tag>计算机组织结构</tag>
      </tags>
  </entry>
  <entry>
    <title>0自顶向下</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E6%96%B9%E6%B3%95/0%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B/</url>
    <content><![CDATA[<h1>课程主要内容</h1>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220307171343107.png" alt="image-20220307171343107"></p>
<blockquote>
<p>每一章节分成两个部分：第一：这层的功能是什么，怎么实现这样的功能；第二：实例</p>
</blockquote>
<p>功能和服务：功能是具备的能力，服务是功能的体现，<strong>每一层的功能都通过向上层提供的接口来提供服务，当然本层的功能需要调用下层的接口才能实现</strong>。<em>即功能的涵盖面更大，比如一个设备有很强大的功能，但是不能被其他设备使用，那么就没有提供服务</em></p>
<p><strong>可靠性：不出错、不乱序、不重复、不丢失</strong></p>
<p>有些应用对<strong>可靠性要求非常高</strong>，因此是基于TCP的协议。</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220307171445852.png" alt="image-20220307171445852"></p>
<p>而有些实时的应用<strong>对可靠性要求不高，但是对实时性要求非常高</strong>。<em>如麦克风传输到功放上面，如果一部分的信息丢失了，事实上对语言的理解没有什么影响，因此是基于UDP的。还有事务性的应用（如DNS域名解析）也是采用UDP，如果是TCP那么需要上图的两个往返，而UDP只要一个往返，请求然后就传回来，速度更快，如果出错了，那么只要再请求一次</em></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220307172719349.png" alt="image-20220307172719349"></p>
<p><strong>应用层</strong>协议规定了远程的应用进程之间通讯应该遵守的协议。如客户端和服务端，只要遵守这样的协议，那么不同厂商的设备也能交互</p>
<p><strong>传输层</strong>是在网络层提供的端到端的服务基础上来实现，提供在网络层主机到主机的基础上区分出并提供了进程到进程的服务，并且把IP提供的不可靠的服务通过TCP协议变成可靠的服务</p>
<p><strong>网络层</strong>（IP）是提供的端到端（end to end <strong>E2E</strong>）、主机到主机的服务，基于数据链路层提供的点到点的服务实现。特点是<strong>尽力而为</strong>（best effort）的，即没有保障的</p>
<blockquote>
<p>IP定义的是一种&quot;<strong>尽力而为</strong>&quot;（<strong>Best Effort</strong>）的通信服务，其中数据报可能被丢失、重复、延迟或乱序传递。</p>
</blockquote>
<p>网络层的工作方式有两种</p>
<ol>
<li>传统方式：<strong>IP协议、路由协议</strong>。网络层<strong>基本功能</strong>是路由和转发，由路由协议交换路由信息，路由算法算出路由表，之后IP协议实体根据到来的分组的目标ip查路由表，找到合适的表项后，从相应的端口转发<img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220307174255235.png" alt="image-20220307174255235">传统的方式不能增加新功能，只能按照写好的协议运行</li>
<li>SDN（软件定义网络Software Defined Network）方式：<strong>数据平面（交换机）和控制平面（网络操作系统）</strong>。不仅仅根据目标IP，还有很多其他字段。可编程，可以增加新功能</li>
</ol>
<p><strong>数据链路层</strong>提供的点到点（point to point <strong>P2P</strong>）的<strong>以帧为单位</strong>的服务，即相邻的网络设备之间的连接，如上图，端到端的服务中间需要经过很多个点，两两之间就是点到点的服务</p>
<p><strong>物理层</strong>把数字信号变成物理信号，借助物理介质medium（网线，光缆，电话线等）传播。同样的也要处理物理信号到数字信号的转换</p>
<p><strong>物理介质</strong>可以说是第0层，物理层在物理介质的基础上实现</p>
]]></content>
      <categories>
        <category>计算机网络-自顶向下方法</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>8 内部存储器</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84/8%20%E5%86%85%E9%83%A8%E5%AD%98%E5%82%A8%E5%99%A8/</url>
    <content><![CDATA[<h4 align="center">图片来源：南京大学软件学院COA课程PPT</h4>
<h5 align="center">©author:zzb</h5>
<div style="text-align: center"><a href="https://github.com/wbl-z">Github主页</a>  <a href="https://blog.csdn.net/m0_51691879">CSDN主页</a></div> 
<h1>8 内部存储器</h1>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211218091500668.png" alt="image-20211218091500668"></p>
<span id="more"></span>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211014141312493.png" alt="image-20211014141312493"></p>
<p>原来是32位机器，那么内存一般是4GB，因为2<sup>32</sup>次方就是4GB，再多插内存条也没有用，因为地址最多2<sup>32</sup>个，因此最多就只能区分出这么多的单元</p>
<p>就相当于房间数不能增加了，如果想要增大，那么只能增加房间里可以住的人数，即提高寻址能力</p>
<p>Q：每个计算机所能访问的地址有限？</p>
<p>n长01串决定了2<sup>n</sup>个地址，由计算机的设计决定的，<strong>不由总线（地址线）决定</strong>。eg. 16位的线可以传2次表示32位地址</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211014143002582.png" alt="image-20211014143002582"></p>
<p>一个位元是一个bit，有两种状态，用来代表0和1，<strong>至少要能被写入一次，否则不存储信息是没用的</strong></p>
<p>早期的存储器是由磁芯制作的，其原理为：将磁环（磁芯）带磁性或不带磁性之状态，用以代表1或0之比特，磁芯存储器是非易失性存储器(Non-volatile Memory)，即使死机或电源中断，只要没有发生错误的写入信号，则仍然可保有其内容。</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211014143326652.png" alt="image-20211014143326652"></p>
<h2 id="RAM">RAM</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211014143631213.png" alt="image-20211014143631213"></p>
<p>易失的volatile，断电内容丢失</p>
<h4 id="动态随机存取存储器（Dynamic-Random-Access-Memory，DRAM）"><strong>动态随机存取存储器</strong>（<strong>Dynamic Random Access Memory</strong>，<strong>DRAM</strong>）</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211014144043754.png" alt="image-20211014144043754"></p>
<p>由于这种需要定时刷新的特性，因此被称为“动态”存储器，刷新会影响访问，所以访问速度会变慢</p>
<p><strong>一般用于主存</strong></p>
<h4 id="静态随机存取存储器（Static-Random-Access-Memory，SRAM）"><strong>静态随机存取存储器</strong>（<strong>S</strong>tatic <strong>R</strong>andom-<strong>A</strong>ccess <strong>M</strong>emory，<strong>SRAM</strong>）</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211014144411503.png" alt="image-20211014144411503"></p>
<p>所谓的“静态”，是指这种存储器只要保持通电，里面储存的数据就可以恒常保持。当电力供应停止时，SRAM储存的数据还是会消失</p>
<p><strong>一般用于高速缓存</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220106121310582.png" alt="image-20220106121310582"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211014144835899.png" alt="image-20211014144835899"></p>
<p>与SRAM相比，DRAM的优势在于结构简单——<strong>每一个比特的数据都只需一个电容跟一个晶体管来处理，相比之下在SRAM上一个比特通常需要六个晶体管</strong>。正因这缘故，DRAM拥有非常高的密度，集成度高，体积小，单位体积的容量较高因此成本较低。但相反的，DRAM也有<strong>访问速度较慢，耗电量较大</strong>的缺点。</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211014150146768.png" alt="image-20211014150146768"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211014150540744.png" alt="image-20211014150540744"></p>
<blockquote>
<p>传统异步DRAM，CPU不知道何时主存才能准备好数据，所以要一直等待着，而同步DRAM则为主存与时钟信号同步，会在固定的若干个事时钟周期后准备好数据，所以CPU只要那个时间点去取数据即可，中间可以完成其他的事情</p>
</blockquote>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211014150551277.png" alt="image-20211014150551277"></p>
<p>这样CPU就不需要区等待数据的存取，而是知道会在哪个时钟周期完成数据的存取，到时后再去执行即可，而中间时间CPU则可以进行其他操作</p>
<p>注意这里的时钟不是CPU时钟</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211014150922689.png" alt="image-20211014150922689"></p>
<ul>
<li>SDRAM在一个时钟周期内只传输一次数据，它是在时钟上升期进行数据传输；</li>
<li>而DDR则是一个时钟周期内可传输两次数据，也就是在时钟的上升期和下降期各传输一次数据。<strong>使得数据传输数率更快</strong></li>
</ul>
<h2 id="ROM">ROM</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211014151455163.png" alt="image-20211014151455163"></p>
<p>通过掩膜来写入，写入一次后就不能再写入，只能读</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211014151912592.png" alt="image-20211014151912592"></p>
<p>使用电信号来写入</p>
<h2 id="主要进行读操作的存储器">主要进行读操作的存储器</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211014153107731.png" alt="image-20211014153107731"></p>
<h4 id="EPROM">EPROM</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211014153123784.png" alt="image-20211014153123784"></p>
<p>光擦除，电写入，<strong>注意要写入前要擦除之前的内容才行</strong></p>
<h4 id="EEPROM">EEPROM</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211014153642509.png" alt="image-20211014153642509"></p>
<p>可以随时写入而不删除之前的内容</p>
<p>但速度慢，写操作每字节需要几百微秒</p>
<p>密度低</p>
<h4 id="Flash-Memory">Flash Memory</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211014154321299.png" alt="image-20211014154321299"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211014154729160.png" alt="image-20211014154729160"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211014154957475.png" alt="image-20211014154957475"></p>
<p>其中2048x2048x4，前两个表示有这么多行和列，4表示一个单元是4个bit，<strong>说明由4个2048*2048的位元阵列构成</strong><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220106144909649.png" alt="image-20220106144909649"></p>
<p>尽可能排成正方形，这样可以减少线的数量，如果100个单元排成一排，那么寻址需要100根线，而如果是10X10排，那么只要20根线组合即可，只要把要寻址的行和列进行加电，那么就可以选中交叉的那个单元</p>
<p>2048=2^11，所以需要11根线，图中的行/列地址缓冲器可以一次由11位的地址线传入行，下一次再传入列，当两者都有后，再去找存储单元</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211024204118897.png" alt="image-20211024204118897"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211024204126649.png" alt="image-20211024204126649"></p>
<ul>
<li>
<p>集中式刷新：停止所有读写操作并刷新，这样内存就是一会工作一会不工作，对计算机影响很大</p>
</li>
<li>
<p>分散式刷新：在每个存储周期中，当完成读写时刷新，刷新时间和集中式是一样长的，只是把这段时间分散到多个周期内，因此不会出现突然不工作的情况，因为刷新时间就是死区，那么没有刷新时间就没有死区，所以分散式刷新不存在死区。代价就是，由于把刷新时间融入到了存取周期中，<strong>导致存取T周期变长</strong><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220106134846778.png" alt="image-20220106134846778"></p>
<p><strong>这里是每次读写完这个行后，就刷新这个行</strong>，并且不考虑CPU一直读取一行而导致其他行没有被刷新的情况，默认CPU从第一行一直读取到最后一行，<strong><font color=#ff00>所以刷新间隔就为行数个存取周期</font></strong></p>
<blockquote>
<p>再用概率的视角来看，每一行被读/写的概率几乎相同，若把时间扩展到足够长，读取次数足够多（即从宏观的视角），每一行被读取的次数几乎是相同的，那么平均来看，从微观来看，我们也可以近似的看成cpu每一次都读/写了不同行。</p>
</blockquote>
</li>
<li>
<p><strong>异步刷新</strong>（效率高，常用）：设置一个时间间隔，在这个间隔内要保证每一行都被刷新一次，至于在间隔中什么时候刷新，是根据被不被访问来决定的，如果现在被访问，就不刷新，不被访问就刷新。<strong>但如果一直被访问，那么可能会去影响读写强行刷新</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220106135525380.png" alt="image-20220106135525380"></p>
<blockquote>
<p>它将每一行的刷新都分开来，也就是说只要在规定的时间完成对每一行一次的刷新就行了，(2ms/64)间隔进行一次一行的刷新,这里的2ms是规定的，因为DRAM要求，至少2ms更新所有行一次。</p>
<p>每一行只要在最大刷新周期（不刷新/充电就丢失数据的极限时间）内，找个每一行它自己觉得方便的时候刷新即可。</p>
</blockquote>
<p>这样在读写的时候也能刷新，把刷新时间放在了读写中，读写这行就刷新其他行</p>
<p>所以说，异步式刷新所说的<strong>某行在Xms内至少刷新一次=每（Xms/行数）至少刷新一行</strong>。在上述的例子中，就是每4ms内至少刷新一次 = 每(4ms/256=15.6ms)至少刷新一行。</p>
</li>
</ul>
<blockquote>
<ol>
<li><strong>某一行充一次电/刷新一次的时间，也等于一个存取周期（存储周期）。</strong></li>
<li>刷新间隔：<strong>所有</strong>存储单元都刷新一遍所需要的时间，也是两次<strong>所有</strong>存储单元开始刷新之间间隔的时间。</li>
</ol>
</blockquote>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211024205216480.png" alt="image-20211024205216480"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211024205628703.png" alt="image-20211024205628703"></p>
<p>图中内存条上黑色的是芯片，芯片连接在一起是通过板子上的金属线</p>
<ul>
<li>
<p><strong>位扩展</strong>：地址线不变，数据线增加。如1bit到8bit，<strong>数据线要增加8倍</strong>，<strong>几个bit就要几根</strong></p>
</li>
<li>
<p><strong>字扩展</strong>：改变寻址单元个数，但不改变每个单元中的位数，即寻址能力不变。地址线增加，数据线不变。</p>
<p>16K=2<sup>14</sup>，所以换成行列除2，因此地址线需要7条。变成64K=2<sup>16</sup>，所以地址线需要8根 <em>（因为行列复用，所以扩大四倍只要多加1根线即可，如果不复用则要多加两根）</em></p>
</li>
<li>
<p><strong>字、位同时扩展</strong>：地址线和数据线都增加</p>
</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211024210939299.png" alt="image-20211024210939299"></p>
<p>只能插1根、2根、4根，而且要先插相同颜色</p>
<p><strong>多插内存条是字扩展，寻址能力不会变</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220106141216889.png" alt="image-20220106141216889"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220106141242754.png" alt="image-20220106141242754"></p>
<p><strong>主存地址的低3位是用于选片的</strong>，注意数据的存放方式，在一个芯片上不是连续的，而是在不同芯片的同一位置连续存放。</p>
<p>同时<strong>地址中高位为行地址，低位为列地址</strong></p>
<p>先根据行号选出整行到缓冲中，然后在从中选出列</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220106141626007.png" alt="image-20220106141626007"></p>
<h2 id="总结">总结</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20211024211121508.png" alt="image-20211024211121508"></p>
]]></content>
      <categories>
        <category>计算机组织结构</category>
      </categories>
      <tags>
        <tag>计算机组织结构</tag>
      </tags>
  </entry>
  <entry>
    <title>1概述</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E6%96%B9%E6%B3%95/1%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1>1.概论</h1>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220309163725161.png" alt="image-20220309163725161"></p>
<h2 id="1-1-什么是Internet">1.1 什么是Internet</h2>
<p>互联网仅仅是网络的一种（是最为广泛的，有上亿的设备连接到互联网），还有其他的如银行的专用网络、军用的专用网络等</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220309165049534.png" alt="image-20220309165049534"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220309165745292.png" alt="image-20220309165745292"></p>
<p>计算机网络中</p>
<ul>
<li>节点：<strong>主机节点</strong>（可以是源、也可以是目标）（各种终端设备）、<strong>数据交换节点</strong>（既不是源，也不是目标）（如路由器【工作在网络层】、交换机【工作在数据链路层】）用<strong>方形</strong>表示主机节点，用<strong>圆形</strong>表示数据节点</li>
<li>边：<strong>接入（access）链路</strong>（方的和圆的连在一起）、<strong>主干（backbone）链路</strong>（圆的和圆的连接）</li>
<li>协议(protocol)</li>
</ul>
<p><strong>互联网</strong>就是多个网络通过网络互联设备连接起来的巨型的网络</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220309170227294.png" alt="image-20220309170227294"></p>
<p><strong><em>hosts</em> <em>=</em> <em>end systems</em></strong></p>
<p>通信链路的传输速率即带宽以bps作为单位</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220309171543056.png" alt="image-20220309171543056"></p>
<p>IETF(<em>因特网工程任务组(Internet Engineering Task Force, IETF )</em>)制定的RFC文档为<strong>请求评论</strong> <em>(Request For Comment, RFC)</em>，一个协议可能和多个RFC文档相关</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220309185346935.png" alt="image-20220309185346935"></p>
<p>协议(protocol)：<strong>对等层(Peer Layers)<strong>的实体，在通信过程中，应该遵守的规范和标准。规定了</strong>报文格式、次序、动作</strong></p>
<p><strong>PDU 协议数据单元</strong> 在每个层次上都有特指：应用层——message 传输层——segment 网络层——packet(如果是无连接方式的也称datagram) 数据链路层——frame</p>
<p>互联网中所有的通信行为都有协议的约束</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220309185614677.png" alt="image-20220309185614677"></p>
<p>从服务的角度：互联网是<strong>分布式的应用进程</strong>（网络存在的理由）和<strong>为应用进程提供通讯服务的基础设施</strong>（<strong>即源主机/目标主机应用层以下的所有应用实体</strong>）其中基础设施向应用进程提供服务的形式是API(<strong>套接字接口( socket interface：应用层在TCP/IP协议族中使用传输层服务的形式)</strong>)：面向连接的服务（TCP）、无连接的服务（UDP）</p>
<h2 id="1-2网络边缘">1.2网络边缘</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220309190820574.png" alt="image-20220309190820574"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220309191056550.png" alt="image-20220309191056550"></p>
<p><em>network edge</em>、<em>network core</em>、<em>access networks</em></p>
<p>网络核心的作用就是<strong>数据交换(switch)</strong>，让任意两个网络边缘设施都能连接</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220309192041636.png" alt="image-20220309192041636"></p>
<ul>
<li><strong>CS客户端/服务器(client server)模式</strong>：主从模式——<strong>服务器是主</strong>，所有的资源都在服务器，<strong>客户端是从</strong>，所有的资源都来源于服务器<br>
<strong>可扩展性差</strong>，随着请求的增多，服务器能力下降，并且在达到一定的阈值后，服务器断崖式下落</li>
<li><strong>P2P</strong> **peer-peer模式：**一个分布式应用进程进程既是服务器，又是客户端，因此随着peer节点增多，请求的节点增多，提供的节点也在增多。因此使用在文件分发系统之中。<em>如迅雷，可以从迅雷上下载东西，即向多个其他主机上的迅雷请求资源的不同片段，因为是分布式的，同时当我们拥有了一些片段也可以向其他主机的迅雷客户端提供服务</em></li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220309193316313.png" alt="image-20220309193316313"></p>
<p>面向连接：连接状态的维持仅仅是<strong>端系统维护的。中间节点不维护连接</strong></p>
<blockquote>
<p>当中间路径上的节点都知道要维护被称为有连接，如下面的分组交换中的虚电路网络</p>
</blockquote>
<p><strong>可靠性</strong>：因此应用进程不需要考虑纠错等可靠性问题，当采用TCP时就已经假定可靠了</p>
<p><strong>流量控制</strong>是可以协调发送方的发送速度和接收方的接收速度，不会出现数据传输太快把数据淹没的情况</p>
<p><strong>拥塞控制</strong>：当中间链路拥堵时，如果发送方发的太快，那么到了中间某个节点，可能无法处理，中间节点会把这些数据丢弃。因此TCP还要考虑中间通路的通畅情况，<strong>堵塞时降低发送速度</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220309194237963.png" alt="image-20220309194237963"></p>
<p><strong>无连接</strong>：无需建立连接状态，直接发送</p>
<h2 id="1-3网络核心">1.3网络核心</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220314200736805.png" alt="image-20220314200736805"></p>
<p><strong>circuit switch 电路交换</strong></p>
<p><strong>packet switch 分组交换</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220314201021637.png" alt="image-20220314201021637"></p>
<p><strong>建立</strong>一个<strong>独享的线路</strong>，<strong>保障了性能</strong>，利用独享的线路来进行通信，<strong>在之前需要建立链接</strong>。一般用于电话网</p>
<p>如果不用那么就会造成浪费，就像拨通了电话，但是不说话仍然需要收费</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220314201622149.png" alt="image-20220314201622149"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220314201719791.png" alt="image-20220314201719791"></p>
<p><strong>频分FDM</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220314202141900.png" alt="image-20220314202141900"></p>
<p><strong>时分TDM</strong>是指在将一个时钟周期划分成多个片，比如每个周期开始的第一个片分给第一个用户，第二个片分给第二个用户</p>
<p><strong>波分WDM</strong>采用光链路，即光纤的方式，将可用波段划分成多片</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220314202522237.png" alt="image-20220314202522237"></p>
<p>0.5s建立连接，10s传输（<strong>传输时间</strong>），但传输完并不意味着对方已经接受到了，这里面存在着<strong>传播延迟</strong>（也即在线路上传播所需要的时间）。<strong>在局域网中，传播延迟可以忽略，但在广域网中，传播延迟是不能忽略的</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220314202723859.png" alt="image-20220314202723859"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220314202905403.png" alt="image-20220314202905403"></p>
<ul>
<li><strong>优势：<strong>节点要把整个分组都存下来，然后再转发到下一个节点，<strong>存储转发机制</strong>保证了传输过程中一个时间点</strong>只会用到一个链路</strong>，只要这个链路接收到了全部才能用下一个链路转发，这样其他的链路就可以空闲出来用于其他的通信（<strong>共享</strong>）<em>（如果不存储，直接转发，那么和线路交换就是一样的了，只不过这里使用了全部的带宽）</em></li>
<li>没有建立连接的时间消耗</li>
<li><strong>代价：</strong><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220314203920067.png" alt="image-20220314203920067"></li>
<li><strong>延迟会更大</strong></li>
<li><strong>可能需要排队</strong>，因为下一条线路可能被其他连接占用 了</li>
<li>如果路由器缓存用完了，那么分组会被<strong>抛弃</strong></li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220314203619477.png" alt="image-20220314203619477"><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220314203648517.png" alt="image-20220314203648517"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220314204146968.png" alt="image-20220314204146968"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220314204351989.png" alt="image-20220314204351989"></p>
<p><strong>链路上的复用</strong>（多个传输同时使用这条链路）没有固定模式，不像前面介绍的时分等，称为<strong>统计多路复用</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220314221204247.png" alt="image-20220314221204247"><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220314221719766.png" alt="image-20220314221719766"></p>
<p>之所以是9而不算10是因为当线路上的流量满的，没有余量的时候，即流量强度=1的时候线路就会崩溃，此时的排队延迟为无穷大。</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220314222334629.png" alt="image-20220314222334629"></p>
<p>分组交换网络（存储-转发）按照有无网络层的连接分成：</p>
<ul>
<li>
<p><strong>数据报网络</strong> <strong>datagram</strong>（<strong>无连接</strong>）</p>
<p><strong>每个</strong>源主机发向目标主机的<strong>分组</strong>，携带了目标主机<strong>完整的地址</strong>，因此两个主机在通讯之前<strong>不需要握手</strong>，在交换节点当中也不需要维护它们的通讯状态，只是<strong>将传入的分组根据路由表转走</strong>，至于到底是哪两个主机通讯并不关注，<strong>每个分组的传输都是独立的</strong>。<em>就像写信一样，每一封信都有完整的地址</em></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220314223223616.png" alt="image-20220314223223616"></p>
<blockquote>
<p>通往同一个目标主机的分组可能走的是不同的路径，因为路由表可能在变，使得通过的路径不同</p>
</blockquote>
</li>
<li>
<p><strong>虚电路网络</strong>（有连接-不仅仅体现在源和目标，而且体现在中间的所有交换节点上）</p>
<p>需要靠<strong>信令</strong>建立一条<strong>虚拟的线路</strong>，在节点之间要维护通讯状态，<strong>每个分组携带了一个虚电路号</strong>，而不是完整地址。分组按照虚电路号来标识，存储-转发。<em>就像打电话</em></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220314223757919.png" alt="image-20220314223757919"></p>
<p>每个交换节点都有虚电路表项</p>
</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220314224006105.png" alt="image-20220314224006105"></p>
<h2 id="1-4-接入网与物理媒体">1.4 接入网与物理媒体</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322173619078.png" alt="image-20220322173619078"></p>
<p>通过<strong>接入网</strong>将网路边缘接入网络核心</p>
<p>共享/独享</p>
<h3 id="住宅接入：拨号、DSL、电缆、FTTH和卫星">住宅接入：拨号、DSL、电缆、FTTH和卫星</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322174505970.png" alt="image-20220322174505970"></p>
<p>90年代中后期</p>
<p><strong>modem 调制解调器</strong>即<strong>猫</strong>（Modulator&amp;Demodulator）</p>
<p><strong>利用已经有的电话线</strong>（而不是直接将光缆铺到每家每户-成本太大-如长城宽带），将上网数据**(数字信号)<strong>加载到音频信号</strong>(模拟信号)**上，利用电话线（能够保证4kHz）传输</p>
<p><strong>缺点</strong>：带宽窄，56Kbps左右，不能同时上网和打电话；以拨号上网速率上限56KBps为界，低于56KBps称为“窄带”，以上称为“宽带”</p>
<h4 id="DSL-数字用户线路">DSL 数字用户线路</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322180306872.png" alt="image-20220322180306872"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322175857363.png" alt="image-20220322175857363"></p>
<p>DSL调制解调器 <strong>仍然是利用电话线调制解调</strong>，0~4kHz专用于音频，4kHz以上用于传输上网数据*（电话线可以保证4kHz，在4k以上还是可以挖掘的）*，同时<strong>4k以上</strong>划分为非对称的两个部分，<strong>一段用于上行，一段用于下行</strong>，<strong>用于下行的更大</strong>，<strong>即非对称</strong>【4~50kHz为上行，50kHZ~1MHz为下行】</p>
<p>因此本地电话公司是ISP，要求住宅离电话公司比较近，如果比较远，必须采用其他形式的接入网</p>
<p><strong>专用线路</strong></p>
<blockquote>
<p>非对称数字用户线路（ADSL，Asymmetric Digital Subscriber Line）是数字用户线路（xDSL，Digital Subscriber Line）服务中最流行的一种。</p>
<p>因为普通用户通常下载速度比上传速度更重要</p>
</blockquote>
<h4 id="线缆网络">线缆网络</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322180340735.png" alt="image-20220322180340735"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322181255963.png" alt="image-20220322181255963"></p>
<p>电缆调制解调器</p>
<p>一部分用于传输原有的下行的数字电视广播，一部分用于互联网上行数据，一部分用于互联网下行数据</p>
<blockquote>
<p>上行是你的电脑发送数据到互联网上；下行是你从互联网上下载数据</p>
</blockquote>
<p>通过有线电视公司接入的互联网是<strong>共享的带宽</strong>（因为原来的广播电视也是共享广播媒体）</p>
<h4 id="FTTH-Fiber-To-The-Home光纤到户">FTTH Fiber To The Home光纤到户</h4>
<p>最简单的光纤分布网络称为直接光纤，从本地中心局到每户设置一根光纤。更为一般的是，从中心局岀来的每根光纤实际上由许多家庭共享，直到<strong>相对接近这些家庭的位置，该光纤才分成每户一根光纤</strong></p>
<p>两种光纤分布体系结构：<strong>主动光纤网络</strong>（Active Optical Network, AON)和<strong>被动光纤网络</strong>(Passive Optical Network, PON)</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220407211813741.png" alt="image-20220407211813741"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322181614354.png" alt="image-20220322181614354"></p>
<h3 id="企业接入网络">企业接入网络</h3>
<p><strong>以太网</strong>：局域网技术</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220407212538504.png" alt="image-20220407212538504"><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220407212622045.png" alt="image-20220407212622045"><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220407212703374.png" alt="image-20220407212703374"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322181723453.png" alt="image-20220322181723453"></p>
<p>通过交换机的级联，端系统直接连接到交换机上</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322181907009.png" alt="image-20220322181907009"></p>
<h3 id="物理媒体">物理媒体</h3>
<p>物理媒体即可以当作第0层</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322192657987.png" alt="image-20220322192657987"></p>
<p>无屏蔽双绞线(Unshielded Twisted Pair, UTP)常用在建筑物内的计算机网络中，即用于局域网(LAN)中</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322193022993.png" alt="image-20220322193022993"></p>
<p>有线电视的入户线一般是同轴电缆</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322193252969.png" alt="image-20220322193252969"></p>
<ul>
<li><strong>导引性媒体</strong>：信号在固体媒介中传播，传播得远</li>
<li><strong>非导引性媒体</strong>：如信号在开阔的地方传播，如无线电，传播的距离短</li>
</ul>
<h2 id="1-5-Internet结构和ISP">1.5 Internet结构和ISP</h2>
<p>ISP 网络服务提供商，如江苏移动，南京大学</p>
<p>另一种网络划分：<strong>按关系的远近来划分</strong>：将关系密切的在一个网络当中的设备称为ISP网络（其中包含很多的小的ISP），互联网是由很多的ISP网络构成的</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322194640657.png" alt="image-20220322194640657"></p>
<p>如果将每两个ISP两两连接代价会很大，是不可扩展的（即扩展到一定规模，性能迅速下降，代价非常大，这种特性就是不可扩展）</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322195255983.png" alt="image-20220322195255983"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322195352322.png" alt="image-20220322195352322"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322195615711.png" alt="image-20220322195615711"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322201306386.png" alt="image-20220322201306386"></p>
<p><strong>ICP 互联网内容提供商</strong>，如百度，谷歌。会构建自己的网络，建立自己的机房，因为接入他人的ISP成本高，且他人的ISP可能无法提供更好的服务。</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322200256295.png" alt="image-20220322200256295"></p>
<p>因此内容提供商的机房会建在<strong>离核心的ISP比较近的地方</strong>（<em>当然也会考虑到很多因素，如很多的数据中心机房是部署在贵州的，如苹果与云上贵州，原因是贵州地形复杂山多，地震少，机房不容易受到外界影响，有些部署在极地附近，考虑的是降温方便，成本低</em>），这样用户通过核心ISP很快就能访问到谷歌的机房，很快就能返回去。同时如果这个机房没有想要的内容，那么谷歌用<strong>自己的专用线路</strong>（有的可能是自己搭建的线缆，有的可能是租用已有的线缆）从其他机房获取数据返回来，再提供给用户。</p>
<h3 id="松散的层次结构">松散的层次结构</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322200716939.png" alt="image-20220322200716939"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322200937618.png" alt="image-20220322200937618"></p>
<ul>
<li><strong>节点少</strong>（多了成本高）</li>
<li><strong>带宽大</strong>（覆盖国家/国际，速度慢无意义）</li>
<li>ISP之间通过peering link或者通过IXP连接</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322201053710.png" alt="image-20220322201053710"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322201123499.png" alt="image-20220322201123499"></p>
<p>下层ISP是上层ISP的customer，需要通过上层ISP去连接网络的其他部分</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322201229556.png" alt="image-20220322201229556"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322201413107.png" alt="image-20220322201413107"></p>
<p><strong>通过接入多个高层ISP，可以提高服务质量</strong></p>
<h2 id="1-6-分组延时、丢失和吞吐量">1.6 分组延时、丢失和吞吐量</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322202322104.png" alt="image-20220322202322104"></p>
<h3 id="延时-delay">延时 delay</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322202413624.png" alt="image-20220322202413624"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322202537762.png" alt="image-20220322202537762"></p>
<ul>
<li><strong>节点处理延迟</strong></li>
<li><strong>排队延迟</strong>：注意是指不同分组之间排队，而不是分组内部的bit排队</li>
<li><strong>传输延迟</strong>：路由器将分组发送到链路上的时间，也即<strong>存储转发延迟</strong></li>
<li><strong>传播延迟</strong>：数据在链路上传播的时间</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322203539894.png" alt="image-20220322203539894"></p>
<p><strong>广域网WAN的信道容量比局域网LAN要大</strong>：因为数据在广域网上链路长，传播延迟大，因此广域网的链路上同时可能正在传播多个数据报。而局域网链路短，传播延迟可以忽略不计，因此一个时间点链路上一般只有很少的数据报</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322203801790.png" alt="image-20220322203801790"></p>
<p><strong>Tracert 命令</strong>用 IP 生存时间 (TTL)(time to live) 字段和 ICMP 错误消息来确定从一个主机到网络上其他主机的路由。<strong>向每个路由器发出3个探测分组</strong></p>
<ul>
<li>首先，tracert送出一个TTL是1的IP 数据包到目的地</li>
<li>IP数据报每到一个路由器就把<strong>TTL-1</strong>，直到<strong>TTL=0</strong>时，路由器会把这个数据报丢弃并送回一个**「ICMP time exceeded」<em><em>消息</em>（包括发IP包的源地址，IP包的所有内容及路由器的IP地址）</em></li>
<li>接着tracert 再送出另一个TTL是2 的数据包……</li>
<li><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322210303328.png" alt="image-20220322210303328"></li>
<li>当数据包到达目的地后，该主机则不会送回ICMP time exceeded消息，一旦到达目的地，由于tracert通过UDP数据包向<strong>不常见端口(30000以上)</strong>（<em>即没有应用程序在监听这个端口，数据发过来只能被丢弃</em>）发送数据包，因此会收到**「ICMP port unreachable」**消息，故可判断到达目的地。</li>
</ul>
<blockquote>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322212900840.png" alt="image-20220322212900840"></p>
</blockquote>
<blockquote>
<p>如github的tracert，在中间延迟会突然增加，那么可能就是出现了trans-oceanic link跨洋的连接</p>
</blockquote>
<h3 id="丢失-loss">丢失 loss</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322210739797.png" alt="image-20220322210739797"></p>
<ul>
<li>如果丢失节点和前一个节点之间的链路是可靠的，那么会由前一个节点重传。</li>
<li>如果中间的链路是不可靠的<em>如以太网，向上层提供的服务就是不可靠的</em>，且采用TCP，由源主机重传</li>
<li>如果中间的链路是不可靠的，且采用的是UDP，那么根本不重传</li>
</ul>
<h3 id="吞吐量-throughput">吞吐量 throughput</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322211436294.png" alt="image-20220322211436294"></p>
<blockquote>
<p>容量capacity 有时指的是能容纳多少分组，即信道容量，有时指的是带宽，要看上下文</p>
</blockquote>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322211929165.png" alt="image-20220322211929165"></p>
<p><em>bottleneck</em> <em>link</em> <strong>瓶颈链路，即最小带宽的链路</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220322212505648.png" alt="image-20220322212505648"></p>
<p>考虑最小带宽时还要考虑到多个传输都在使用的一个链路，如这里10个连接，那么R所在链路的带宽实际应为R/10</p>
<p><strong>但事实上R<sub>c</sub>、R<sub>s</sub>通常是瓶颈链路</strong></p>
<h2 id="1-7协议层次和服务模型">1.7协议层次和服务模型</h2>
<ul>
<li>使用模块化来将复杂的系统分解，模块与模块之间任意调用</li>
<li>使用分层的方式来将复杂系统分解，相邻两层进行调用，不允许或者不建议跨层调用</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220407093921810.png" alt="image-20220407093921810"></p>
<p>计算机网络采用分层方式：层次的内部更新换代对其他层次是透明的，问题分解，但效率会降低</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220407085159872.png" alt="image-20220407085159872"></p>
<ul>
<li>
<p>对等层采用相同的协议，交换PDU</p>
</li>
<li>
<p>协议需要通过层间接口借助下层的服务实现（物理层不需要）</p>
<p><em>当然会包含所有更下层的服务，但增加了直接下层和对等实体交互的过程中形成的新特性（否则这一层没有意义）</em></p>
</li>
<li>
<p>协议的目的是为了向上层提供更好的服务（最上层不需要，因此应用是整个网络存在的利用）</p>
</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220407090946283.png" alt="image-20220407090946283"></p>
<p><strong>服务访问点SAP <em>service access point</em></strong> 即在层间接口有不同的访问点来<strong>区分</strong>多个上层用户——哪个报文是发给哪个上层用户的。SAP也即服务的<strong>地点</strong><br>
如<strong>套接字</strong>就是传输层和应用层的SAP：原理即从应用层往传输层往下传时进行标注，在对方往上传时加以区分</p>
<p><strong>原语 <em>primitive</em></strong>：服务的形式</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220407091851148.png" alt="image-20220407091851148"></p>
<p>在通讯之前要有<strong>握手</strong>关系，为之后的通讯做好资源准备，这样的形式称为<strong>面向连接的服务</strong></p>
<p>适合大块数据的传输</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220407092116211.png" alt="image-20220407092116211"></p>
<p>适合零星数据的传输</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220407092357061.png" alt="image-20220407092357061"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220407092653840.png" alt="image-20220407092653840"></p>
<p>SDU【<strong>真正要传输的信息</strong>】穿过层间接口需要加上控制信息ICI，一起构成IDU，之后即可将ICI丢弃，该层在SDU加上该层的头部信息n-header【<strong>一部分来自ICI，一部分是本层加的</strong>】【<em>可以理解为货车的头部</em>】，一起形成本层的n-PDU，然后n-PDU往下传输即作为n-1层的SDU，重复上面的过程</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220407093226545.png" alt="image-20220407093226545"></p>
<p>有<strong>三种</strong>关系：直接在SDU上加header；SDU很大，需要拆分成多个小的，分别加上header；SDU很小且多个，可以合并在一起再加上header</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220407094049374.png" alt="image-20220407094049374"></p>
<p>应用层的协议很多，有上千种传输层基本就两种TCP、UDP<br>
网络层的IP协议是做转发的，还有很多的路由选择协议链路层和物理层是配套封装在网卡中的</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220407100737596.png" alt="image-20220407100737596"></p>
<p><strong>ISO</strong> <em>International Organization for Standardization</em></p>
<p><strong>OSI</strong> <em>Open System Interconnection Reference Model</em> 开放式系统互联通信参考模型</p>
<p>参考模型：模型分几层，每层什么功能，更抽象体系架构：每层有哪些协议，更具体</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220407145511402.png" alt="image-20220407145511402"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220407180211806.png" alt="image-20220407180211806"></p>
<h2 id="1-8历史">1.8历史</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220407194744786.png" alt="image-20220407194744786"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220407194827782.png" alt="image-20220407194827782"></p>
<p>每个节点既是数据交换节点，也是端</p>
<p>IMP是路由器的雏形</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220407195211543.png" alt="image-20220407195211543"></p>
<p>网络互联原则：各种网络涌现，需要将不同的网络连接到一起，本质是创建一个网络的网络，即网络互联</p>
<p>cerf and kahn提出了TCP/IP，被誉为互联网之父</p>
<blockquote>
<p>1978年，温顿·瑟夫、罗伯特.卡恩、丹尼·科恩（Danny Cohen）和约翰·普斯特尔（Jon Postel）将TCP的功能分为两个协议：用来检测网络传输中差错的传输控制协议TCP，以及专门负责<strong>对不同网络进行互联</strong>的互联网协议IP。</p>
</blockquote>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220407200922007.png" alt="image-20220407200922007"></p>
<blockquote>
<p>1983年1月1日，ARPANET正式将其网络核心协议由NCP替换为TCP/IP协议。所有主机停止，更换协议</p>
</blockquote>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220407201255638.png" alt="image-20220407201255638"></p>
<blockquote>
<p>1984年，美国国家科学基金会（NSF）建立了NSFnet，作为超级计算机研究中心之间的连接。</p>
<p>最初，NSF曾试图使用ARPANET作为NSFnet的通信干线，但由于ARPANET的军方背景，以及受控于政府，这个决策没有成功。</p>
<p>于是他们决定自己出资，基于TCP/IP协议，建立完全属于自己的广域网。</p>
<p>NSFnet发展非常迅速，很快将全美各地的大学、政府和私人科研机构连接起来。NSFnet的速度也很快，比ARPANET网络快25倍以上。</p>
<p>渐渐地，NSFnet开始取代ARPANET，成为Internet的主干网。</p>
<p>80年代末，连接到NSFnet的计算机数量远远超过了ARPANET用户的数量。<strong>1990年6月1日，ARPANET被正式“拆除”。</strong></p>
<p>1991年8月6日，在瑞士日内瓦的核子研究中心（CERN）工作的英国物理学家<strong>蒂姆·伯纳斯·李</strong>（Tim Berners-Lee），正式提出了World Wide Web，也就是如今我们非常熟悉的www万维网。他还提出了HTTP（超文本传送协议）和HTML（超文本标记语言），设计了第一个网页浏览器，并建立了世界上第一个web网站。</p>
</blockquote>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220407202442711.png" alt="image-20220407202442711"></p>
<h2 id="小结">小结</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220407202926611.png" alt="image-20220407202926611"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220407202946339.png" alt="image-20220407202946339"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220407203705644.png" alt="image-20220407203705644"></p>
]]></content>
      <categories>
        <category>计算机网络-自顶向下方法</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>2应用层</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E6%96%B9%E6%B3%95/2%E5%BA%94%E7%94%A8%E5%B1%82/</url>
    <content><![CDATA[<h1>2应用层</h1>
<h2 id="2-1应用层原理">2.1应用层原理</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408083459526.png" alt="image-20220408083459526"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408083559286.png" alt="image-20220408083559286"></p>
<p>应用层的协议是最多的</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408083923954.png" alt="image-20220408083923954"></p>
<p>网络应用在端系统中部署</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408084212167.png" alt="image-20220408084212167"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408085603973.png" alt="image-20220408085603973"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408085709771.png" alt="image-20220408085709771"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408090057554.png" alt="image-20220408090057554"></p>
<p>即时通讯，如QQ等</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408090255651.png" alt="image-20220408090255651"></p>
<p>客户端进程是主动的，服务器进程是被动的</p>
<p>P2P的会话中也有C和S之分</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408090837148.png" alt="image-20220408090837148"></p>
<p>应用进程需要解决：<strong>标识</strong>（将自己和其他应用进程区分开）和<strong>寻址</strong>（让对方能够找到自己）</p>
<p>层间服务的<strong>地点</strong>（SAP）和<strong>形式</strong>（原语）</p>
<h4 id="问题一">问题一</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408091321745.png" alt="image-20220408091321745"></p>
<p>要标识和寻址一个应用进程，需要<strong>3</strong>个要素：<strong>主机IP</strong>，<strong>使用TCP还是UDP</strong>，<strong>TCP/UDP的端口号</strong></p>
<p>本质上是由<strong>端口号来区分不同的应用进程</strong>，TCP/UDP均为<strong>16bit</strong>的端口号</p>
<p>用IP和port标识端节点 <em>end point</em> 本质上主机进程的通信由2个端节点构成</p>
<h4 id="问题二">问题二</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408091806498.png" alt="image-20220408091806498"></p>
<p>层间接口需要携带的<strong>3</strong>个信息：<strong>内容即SDU</strong>，<strong>谁传的（IP+port）</strong>【<em>否则就不能由对方传回来了</em>】，<strong>传给谁（IP+port）</strong></p>
<p>TCP/UDP实体封装源和目的的端口号和数据，进一步交给IP实体来封装源IP和目标IP</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408092728670.png" alt="image-20220408092728670"></p>
<p>采用<strong>套接字  socket</strong>减少层间传输的信息量，避免在一次连接过程中频繁地封装谁传的/传给谁的信息</p>
<p>socket就是一个<strong>整数</strong>，代表了源IP，源端口，目标IP，目标端口的<strong>四元组(TCP)</strong>。在<strong>UDP</strong>中是源IP，源端口号的<strong>二元组</strong>。<strong>代表了会话session关系</strong>，而不仅仅是主机的标识，一个进程和多个不同的进程进行连接有不同的socket<img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408095149125.png" alt="image-20220408095149125"></p>
<p><strong>socket是本地的标识，对方并不知道</strong>，是本地OS管理的4元组，为了<strong>便于管理</strong>而引入的</p>
<h5 id="TCP-socket">TCP socket</h5>
<p>便于<strong>应用层和传输层的约定</strong>【<em>其他层不知道，对方更不知道</em>】，<strong>建立连接时操作系统返回一个socket整数</strong><br>
所以发送时应用层的应用进程只要使用这个socket整数，OS根据socket表就知道上面的四元组，也即在传输层可以得到对应的四元组，<strong>使得穿过层间的信息量最少【只需两个：socket和SDU】，而不必在应用进程中每次都指定四元组</strong><br>
收的时候根据收到的四元组可以根据建立起的socket的表找到对应的socket，再找到哪个应用进程创建了这个socket，从而把数据发给相应的应用进程</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408094330596.png" alt="image-20220408094330596"></p>
<h5 id="UDP-socket">UDP socket</h5>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408095556687.png" alt="image-20220408095556687"></p>
<p>UDP每次的报文都是独立的，可能上次发给A，下次就发给B</p>
<p>UDP socket<strong>只代表本地IP和本地端口</strong>，<strong>不代表会话关系</strong>，因为UDP是无连接的</p>
<p>因此发送报文时应用层的应用进程传给传输层的UDP实体需要<strong>三个信息：UDP socket、目标IP和端口、SDU</strong><br>
同理在接收报文时传输层要将对方的IP和port传给对应的应用进程，让其知道是谁传来的</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408100429128.png" alt="image-20220408100429128"></p>
<h4 id="问题三">问题三</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408110805050.png" alt="image-20220408110805050"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408120454787.png" alt="image-20220408120454787"></p>
<p><strong>实体是指和网络交互有关的，实现协议的软硬件部分</strong>，而其他部分就不是网络中讲的实体了，如应用程序的应用协议是我们说的实体，但其他部分IO处理等就不是了，如html不是协议的一部分</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408140107691.png" alt="image-20220408140107691"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408140738102.png" alt="image-20220408140738102"></p>
<p>UDP似乎什么服务都不能提供，那能不能直接用IP协议呢，当然是不能的，UDP能够区分出进程：</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408141012843.png" alt="image-20220408141012843"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408141737019.png" alt="image-20220408141737019"></p>
<blockquote>
<p><strong>SSL <em>Secure Sockets Layer</em></strong> 安全套接字协议及其继任者传输层安全（<em><strong>Transport Layer Security，TLS</strong></em>）是为网络通信提供安全及数据完整性的一种安全协议。TLS与SSL在传输层与应用层之间对网络连接进行加密</p>
</blockquote>
<p>SSL在TCP上实现，位于<strong>应用层</strong>，应用采用SSL库如<strong>https</strong>中的s就是指SSL  <em>Hyper Text Transfer Protocol over Secure Socket Layer</em></p>
<h2 id="2-2-Web-and-HTTP">2.2 Web and HTTP</h2>
<p>web是一种应用，http是支持web应用的协议</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408143534573.png" alt="image-20220408143534573"></p>
<p>web网页本身是对象，网页中嵌了对象，但不是对象本身，而是对象的链接，任何对象都可以<strong>由URL唯一标识</strong> <em>uniform resource locator</em>统一资源定位系统</p>
<p>如果支持匿名访问，那么用户名口令可以省略</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408144657478.png" alt="image-20220408144657478"></p>
<p>客户端是浏览器，服务端是服务器</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408144925175.png" alt="image-20220408144925175"></p>
<p>服务器应用层会有一个特殊的socket <strong>wait socket守护socket</strong>，守护在80端口，当有其他web客户端与服务器建立请求时会产生新的socket，服务器可以并发和多个web客户端连接，这种是<strong>连接socket</strong></p>
<p>浏览器得到html文件后 会将其画出来，其中的图片等资源会通过URL又去请求不同的其他服务器，得到后插入。<strong>得到资源后TCP连接就会关闭</strong></p>
<p>HTTP是<strong>无状态</strong>的，即<strong>不维护客户的任何信息</strong>，仅仅是建立连接，关闭连接，在此之前和在结束之后，服务器不会有客户的任何信息，<strong>相当于没有记忆</strong></p>
<h3 id="HTTP连接">HTTP连接</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408151025542.png" alt="image-20220408151025542"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408151753283.png" alt="image-20220408151753283"></p>
<p>请求报文很短，传输时间一般可以忽略不计，但返回的对象资源需要传输时间*【注意这个不是传播时间，传播时间还是有的，局域网忽略不计】*</p>
<p><strong>HTTP 1.0</strong>默认非持久连接，每次请求返回对象资源后就会关闭连接，如果客户在这个服务器上有多个请求，那么要多次TCP连接</p>
<p><strong>HTTP 1.1</strong>默认持久连接，在返回对象资源后连接不会关闭，如果还有请求可以直接使用之前建立的连接下载（<em>可以在报文的首部行中设置connection : close来关闭</em>）</p>
<h4 id="非持久连接">非持久连接</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408152047623.png" alt="image-20220408152047623"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408152055260.png" alt="image-20220408152055260"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408153030709.png" alt="image-20220408153030709"></p>
<p><strong>往返时间RTT</strong> <em>round-trip time</em></p>
<p>所以一次http请求需要<strong>2RTT+对象的传输时间</strong></p>
<h4 id="持久连接">持久连接</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408153908013.png" alt="image-20220408153908013"></p>
<p>需要在一个服务器上请求多个对象</p>
<p><strong>非流水线方式</strong>：一次请求得到一个对象回来后，然后再发出第二个请求</p>
<p><strong>流水线方式</strong>：客户端不等待对象回来，而是发出第一个请求后再发出第二个请求，之后对象依次回来。<strong>HTTP 1.1默认方式</strong></p>
<h3 id="HTTP请求报文">HTTP请求报文</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408154045220.png" alt="image-20220408154045220"></p>
<p><strong>请求报文</strong>和<strong>响应报文</strong>两种</p>
<p>两种报文<strong>都是ASCII码可读的</strong>，都是用ASCII编码的【<em>是早期为了便于调试而采取的措施</em>】</p>
<p>请求报文格式：</p>
<ul>
<li>
<p><strong>请求行/命令行</strong>：<strong>GET</strong>(获取HTML head和body)、<strong>POST</strong>(上传)、<strong>HEAD</strong>(获取头，只需要HTML文件的head，不要body，一般是搜索引擎来建立索引的)</p>
<p>HTTP 1.1增加了<strong>PUT</strong>和<strong>DELETE</strong></p>
<p>PUT用来改资源，Post用来增资源</p>
<p><a href="https://blog.csdn.net/qq_36183935/article/details/80570062">HTTP中GET，POST和PUT的区别</a></p>
</li>
<li>
<p><strong>首部行</strong></p>
</li>
<li>
<p>(一个额外回车换行)</p>
<p>在请求行和首部行的每一行都是有回车换行的 CR LF 【<strong><em>Carriage Return</em> 对应\r 回车 <em>Linefeed</em>  对应\n 换行</strong>】</p>
</li>
<li>
<p><strong>可能的实体行</strong></p>
</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408155225160.png" alt="image-20220408155225160"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408155922625.png" alt="image-20220408155922625"></p>
<p>提交表单信息：</p>
<ul>
<li>post：将表单放在实体部分</li>
<li>get：将表单信息放在URL中上载，即?后表示参数，参数名=参数值，不同参数用&amp;隔开</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408160309903.png" alt="image-20220408160309903"></p>
<h3 id="HTTP响应报文">HTTP响应报文</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408162825032.png" alt="image-20220408162825032"></p>
<p>响应报文格式：</p>
<ul>
<li>
<p>状态行：协议版本，状态码，状态信息(对状态码的解释，如OK)</p>
</li>
<li>
<p>首部行：包含Last-Modified 记录修改时间，从而保证后面所讲的缓存能够与服务器内容保持一致</p>
<p><strong>HTTP需要自己维护报文的界限</strong>，因为<strong>TCP是以字节流</strong>的形式传输的（<strong>UDP是报文形式</strong>），因此报文的字节数很重要</p>
</li>
<li>
<p>(一个额外的\r \n)</p>
</li>
<li>
<p>数据</p>
</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408163445614.png" alt="image-20220408163445614"></p>
<h3 id="Cookies">Cookies</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408164117892.png" alt="image-20220408164117892"></p>
<p><strong>Cookies弥补了HTTP无状态带来的一些问题</strong></p>
<p>客户端第一次请求后，服务端在响应报文的头部加上一个cookies并保存在服务器的数据库中，客户端收到cookies由浏览器保管*(至于怎么保存，协议不管，协议只规范cookies这个传输过程)*，下次客户端发送请求时，会在请求报文的头部加上cookies，服务端对比cookies就能确定请求的客户端是谁了</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408165507430.png" alt="image-20220408165507430"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408165702704.png" alt="image-20220408165702704"></p>
<h3 id="Web-Cache-代理服务器proxy-server">Web Cache 代理服务器proxy server</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408165937799.png" alt="image-20220408165937799"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408170249449.png" alt="image-20220408170249449"></p>
<p>因为热点总是被更多的人访问，所以缓存是很有效的</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408171051613.png" alt="image-20220408171051613"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408170857524.png" alt="image-20220408170857524"></p>
<p>排队延迟计算公式</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408171422030.png" alt="image-20220408171422030"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408171436894.png" alt="image-20220408171436894"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408172032549.png" alt="image-20220408172032549"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408172101286.png" alt="image-20220408172101286"></p>
<p>但有风险，可能服务器中发生改变，但缓存中没变，因此proxy server会使用Conditional GET向服务器发送请求，并在头部加入了**If-modified-since: <date>**的条件如果没有修改，那么服务器返回304 Not Modified表示没有修改；如果修改了，那么就和GET命令完全一样，将对象返回给proxy server 200 OK</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408173037727.png" alt="image-20220408173037727"></p>
<h2 id="2-3-FTP">2.3 FTP</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408173248267.png" alt="image-20220408173248267"></p>
<p>早期的文件分发方式</p>
<p>客户端和<strong>服务器的21号端口</strong>建立TCP连接，这个连接称为<strong>控制连接</strong>，完成用户认证之后客户端可以向服务器发出一系列指令，如list等</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408174001802.png" alt="image-20220408174001802"></p>
<p>当客户端发出下载命令时，服务器会<strong>主动</strong>和<strong>客户端的20号端口</strong>建立TCP连接，称为<strong>数据连接</strong></p>
<p>控制和数据传输在分别<strong>两个连接</strong>上进行，把控制连接称为<strong>带外</strong>(out of band)，带内即数据连接</p>
<p>FTP是<strong>有状态的</strong>，需要维护用户信息</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220408174530084.png" alt="image-20220408174530084"></p>
<p>命令以ASCII文本形式传输</p>
<h2 id="2-4-E-Mail">2.4 E-Mail</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410155542417.png" alt="image-20220410155542417"><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410160144318.png" alt="image-20220410160144318"></p>
<p>三个主要组成部分：</p>
<ul>
<li>
<p><strong>用户代理</strong> <em>user agent</em>：写邮件的软件，因此这个软件就是邮件应用的代理（如web应用的代理是浏览器）</p>
</li>
<li>
<p><strong>邮件服务器</strong> <em>mail servers</em>：守护在<strong>25号端口</strong></p>
<p>包含</p>
<ul>
<li><strong>邮箱</strong>(<em>mailbox</em> contains incoming messages for user。<em>注意是保存发给用户的邮件，而不是发出去的邮件</em>)</li>
<li><strong>报文队列</strong> <em>message queue</em> contains outgoing (to be sent) mail messages</li>
</ul>
</li>
<li>
<p><strong>协议</strong>：</p>
<p>发送协议：SMTP</p>
<p>拉取协议：POP3，IMAP，HTTP</p>
</li>
</ul>
<p><strong>过程</strong>：用户代理将邮件发给邮件服务器**（使用SMTP）<strong>，在邮件服务器的队列中，然后邮件服务器按照队列顺序逐个将邮件发送给对应的邮件服务器</strong>（使用SMTP）<strong>，对应的邮件服务器收到邮件后存储在对应用户的邮箱mailbox中，该用户通过它的用户代理从它在邮件服务器的邮箱中拉取邮件</strong>（使用POP3等）**，在用户代理上呈现</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410161707703.png" alt="image-20220410161707703"></p>
<h3 id="SMTP">SMTP</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410161352910.png" alt="image-20220410161352910"></p>
<p><strong>SMTP 简单邮件传输协议</strong> <em>Simple Mail Transfer Protocol</em></p>
<p>所有<strong>报文请求和响应以及邮件本身的内容</strong>都必须是<strong>7位ASCII码</strong>，即高位为0的可打印字符，不允许超过ASCII码的范围【<em>这是最原始的形式，但不能满足传输中文，附件的要求，因此下面有MIME</em>】</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410162038066.png" alt="image-20220410162038066"></p>
<p>如果client发完一个邮件后，<strong>还有到达这个服务器的邮件，那么会继续发</strong>，直达client没有要发给它的邮件了，那么发出QUIT命令终止</p>
<p><em>在一次连接中可以发很多的邮件，而不是连接一次仅发送一个</em></p>
<p>因为都是ASCII码，所以外面可以手动输入上面的过程来模拟用户代理发送邮件</p>
<p><a href="https://blog.csdn.net/qq_44848479/article/details/122907746">使用telnet程序连接qq smtp协议邮箱服务器发送邮件</a></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410165723409.png" alt="image-20220410165723409"></p>
<ul>
<li>HTTP<strong>一个响应报文仅一个对象</strong>，即比如客户群向服务器请求一个html文件，那么html文件就是这个对象，html中的每个图片对象不会包含在其中，只会包含一个URL</li>
<li>SMTP<strong>则会将多个对象包含在一个报文中</strong>，比如<strong>发送附件有10张图片，一个录音等</strong>，都是封装在一个报文中发送的</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410170222763.png" alt="image-20220410170222763"></p>
<ul>
<li>
<p>首部行：如to、from、subject(即title)、cc(即抄送)</p>
<p><strong>注意不是</strong>MAIL FROM, RCPT TO的<strong>命令</strong></p>
</li>
<li>
<p>主体</p>
</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410170711930.png" alt="image-20220410170711930"></p>
<p><strong>MIME 多媒体邮件拓展</strong> <em>multimedia mail extension</em></p>
<p>使用<strong>base64编码</strong>，将不能用ASCII表示的文本用ASCII表示出来，<strong>从而拓展了可以传输的内容</strong>，这边base64编码，对方再解码即可</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410171204330.png" alt="image-20220410171204330"></p>
<p>可以直接使用HTTP来下载邮件（HTTP本身就能上载和下载）</p>
<h3 id="POP3">POP3</h3>
<p><strong>邮局访问协议</strong> <em>Post Office Protocol</em></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410171606952.png" alt="image-20220410171606952"></p>
<p>list后显示邮件编号和字节大小</p>
<h3 id="IMAP">IMAP</h3>
<p><strong>互联网邮件访问协议</strong> <em>Internet Mail Access Protocol</em></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410171822319.png" alt="image-20220410171822319"></p>
<p>比POP3更复杂，允许用户在服务器上建立目录来管理邮件，因此需要<strong>保留用户状态</strong></p>
<p>而POP3没有这样的功能，因此是<strong>无状态的</strong></p>
<h2 id="2-5-DNS">2.5 DNS</h2>
<p>域名解析系统/域名服务器 <em>Domain Name System</em></p>
<p>DNS不是给人使用的应用，而是给其他应用使用的应用，<strong>主要实现域名到IP地址的转换</strong>，还有<strong>其他的功能</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410172711786.png" alt="image-20220410172711786"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410173230795.png" alt="image-20220410173230795"></p>
<p>域名用平面化的命名很容易重复，因此应该使用层次化的命名</p>
<p>使用一台设备解析域名是不可行的，因此分布式的维护和解析域名（多个服务器）</p>
<img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410173420630.png" alt="image-20220410173420630"  />
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410173544614.png" alt="image-20220410173544614"></p>
<p>DNS运行在<strong>UDP的53号端口</strong>，很强的<strong>事务性</strong>，询问域名-IP，响应即可，没必要建立连接，且报文长度不超过 UDP 的 512 B 限制</p>
<p><strong>互联网的很多核心功能是在网络边缘的端系统上的应用层的应用进程实现的，如DNS</strong></p>
<p>DNS：</p>
<ul>
<li>
<p>域名到IP地址的转换（主要）</p>
</li>
<li>
<p>主机别名到规范名字的转换</p>
<p><a href="http://xn--www-eo8e.baidu.com">如www.baidu.com</a>，这个名字即为别名，不可能只有一台服务器维护百度网站，背后是一堆的服务器，<strong>因此需要将这个别名转化成具体哪个服务器的规范命名</strong>，所以转换得到的IP地址是这个服务器的IP地址【<strong>别名→规范名字→IP</strong>】</p>
</li>
<li>
<p>邮件服务器别名到规范名字的转换</p>
</li>
<li>
<p><strong>负载均衡</strong> <em>load distribution</em> 在主机别名到规范命名时选择负载较小的服务器</p>
</li>
</ul>
<h3 id="问题一-2">问题一</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410174759148.png" alt="image-20220410174759148"></p>
<p>对<strong>主机</strong>命名从<strong>树叶</strong>往树根走，每过一层加一个dot.区分</p>
<p>对<strong>域</strong>命名从<strong>树枝</strong>往上走，每过一层加一个dot.区分</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410175414882.png" alt="image-20220410175414882"></p>
<p>如果只有一个root，那么万一宕机了，那么全部都不能使用，因此一共有13个根域名服务器，可以从最近的开始root往下找，如果宕机了，可以换成别的root。【事实上有上百台根域名服务器，由 13 个机构维护，逻辑上是 13 个根域名服务器】</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410180009812.png" alt="image-20220410180009812"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410180000350.png" alt="image-20220410180000350"></p>
<p>域的划分是逻辑的，网络的划分是物理的</p>
<h3 id="问题二-2">问题二</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410191550308.png" alt="image-20220410191550308"></p>
<p>根据情况划分区域，尽可能均衡，zone和zone之间是<strong>互不相交的</strong></p>
<p>对于一个区域所属的名字服务器，<strong>这个名字服务器中的信息是权威的</strong>，但在其他区域内，就不是权威的了（<em>下面介绍为什么在其他区域也能发挥作用</em>）</p>
<blockquote>
<p><strong>域名服务器可以划分为以下四种不同的类型:</strong></p>
<ul>
<li><strong>根域名服务器</strong> 根域名服务器是最高层次的域名服务器。每个根域名服务器都知道所有的顶级域名服务器的域名及其IP地址。因特网上共有13个不同IP地址的根域名服务器。当本地域名服务器向根域名服务器发出查询请求时，路由器就把查询请求报文转发到离这个DNS客户最近的一个根域名服务器。这就加快了DNS的查询过程，同时也更合理地利用了因特网的资源。</li>
<li><strong>顶级域名服务器</strong> 这些域名服务器负责管理在该顶级域名服务器注册的所有二级域名。当收到DNS查询请求时就给出相应的回答（可能是最后的结果，也可能是下一级权限域名服务器的IP地址)。</li>
<li><strong>权限域名服务器</strong> 这些域名服务器负责管理某个区的域名。每一个主机的域名都必须在某个权限域名服务器处注册登记。因此权限域名服务器知道其管辖的域名与IP地址的映射关系。另外，权限域名服务器还知道其下级域名服务器的地址。</li>
<li><strong>本地域名服务器</strong> 本地域名服务器不属于上述的域名服务器的等级结构。当一个主机发出DNS请求报文时，这个报文就首先被送往该主机的本地域名服务器。本地域名服务器起着代理的作用，会将该报文转发到上述的域名服务器的等级结构中。本地域名服务器离用户较近，一般不超过几个路由器的距离，也有可能就在同一个局域网中。本地域名服务器的IP地址需要直接配置在需要域名解析的主机中。</li>
</ul>
</blockquote>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410191932022.png" alt="image-20220410191932022"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410192148807.png" alt="image-20220410192148807"></p>
<p><strong>TLD</strong> <em>Top-level Domain</em></p>
<blockquote>
<p>例如太平洋岛国图瓦卢的顶级域名是tv，因此将其卖给了电视公司，所以不再是国家级顶级域名</p>
</blockquote>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410192534380.png" alt="image-20220410192534380"></p>
<p>资源记录 <em>resource records</em></p>
<p>TTL 生存时间 <strong>对于权威记录，那么为无限大</strong>，而如果是在别的区域名字服务器中的记录，即非权威，是<strong>缓存</strong>在这里的，<strong>为的是提高性能和速度</strong>，<strong>默认生存时间为2天</strong>，2天后就会把记录<strong>删除</strong>，<strong>为的是保持和权威服务器的一致性</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410193236576.png" alt="image-20220410193236576"></p>
<p><strong>NS即上层域中要保存其子域的指针</strong>，保存了子域所属的权威服务器的<strong>域名</strong>，因此要访问这个DNS服务器，还需要有一条TYPE=A的记录来得到这个服务器的IP地址</p>
<p><strong>除了A以外的TYPE都是得到名字</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410193746954.png" alt="image-20220410193746954"></p>
<p>一台主机要上网需要<strong>4个信息</strong>：</p>
<p>①IP ②子网掩码 ③default gateway默认网关 ④local name server DNS服务器</p>
<p>这些信息是自动分配或者手动分配的</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410194430915.png" alt="image-20220410194430915"></p>
<p>其实可以指定任意一台DNS作为local name server ，但local name server 一般设置比较近的/位于同一个子网的，速度更快</p>
<blockquote>
<p>本地域名服务器起着代理的作用，会将该报文转发到域名服务器的等级结构中。本地域名服务器离用户较近，一般不超过几个路由器的距离，也有可能就在同一个局域网中。本地域名服务器的IP地址需要直接配置在需要域名解析的主机中。</p>
</blockquote>
<h4 id="名字解析过程">名字解析过程</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410194515330.png" alt="image-20220410194515330"></p>
<p><strong>递归查询</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410194710644.png" alt="image-20220410194710644"></p>
<p>当不在区域内/缓存中没有时，local name server 联系13个根名字服务器中的一个，<strong>让根服务器代替本地DNS从根往下找，当然根服务器也让下一级服务器返回它查到的结果，递归下去，最后由根服务器返回得到的结果给本地DNS</strong>，但这样根服务器压力很大，从它这个引申出一大堆递归【<em>就像递归消耗很大一样</em>】</p>
<p><strong>迭代查询</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410195001066.png" alt="image-20220410195001066"></p>
<p>还是先问根名字服务器，但根服务器不知道的话，只是给出下一级服务器的地址，让本地DNS去问它，<strong>然后由本地服务器去逐个询问</strong>，<strong>最终由权威服务器告诉本地DNS</strong></p>
<p>如果得到了这个域名-IP映射，本地DNS会<strong>缓存</strong>下来默认两天</p>
<blockquote>
<p>不但在本地域名服务器中需要高速缓存，在用户主机中也很需要。</p>
</blockquote>
<blockquote>
<p>通常采用以下模式：<strong>从请求主机到本地域名服务器的查询是递归查询，而其余的查询是迭代查询。</strong></p>
</blockquote>
<blockquote>
<p><strong>DNS解析</strong>：浏览器缓存——》系统hosts文件——》本地DNS解析器缓存——》本地域名服务器（本地配置区域资源、本地域名服务器缓存)——》根域名服务器——》主域名服务器——》下一级域名域名服务器 客户端——》本地域名服务器（递归查询) 本地域名服务器—》DNS服务器的交互查询是迭代查询</p>
</blockquote>
<h4 id="DNS协议、报文">DNS协议、报文</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410195705289.png" alt="image-20220410195705289"><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410200048667.png" alt="image-20220410200048667"></p>
<p><strong>ID号可以使得查询过程流水线化</strong>，如果没有ID号，那么必须等上次查询完成才能发出下次的查询</p>
<p><strong>DNS查询和响应的报文格式一样</strong>，根据flags判断是查询还是响应</p>
<h3 id="问题三-2">问题三</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410200216555.png" alt="image-20220410200216555"></p>
<p>增加一个域需要增加两条信息：①该域的域名和其DNS名字的对应关系 ②该DNS名字和DNS的IP的对应关系</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220410200741964.png" alt="image-20220410200741964"></p>
<p>DNS比较健壮</p>
<h3 id="nslook">nslook</h3>
<p>在 cmd 中使用 nslook 程序可以进行域名解析，此外解析会<strong>自动在输入的域名后面加上当前 DNS 的域名</strong>，因此如下</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220509120525161.png" alt="image-20220509120525161"></p>
<p>如果不是当前域名下的网站，那么会逐个向上查询，根据请求可以看到，这里使用的是递归查询，所有结果都由 DNS 返回给主机</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220509120551574.png" alt="image-20220509120551574"></p>
<h2 id="2-5-P2P应用">2.5 P2P应用</h2>
<p>一类P2P应用</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220411082154789.png" alt="image-20220411082154789"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220411082655420.png" alt="image-20220411082655420"></p>
<p>当N很小时，服务器的能力很强，客户端的下载速度是瓶颈，随着N增加，服务器成为瓶颈，时间线性增加</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220411083256812.png" alt="image-20220411083256812"></p>
<p>流媒体也是类似的，因此一个视频看的人越多反而越流畅<a href="https://blog.csdn.net/zhanghan18333611647/article/details/52135694">传统媒体—&gt;流媒体—&gt;加P2P的流媒体的演变之路</a></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220411083133701.png" alt="image-20220411083133701"></p>
<h3 id="P2P的管理模式">P2P的管理模式</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220411084856104.png" alt="image-20220411084856104"></p>
<h4 id="非结构化P2P">非结构化P2P</h4>
<p>peer和peer之间的有相互的TCP关系，则两者之间有一条边，这个边是应用层上逻辑的，事实上两个主机之间可能会经过很多的路由器。<strong>节点和节点之间边的关系是任意的，构成的overlay 覆盖网是任意的，称为非结构化</strong></p>
<h5 id="集中式目录">集中式目录</h5>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220411085017807.png" alt="image-20220411085017807"></p>
<p>目录服务器维护了哪些IP在线；哪些IP具有哪些资源</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220411085234213.png" alt="image-20220411085234213"></p>
<h5 id="完全分布式">完全分布式</h5>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220411085435407.png" alt="image-20220411085435407"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220411085920889.png" alt="image-20220411085920889"></p>
<p>一个主机向与之逻辑上连接的<strong>所有主机发出查询</strong>（假定已经构成了覆盖网），然后一传十，十传百的形式泛洪flooding查询。</p>
<p>会使用TTL来限制泛洪的跳数；或者记录自己已经查询过了，避免回环</p>
<p><strong>覆盖网的构建</strong>：在下载Gnutella软件时会有一个表，其中是很可能在线的节点，本主机向这些节点发送ping，如果这些节点中有在线的，再向它的所有邻居发送ping，和上面的泛洪一样，所有收到ping的节点以pong回应，本主机只要选择若干个节点建立TCP连接当作邻居即可。</p>
<p>当一个节点退出时，只要向其邻居发送即可，这些邻居各自再去找一个新的邻居以维持邻居树目</p>
<h5 id="混合体">混合体</h5>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220411090925779.png" alt="image-20220411090925779"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220411091340324.png" alt="image-20220411091340324"></p>
<p><strong>hash</strong>作为文件的唯一标识</p>
<h4 id="DHT-分布式散列表-（结构化）P2P">DHT(分布式散列表)（结构化）P2P</h4>
<p>节点与节点之间是可以构成环，树的关系，是有结构的</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220411095558203.png" alt="image-20220411095558203"></p>
<p>如环状：每个节点将其IP地址做哈希，根据hash值从小到大首位相连（逻辑），然后文件也同样做哈希，约定好如上面hash值为6~88的文件存储在hash为88的peer节点中。这样的P2P网络模式有效减少了资源定位的开销，提高了P2P 网络的可扩展性</p>
<h3 id="BitTorrent">BitTorrent</h3>
<p><strong>非结构化</strong>P2P，可以看作混合体式</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220411091702522.png" alt="image-20220411091702522"></p>
<p>把文件分成若干个<strong>256KB的块</strong></p>
<p><strong>BT工作原理</strong>：在文件网站/搜索引擎中下载torrent文件，其中包含了对应文件的Tracker Server，然后向Tracker Server发出请求，它会分配一些peer节点的列表给请求客户端，从而请求客户端加入洪流，互通有无：<em>拿出自己多余的东西给对方，与之进行交换，以得到自己所缺少的东西</em></p>
<p><strong>Torrent洪流</strong>：相当于一个小组</p>
<p><strong>BitMap</strong>标识一个文件的块的拥有情况，比如10表示拥有这个文件的第一个块，但没有第二个块。通过<strong>bitmap交换</strong>就可以知道相互之间的块的拥有情况</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220411092252498.png" alt="image-20220411092252498"></p>
<p>新加入Torrent的节点随机的向其他的节点请求块，因为此时什么都没有，bitmap都是0，<strong>当达到4个1后</strong>，<strong>优先请求稀缺的块</strong>，即在洪流中持有该块的节点数目很少的块。<strong>这样可以让稀缺的块逐渐不稀缺，有利于集体利益</strong></p>
<p>并且有一个策略：如果作为服务方，会优先向为我提供服务最好的节点提供服务，是一种你对我好，我对你好的模式</p>
<p>因此新加入的节点得到稀缺块后，别人向他请求的会更多，那么根据策略，他得到别人服务的机会会更大，<strong>这样就可以将集体的利益转化成个人利益</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220411093708760.png" alt="image-20220411093708760"></p>
<p>因为请求的节点数大于能服务的节点数，所以需要排队，Alice每隔30s随机选择一个节点，而不是根据之前周期该节点对Alice提供的服务进行评估优先选择。<strong>这样优化疏通可能可以导致如下的情况</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220411094037836.png" alt="image-20220411094037836"></p>
<h2 id="2-7-CDN">2.7 CDN</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220412130235338.png" alt="image-20220412130235338"></p>
<h3 id="DASH-基于HTTP的动态自适应流">DASH 基于HTTP的动态自适应流</h3>
<p>可以看出 <strong>HTTP 可不仅仅只用于 web，还可以用于文件的上下载、音视频的播放</strong>。<strong>HTTP 就是一个传输协议，和应用无关。</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220412131542549.png" alt="image-20220412131542549"></p>
<p>将每个块编码于不同的码率，形成多个内容相同，码率不同的块，分别独立存储，提前部署，可能分布于不同服务器，可以是源服务器，或者缓存服务器</p>
<p>所有的这些块（不同内容/不同码率）用<strong>告示文件 <em>manifest file</em></strong>记录它们的URL、码率、时长等信息</p>
<p>客户端根据带宽和缓冲区的情况动态地决定请求什么样的块，什么编码速率的块</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220412132003989.png" alt="image-20220412132003989"></p>
<p><strong>DASH 解决了不同客户端、不同网络情况的需求问题</strong></p>
<h3 id="CDN">CDN</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220412132624437.png" alt="image-20220412132624437"></p>
<p><strong>CDN解决的是单个服务器向大量用户提供服务的质量低的问题</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220412132817469.png" alt="image-20220412132817469"></p>
<p><strong>ICP需要买CDN运营商的服务</strong>，从而提高他们为用户提高的服务质量</p>
<p><strong>内容加速服务：<strong>CDN运营商部署了很多的缓存节点，客户端不需要向源服务器请求，而是可以在中间</strong>域名解析重定向</strong>到离它最近，服务质量最好的缓存节点</p>
<p>显然，前提是ICP要提前将内容部署在缓存节点中，但选择哪些内容部署，是一个策略问题（根据二八定律，一般选择热门的内容部署）</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220412134021517.png" alt="image-20220412134021517"></p>
<p>CDN运营商部署缓存节点的方式：</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220412134147448.png" alt="image-20220412134147448"></p>
<ul>
<li>
<p><strong>enter deep，将</strong> <strong>CDN</strong> <strong>服务器深入到许多接入网。</strong> 就是在很多的 local ISP 的范围内部署了很多的缓存节点，把一些内容预先部署到这一缓存节点当中。</p>
<p>这种部署方式更接近用户，节点数量多、离用户近，用户请求资源时跳数更少，网络带宽大。</p>
<p>但是因为部署的节点非常靠下，所以需要部署非常多的节点，这些节点管理起来很困难。</p>
</li>
<li>
<p><strong>bring home，</strong> <strong>部署在少数(10个左右)关键位置节点上</strong>，比如将服务器簇安装于 POP （网络服务提供点 Point of presence）附近，离若干一级 ISP POP 较近的位置。就是在一些上层的 ISP，有很多的数据中心机房的关键节点，然后我选的位置离那些关键数据中心机房比较近。</p>
<p>这样的话，只要我卡住这些关键的位置，也可以向用户提供一些好的服务。但相比于enter deep服务稍弱</p>
</li>
</ul>
<p><strong>CDN位于应用层提供服务 over the top</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220412165604792.png" alt="image-20220412165604792"></p>
<ol>
<li>
<p>客户端要访问URL上的视频</p>
<p><strong>【如果采用了DASH】</strong> <strong>：先要获取告示文件</strong>（如下面的网飞的例子中），然后去<strong>动态逐个请求每个块</strong>，比如一个块的地址在源服务器并且缓存在了CDN中，那么和上图的流程一样</p>
<p><strong>【如果不考虑DASH】</strong>：那么就相当于ICP把整个视频缓存在了CDN服务器中，客户端直接去根据上图流程访问到CDN服务器上的视频</p>
</li>
<li>
<p>客户端向local DNS请求域名解析</p>
</li>
<li>
<p>local DNS再去请求权威名字服务器的域名解析</p>
<p>权威名字服务器知道哪些内容需要加速，因此可以将这个url的解析<strong>重定向</strong>，返回一个新的域名地址【即视频位于的CDN缓存服务器的URL】给local DNS</p>
</li>
<li>
<p>local DNS再去解析这个域名地址，如果没有缓存，那么同理要请求CDN运营商的权威名字服务器，然后得到CDN服务器的IP</p>
</li>
<li>
<p>local DNS将IP返回给客户端，客户端去请求这个IP即可</p>
</li>
</ol>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220412170509774.png" alt="image-20220412170509774"></p>
<h2 id="2-8-TCP-socket编程">2.8 TCP socket编程</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220413132013178.png" alt="image-20220413132013178"></p>
<p>应用进程只需要借助socket传和收即可，是逻辑是上的传输，不必关心真正是怎么传输的</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220413132249795.png" alt="image-20220413132249795"></p>
<p>字节流保证是可靠的，但不保证报文和报文之间的界限</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220413132447084.png" alt="image-20220413132447084"></p>
<p><strong>创建-捆绑-等待</strong></p>
<p>阻塞式即如果没有发送过来的用户连接，那么函数就在这里阻塞，不往下走</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220413132959115.png" alt="image-20220413132959115"></p>
<p>sockaddr_in是代表了一个端节点</p>
<p>这个数据结构不仅可以用于ip的通讯，也可以用于ipx的通讯，<strong>所以是地址簇</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220413133403809.png" alt="image-20220413133403809"></p>
<p>IP地址位于h_addr_list[0]</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220413133459987.png" alt="image-20220413133459987"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220413134829762.png" alt="image-20220413134829762"></p>
<p>sad就是sockaddr_in结构体</p>
<p>客户端不需要bind，而服务器需要bind，如果不绑定，那么客户端不知道去找谁，但客户端OS会隐含地bind</p>
<p>当client connect【将socket表项的对方IP，port填充好】后会向server发TCP连接建立请求，client阻塞在这，server收到信息解除阻塞，返回一个新的值，即connection socket，在socket表中填充了socket，双方的IP和port，当server返回连接确认信息后，client也解除阻塞，这样就真正建立起了连接</p>
<p>close后，对应表项就会被删除</p>
<p><strong>多个进程可以使用同一个端口</strong>，如welcome socket和connection socket使用的都是80端口</p>
<blockquote>
<p>一个进程监听端口，经验告诉我们，如果多次启动一个进程会报错：“Address already in use!&quot;。这<strong>是由于bind函数导致的</strong>，由于该端口号已经被第一个进程监听了。有哪些方法可以实现多个进程监听同一个端口呢？</p>
<p>fork：只要在绑定端口号（bind函数）之后，监听端口号之前（listen函数），用fork（）函数生成子进程，这样子进程就可以克隆父进程，达到监听同一个端口的目的，而且还相互竞争，提高程序效率。</p>
</blockquote>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220413140334193.png" alt="image-20220413140334193"></p>
<p>main的参数传入服务器的域名和port</p>
<p>这里没有bind，是OS隐式bind，随机选取一个暂时没有用到的端口号bind，所以上面的sockaddr_in中代表的是服务器的端节点IP+port</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220413140805502.png" alt="image-20220413140805502"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220413140914413.png" alt="image-20220413140914413"></p>
<p>cad存放client的端节点，sad存放自己的</p>
<p>main的参数只需传入自己的port即可</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220413141425906.png" alt="image-20220413141425906"></p>
<p>中间省略了将clientSentence转换成全部大写的并存储在capitalizedSentence里面的代码【<em>这个服务器执行的是将client传入的句子转换成大写返回的过程</em>】</p>
<blockquote>
<p>htons是将整型变量从主机字节顺序转变成网络字节顺序， 就是整数在地址空间存储方式变为高位字节存放在内存的低地址处。</p>
<p>网络字节顺序是TCP/IP中规定好的一种数据表示格式，它与具体的CPU类型、操作系统等无关，从而可以保证数据在不同主机之间传输时能够被正确解释，网络字节顺序采用big-endian排序方式。</p>
</blockquote>
<p><strong>listen</strong>是把在为一个client服务的过程中又来了一个请求，那么把新的加到队列中，下次循环就从队列中取出一个服务，队列的长度为10 ，超过10就拒绝服务</p>
<h2 id="2-9-UDP-socket">2.9 UDP socket</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220413144944222.png" alt="image-20220413144944222"></p>
<p>UDP的PDU为数据报datagram，IP的无连接也叫datagram，因此需要结合上下文理解具体指哪个</p>
<p>client同样是隐式bind</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220413151951336.png" alt="image-20220413151951336"></p>
<p>也没有welcome和connection之分</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220413152123534.png" alt="image-20220413152123534"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220413152247442.png" alt="image-20220413152247442"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220413152253881.png" alt="image-20220413152253881"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220413152323322.png" alt="image-20220413152323322"></p>
<h2 id="2-10-小结">2.10 小结</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220413152416540.png" alt="image-20220413152416540"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220413152527103.png" alt="image-20220413152527103"></p>
]]></content>
      <categories>
        <category>计算机网络-自顶向下方法</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>4 网络层-数据平面</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E6%96%B9%E6%B3%95/4%20%E7%BD%91%E7%BB%9C%E5%B1%82-%E6%95%B0%E6%8D%AE%E5%B9%B3%E9%9D%A2/</url>
    <content><![CDATA[<h1>4 网络层-数据平面</h1>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220429111116397.png" alt="image-20220429111116397"></p>
<h2 id="4-1-导论">4.1 导论</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220429111936600.png" alt="image-20220429111936600"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220429112347623.png" alt="image-20220429112347623"></p>
<p><strong>转发</strong>——数据平面，决定从哪个端口入，从哪个端口出，是局部功能</p>
<p><strong>路由</strong>——控制平面，决定分组该怎么走，是全局功能</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220429112447141.png" alt="image-20220429112447141"></p>
<p>转发和路由分别有传统方式的 SDN 方式，因此共有四种组合</p>
<p>传统方式是数据平面和控制平面<strong>强耦合</strong>在一起，在一个路由器上一起实现，并且控制平面的路由表是分布式地在不同的路由器各自计算的【因此要修改非常难】</p>
<p>传统方式：<strong>控制平面算出路由表，数据平面根据路由表和分组的目标 IP 地址进行转发</strong> <strong>不可编程</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220429113624038.png" alt="image-20220429113624038"></p>
<blockquote>
<p>SDN 根据多个字段而不是仅仅根据 IP 可以有多个动作：转发、block、泛洪、修改字段，<strong>因此是可编程的</strong></p>
<p>流表是网络操作系统(一个服务器)算出来，通过南向接口交给分组交换设备，分组交换设备把流表装载上之后就可以根据流表进行多个字段的匹配。<strong>因此控制平面是集中式的</strong></p>
<p><strong>这里的路由器叫做分组交换机</strong></p>
</blockquote>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220429114444557.png" alt="image-20220429114444557"></p>
<p><strong>网络服务模型</strong>（<em>network service model</em>）定义了分组在发送与接收端系统之间的<strong>端到端运输特性</strong>。</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220429115302243.png" alt="image-20220429115302243"></p>
<p><strong>（可见 IP 网络是尽力而为的，即什么都不保证。尽力而为服务看起来是根本无服务的一种委婉说法）</strong></p>
<p>主机到主机的网络层连接不仅仅体现在端主机之上，而且体现在中间路径上经过的所有交换节点</p>
<p><strong>TCP / IP 网络中 IP 网络层向上层提供的服务（不存在连接建立）：</strong> 路由表由控制平面产生，交给 IP 协议，根据路由表对到来的分组进行转发，实现数据平面的功能</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220429115117104.png" alt="image-20220429115117104"></p>
<p>对有一些网络，要提供连接建立的功能</p>
<h2 id="4-2-路由器组成">4.2 路由器组成</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220429120911015.png" alt="image-20220429120911015"></p>
<p>任何一个端口都可以既输入又输出混合在一起的，没有独立的输入/输出端口</p>
<p>每个端口有 3 个方框，分别为物理层，链路层，网络层。路由表要交给每个端口的网络层</p>
<blockquote>
<p>指的是路由器的物理输入和输出接口，这完全 不同于第2、3章中所讨论的与网络应用程序和套接字相关联的软件端口</p>
</blockquote>
<h3 id="输入端口">输入端口</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430093745617.png" alt="image-20220430093745617"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430094051788.png" alt="image-20220430094051788"></p>
<p>当出现多个输入端口转到相同输出端口时，需要排队，因此会导致交换速率小于输入速率，所以需要排队</p>
<p><strong>队头阻塞</strong> <strong>HOL blocking</strong>  <em>head of the line blocking</em> ：队列的首个packet由于它的目的端口正忙而被延迟转发，导致后面的packets被blocked</p>
<h3 id="交换结构">交换结构</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430104949033.png" alt="image-20220430104949033"></p>
<p>交换速率应当是 N 倍于输入线路的输入速率（ N 为输入端口数量）</p>
<p><strong>通过内存交换</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430105129633.png" alt="image-20220430105129633"></p>
<p>通过 bus 两次</p>
<p><strong>通过总线交换</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430105514365.png" alt="image-20220430105514365"></p>
<p>分组通过 bus 时要加上输出端口的地址，输出端口发现是自己的端口，那么就将其从这个端口输出</p>
<p><strong>通过互联网络交换</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430105713225.png" alt="image-20220430105713225"></p>
<p>同时可以<strong>转发多个分组</strong></p>
<h3 id="输出端口">输出端口</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430110116587.png" alt="image-20220430110116587"></p>
<p>队列中的分组发送顺序不一定是 FIFO 的，可以采用一些调度规则，实现按优先级发送</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430110458097.png" alt="image-20220430110458097"></p>
<p>输入和输出端口都有可能导致分组的丢弃</p>
<h3 id="调度机制">调度机制</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430110602462.png" alt="image-20220430110602462"></p>
<p>通常默认是 FIFO</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430110730870.png" alt="image-20220430110730870"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430110923709.png" alt="image-20220430110923709"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430111048050.png" alt="image-20220430111048050"></p>
<h2 id="4-3-Internet-Protocol">4.3 Internet Protocol</h2>
<p>所有网络从IP 角度看都是 IP 网络，<strong>IP 是 over everything 的</strong>，IP 是在各种物理网络上运行的。<strong>能够成功的兼容不同的物理网络【不同的链路协议】让不同的链路协议可以组合在一起，在网络层都是 IP 协议，在链路层的不同跳上则是不同类型的链路协议</strong>，IP 的提出就是为了让当时不同类型的网络能够相互兼容地运行</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430111344286.png" alt="image-20220430111344286"></p>
<p><strong>IP 协议</strong>根据分组头部的 DA 字段匹配路由表，<strong>实现数据平面的转发功能</strong></p>
<h3 id="IP-数据报格式">IP 数据报格式</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430111703747.png" alt="image-20220430111703747"></p>
<p><strong>20 B 的头部</strong> + 可能的 option 【由 head len 字段记录头部总长】+ data</p>
<ul>
<li><strong>版本号</strong>：在 IPv4 为 4【4 bit】</li>
<li><strong>首部长度</strong> head len 的单位是 4 B ，因此如果head len = 5 ，那么表示 4*5 = 20 B 【4 bit】</li>
<li><strong>区分服务</strong>: 用来区分不同的数据报，以便按优先级获得更好的服务,但实际上一直没被用过【8 bit】</li>
<li><strong>总长度</strong>：IP 报头+数据的长度【16 bit】</li>
<li><strong>标识</strong> identification：在IP软件在存储器中维持着一个计数器，每产生一个数据报，计数器就+1，并将此值赋值给标识字段。当IP数据报长度超过 MTU 而必须进行分片，这个标识字段的值就被复制到所有的数据报片的标识字段中。相同的标识字段的值使分片后的各个数据报片最后的能正确地重装成为原来的数据。【16 bit】</li>
<li><strong>标志</strong> flag：目前只有两位有意义【3 bit】
<ul>
<li>标志字段中的<strong>最低位为MF</strong> <em>more fragments</em>。MF=1即表示后面“还有分片”的数据报。MF=0表示的是这个数据报的最后一个。</li>
<li>标志字段中的<strong>中间一位记为DF</strong> <em>don’t fragment</em>，当DF记为1时，表示的是“不能分片”。</li>
<li>最高位：<em>reversed bit</em></li>
</ul>
</li>
<li><strong>片偏移</strong>：某片在原分组中的相对位置，便于后续接收时正确地重组。<strong>片偏移以8字节为单位</strong>。这就是说，<strong>每个分片长度一定是8字节的整数倍。</strong>【13 bit】</li>
<li><strong>生存时间</strong> ：数据报能在因特网中经过的路由器的最大数值是<strong>255</strong>【8 bit】</li>
<li><strong>上层协议</strong> protocol：指出此数据携带的数据是使用何种协议，以便让目的 IP 层知道将数据部分上交到哪个处理过程。如TCP，UDP**[17]**等等【8 bit】</li>
<li><strong>首部检验和</strong>：检验头部是否正确【16 bit】</li>
<li><strong>源IP地址</strong>：【32 bit】</li>
<li><strong>目的IP地址</strong>：【32 bit】</li>
</ul>
<h3 id="分片和重组">分片和重组</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430142315368.png" alt="image-20220430142315368"></p>
<p>以太网对数据帧的长度都有一个限制，即 <strong>最大传输单元 MTU</strong> <em>Maximum Transmission Unit</em> 为<strong>1500 B</strong></p>
<p>因此需要将大的 IP 数据报/包分片，但不能直接分片，要拷贝头部信息</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430142132152.png" alt="image-20220430142132152"></p>
<p>每一个片的载荷/数据部分【不包括头部】都一定是 8 B 的倍数，如上的 1480 B</p>
<p>每一片都具有<strong>相同的标识</strong>【用于确定哪些是一个组的】，但不同的偏移量，偏移量记录的是<strong>分片的数据部分在原来的数据部分的偏移量【均不涉及头部】</strong></p>
<p><strong>重组一定只在最终的目标主机上进行</strong>，减少对中间路由器的压力，同时，不同的片可能走不同的路径，也无法在中间路径上全部重组</p>
<p><strong>如果有某分片丢失了</strong>，那么所有该标识的分片都会被目标主机丢弃，如果上层是 TCP，那么超时重发。因此分片会增加丢失的概率，导致重发增加，效率降低，因此不建议切分 IP 数据报。</p>
<blockquote>
<p>TCP协议为了减少IP报被切分的概率，双方主机在握手阶段会交换自己的MSS</p>
<p>MSS是TCP层交互给IP层最大分段大小，不包含TCP报头，只包含数据所以TCP为了减少被切分的概率，就确定一个MSS限制每一次交互给IP层的数据大小。MSS数据大小去掉IP报头和TCP报头，IP报头和TCP报头都是20个字节（不考虑扩展项）。因此：<strong>MSS数据大小=MTU-20-20</strong>（MTU默认值是1500个字节，也可以是其它值）。</p>
<p><strong>所以双方主机在建立连接的时候会交换自己的MSS大小值</strong>，最终大小<strong>取决于双方主机的较小值</strong>，如果一台主机的MSS是1200个字节，另一台主机的MSS是1300个字节，所以双方主机MSS都取1200个字节，那么双方通信的时候TCP层面发送的数据都是1200个字节。<br>
<a href="https://blog.csdn.net/sjp11/article/details/124170051">https://blog.csdn.net/sjp11/article/details/124170051</a></p>
</blockquote>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430142925705.png" alt="image-20220430142925705"></p>
<h3 id="IP-编址">IP 编址</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430143913198.png" alt="image-20220430143913198"></p>
<p><strong>IP 地址用来标识接口</strong>，如主机，IP 地址不是用来标识主机，而是标识主机连接的那个接口/点的，一个主机也可以有多个接口，包含多个 IP</p>
<h4 id="子网">子网</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430144422811.png" alt="image-20220430144422811"></p>
<p>IP 地址：</p>
<ul>
<li>子网部分（高位 bit）</li>
<li>主机部分（低位 bit）</li>
</ul>
<p>一个子网内部的主机的到达<strong>在 IP 层面一跳可达</strong>，<strong>不需要借助路由器，可以借助交换机即可</strong></p>
<blockquote>
<p>链路层：在长途链路中采用点到点的连接，减少绕路；在局域网中采用多点连接即多个设备连到交换机上，经过交换机到达其他点</p>
</blockquote>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430144733795.png" alt="image-20220430144733795"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430145144550.png" alt="image-20220430145144550"></p>
<p>如上，有 <strong>6</strong> 个子网</p>
<h4 id="IP-地址分类">IP 地址分类</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430145244700.png" alt="image-20220430145244700"></p>
<ul>
<li>
<p>A 类地址：<strong>最高地址为0</strong>，2<sup>7</sup>-2 = 126 个网络，<strong>注意减 2 是因为全 0 和全 1 的网络不使用</strong>，每个网络有 2<sup>24</sup>-2 个主机</p>
</li>
<li>
<p>B 类地址：<strong>最高地址为 10</strong>，2<sup>14</sup>-2 个网络，2<sup>16</sup>-2 个主机</p>
</li>
<li>
<p>C 类地址：<strong>最高地址为 110</strong>，2<sup>21</sup>-2 个网络，2<sup>8</sup>-2个 主机</p>
<p>ABC 类地址均为单播地址，D类地址为组播地址<a href="https://m.elecfans.com/article/1163386.html">单播与组播、广播及任播有什么区别-电子发烧友网 (elecfans.com)</a></p>
<blockquote>
<p>组播解决了单播和广播方式效率低的问题，组播路由器借助组播路由协议为组播数据包建立树型路由，被传递的信息在尽可能远的分叉路口才开始复制和分发。</p>
</blockquote>
</li>
<li>
<p>D 类地址：<strong>最高地址为 1110</strong>，2<sup>28</sup>-2 个，D类地址不能出现在IP报文的<strong>源IP地址</strong>字段。</p>
</li>
<li>
<p>E 类地址：<strong>最高地址为 11110</strong>，为未来预留的</p>
</li>
</ul>
<p>互联网的路由是**以网络为单位【而不是一个 IP 地址一个表项】**来路由信息的发布和计算的，<strong>一个子网在路由器中就是一个表项</strong></p>
<p>而且如上面的子网图中，可以将 3 个子网<strong>聚集</strong>成一条<strong>向外发布</strong> <em>【即这些子网从更短的掩码或者从外部来看，也可以看作一个子网，因此只要是这些子网【即根据更短的掩码】的数据报，都发给这个路由器即可，接下来往哪个子网发，这个路由器会知道】</em>，进一步减少在广域网中路由表表项的数目和计算的代价</p>
<h4 id="特殊-IP-地址">特殊 IP 地址</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430152710393.png" alt="image-20220430152710393"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430154658524.png" alt="image-20220430154658524"></p>
<ul>
<li>
<p><strong>网络地址</strong>：{<Network-number>，<Host-number>}={<Network-number>，0} 该地址用于标识网络，不能分配给主机，因此不能作为数据的源地址和目的地址。</p>
</li>
<li>
<p><strong>直接广播地址</strong>：{<Network-number>，<Host-number>}={<Network-number>, -1} 向某个网络上所有的主机发送报文。<strong>直接广播地址只能作为目的地址。</strong></p>
</li>
<li>
<p><strong>受限广播地址</strong>：{<Network-number>，<Host-umber>}={-1, -1} 受限广播地址是在本网络内部进行广播的一种广播地址。TCP/IP规定，32比特全为“1”的IP地址用于本网络内的广播。**受限广播地址只能作为目的地址。 **</p>
<blockquote>
<p>直接广播要求发送方必须知道信宿网络的网络号。但有些主机在启动时，往往并不知道本网络的网络号，这时候如果想要向本网络广播，只能采用受限广播地址（Limited Broadcast Address）。 <a href="https://www.bilibili.com/read/cv14336375">https://www.bilibili.com/read/cv14336375</a></p>
</blockquote>
</li>
<li>
<p><strong>回环地址</strong>：127开头，后面任意*【除了全0，全0表示网络地址和全1，全1表示该网络的广播地址】*到了 IP 层会直接返回</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430152840849.png" alt="image-20220430152840849"></p>
</li>
<li>
<p><strong>0.0.0.0</strong>，特殊的源地址，表示的是网络上的所有主机，一般在写服务端程序绑定监听地址时常用此地址。</p>
</li>
</ul>
<h4 id="专用-内网-IP-地址">专用(内网) IP 地址</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430154844277.png" alt="image-20220430154844277"></p>
<p><strong>内网地址用于区分局部网络中的不同设备</strong></p>
<p>路由器不对目标地址是内网地址的分组进行转发，即不能在公网中转发，只能在内网中使用</p>
<blockquote>
<p>因此 ping 上述的内网地址一定会超时，分组被丢弃。但 ping 除内网地址外的地址都是可以 ping 到的【也有可能超时，有些 IP 不能访问】，因为 IPv4 地址早已分配完了</p>
</blockquote>
<h4 id="CIDR">CIDR</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430155530440.png" alt="image-20220430155530440"></p>
<p>B 类地址主机太多，C 类地址主机太少，因此都不太合适，所以产生了<strong>无类域间路由</strong>，不分类，可以任意划分前多少个 bit 为网络号，这样就可以控制主机数目适中。</p>
<p>但这样看到 IP 地址时就不能像按类划分那样看前面几位就能确定前面多少位是网络号了，<strong>因此需要将 IP 与子网掩码与操作，即可得到网络号</strong></p>
<h3 id="转发">转发</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430160426352.png" alt="image-20220430160426352"></p>
<p>对于到来的 IP 数据报中的目标地址，需要对每一个表项进行掩码与并和对应的网络号对比，相同则从这个端口转发出去</p>
<h3 id="如何获得-IP-地址">如何获得 IP 地址</h3>
<h4 id="主机如何获得-IP-地址">主机如何获得 IP 地址</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430160854594.png" alt="image-20220430160854594"></p>
<p>需要配置4个信息：<strong>IP、子网掩码、默认网关、local DNS</strong></p>
<h5 id="DHCP">DHCP</h5>
<p><em>Dynamic Host Configuration Protocol</em> 动态主机配置协议</p>
<p><strong>DHCP 是基于 UDP 的应用</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430161109899.png" alt="image-20220430161109899"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430161402186.png" alt="image-20220430161402186"></p>
<p>自动申请IP地址的过程：</p>
<ol>
<li>
<p>主机**广播请求【全1的 IP 广播】**寻找能够提供IP地址的DHCP服务器</p>
<p>【DHCP 请求报文👉目的端口 <strong>67</strong> （DHCP服务器）和源端口 <strong>68</strong> （DHCP客户）的UDP报文段👉有广播 IP 目的地址（<strong>255.255.255.255</strong>）和源 IP 地址 <strong>0. 0. 0. 0</strong> 的 IP 数据报👉有目的 MAC 地址 <strong>FF : FF : FF : FF : FF : FF</strong> 和 源 MAC 地址的以太网帧】</p>
</li>
<li>
<p>服务器收到请求后，查看自己是否有可提供的IP地址（需要事先在DHCP服务器上配置地址池和可以提供的IP地址范围）。如果有，就回应可以提供的IP地址和可使用的时间（通常叫租期）</p>
</li>
<li>
<p>主机收到服务器回应的消息后，知道可以使用这个IP地址和租期，会发送确认请求</p>
</li>
<li>
<p>服务器收到来自主机的请求，再 ACK</p>
</li>
</ol>
<p>为什么需要再发一次 request 呢？</p>
<p>因为<strong>可能有多个</strong> DHCP 服务器，主机只需要选择一个 DHCP 提供的 IP 即可【一般第一个】，因此要告诉其余的 DHCP 服务器，不需要它们分配的 IP 了</p>
<h4 id="机构如何获得-IP-地址池">机构如何获得 IP 地址池</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430162535943.png" alt="image-20220430162535943"></p>
<p>通过将 ISP 的网络号增加几位，如上增加 3 位，则前 20 位为网络号，后 3 位为子网号【<em>可以分配给 8 个机构</em>】，再后面为主机号，这样就能从 ISP  获取一个 IP 地址池</p>
<h5 id="层次编址：可以路由聚集">层次编址：可以路由聚集</h5>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430163526208.png" alt="image-20220430163526208"></p>
<p>路由器 IP0 向前面的路由器 IPx 发布通告，凡是通过掩码（23）得到是 IP0 的，那么下一跳 <em>hop</em> 都是 IP0 路由器，IPx 需要转发到连接 IP0 的接口。</p>
<p>其他的同理，因此上图左下可见 IPx 的路由表。</p>
<p>而对于 IPx 它要把路由表信息发布给更前面的路由器 IPw，可以把路由表中每一条都转发，只不过在 IPw 中相应 IP 的下一跳会变成 IPx，但这样会导致越往上，路由表越大。</p>
<p>因此这里可以<strong>路由聚集</strong>，显然 IP0~IP3 都是从 IPx 划分出来的子网，因此 IPx 可以向 IPw 发布这样的信息，凡是掩码（20） 得到是 IPx 的都转发到 IPx路由器，等报文到了 IPx 中，它根据自己的路由表可以将其进行进一步的转发</p>
<p><strong>要可以聚集才能聚集，如果不是由一个大的划分成小的，那么必须一条一条的发布通告</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430164719591.png" alt="image-20220430164719591"></p>
<p>当 IP1 被分到另外一个 ISP时，原来的 ISP 的路由器 IPx <strong>即使有空洞</strong>，即并不是掩码（20）后为 IPx 的都应该转发给它，IP1 就不是，但为了减少表项数目，<strong>仍然可以进行路由聚集</strong>。在 IPy 中 IP1 不能聚集，因此需要单条地发布给上层 IPw。</p>
<p><em><em>因此在路由表项匹配时，可能会出现多个能够匹配的表项</em>【如上 IPw 的第一和第二条都能匹配 200.23.18.1】*，要选择其中匹配长度最长的表项作为转发</em>*</p>
<h4 id="ISP-如何获取-IP-地址池">ISP 如何获取 IP 地址池</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430162425118.png" alt="image-20220430162425118"></p>
<p>ISP 则可以从 ICANN <em>Internet Corporation for Assigned Names and Numbers</em> 获取 IP 地址池</p>
<h3 id="NAT">NAT</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430165900248.png" alt="image-20220430165900248"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430170049881.png" alt="image-20220430170049881"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430170418853.png" alt="image-20220430170418853"></p>
<p>内网可以访问到外网，但外网不能主动访问到内网，需要内网穿透</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430171112883.png" alt="image-20220430171112883"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430171153839.png" alt="image-20220430171153839"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430171830343.png" alt="image-20220430171830343"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430172053958.png" alt="image-20220430172053958"></p>
<p>如 Skype</p>
<h3 id="IPv6">IPv6</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430172244401.png" alt="image-20220430172244401"></p>
<p>IPv4 的问题</p>
<ul>
<li>每到一个路由器，<strong>TTL要减去 1，因此首部校验和也要作相应的改变</strong>，会加重路由器负担</li>
<li>会产生分片</li>
<li>IPv4 的头部没有机制对 <strong>QoS</strong> <em>Quality of Service</em>，<strong>服务质量</strong> 的支持，即是尽力而为的</li>
</ul>
<blockquote>
<p>IPv5是一个<strong>实验性的</strong>资源预留协议，被称为因特网流协议(ST)，目的是提供服务质量-QOS。</p>
<p><a href="https://zhuanlan.zhihu.com/p/383008986">为什么有IPv4、IPv6，却没有IPv5？IPv10又是什么新鲜物种？ - 知乎 (zhihu.com)</a></p>
</blockquote>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430173422178.png" alt="image-20220430173422178"></p>
<p>头部固定 40 B，options被 next header 标识，放在 data 部分</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430173733458.png" alt="image-20220430173733458"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430174322411.png" alt="image-20220430174322411"></p>
<p>只能<strong>平滑过渡</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220430174346683.png" alt="image-20220430174346683"></p>
<h2 id="4-4-通用转发和-SDN【了解】">4.4 通用转发和 SDN【了解】</h2>
<h3 id="传统方式的弊端">传统方式的弊端</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501153930425.png" alt="image-20220501153930425"></p>
<p>传统方式：<strong>垂直集成</strong>：每个路由器既实现数据平面的功能又实现控制平面的功能。路由表粘合两个平面</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501153802620.png" alt="image-20220501153802620"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501154014259.png" alt="image-20220501154014259"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501155022133.png" alt="image-20220501155022133"></p>
<p>而在 SDN 中很容易实现，因为 SDN 可以匹配多个字段，而不是传统的仅仅为 DA 字段，因此可以区分出不同的主机通信等，实现流量分路</p>
<h3 id="SDN-2005">SDN ~2005</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501154124348.png" alt="image-20220501154124348"></p>
<p><strong>CA</strong> <em>control agent</em></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501154429238.png" alt="image-20220501154429238"></p>
<p>注意：这里的分组交换机就是路由器，不是链路层的交换机</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501154625154.png" alt="image-20220501154625154"></p>
<p>这里所说的<strong>网络操作系统</strong>是指 <strong>SDN 下的远程控制器</strong>，不是指 windows 等【SDN 控制器在<strong>逻辑上是集中的</strong>，但为了可拓展性、性能等也可以采用分布式实现】</p>
<p>SDN 体系结构的 <strong>4 个关键特征</strong>：</p>
<ol>
<li>
<p>通用“flow-based”<strong>基于流</strong>的匹配+行动</p>
</li>
<li>
<p>控制平面和数据平面分离</p>
</li>
<li>
<p>控制平面功能在数据交换设备外实现，由两个组件组成：一个 SDN 控制器或网络 OS；若干的网络控制应用</p>
</li>
<li>
<p>可编程控制：在远程控制器之上以网络应用的形式【<em>如防火墙、负载均衡等</em>】实现各种网络功能，<strong>SDN 控制器通过北向接口 API 和网络控制应用交互</strong></p>
<p>编程的结果形成流表，控制器通过<strong>南向接口 API （如 OpenFlow 标准）<strong>下发给</strong>分组交换机</strong>，南向接口同时支持分组交换机将自身的状态上报给 SDN 控制器</p>
<p>OpenFlow协议运行在<strong>TCP</strong>之上，<strong>使用6653的默认端口号</strong></p>
</li>
</ol>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501160327162.png" alt="image-20220501160327162"></p>
<p>在SDN中<strong>数据平面交换机</strong>，<strong>SDN控制器</strong>和<strong>网络控制应用程序</strong>是分离的实体。因此可以由不同的厂商来生产，有利于竞争和更良好的业态</p>
<h3 id="OpenFlow">OpenFlow</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501160357280.png" alt="image-20220501160357280"><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501160508718.png" alt="image-20220501160508718"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501160546054.png" alt="image-20220501160546054"><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501160641579.png" alt="image-20220501160641579"></p>
<p>如上，可以根据 MAC 进行转发，起到了交换机的作用</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501160719695.png" alt="image-20220501160719695"></p>
<p><strong>几乎所有的网络设备</strong>都能通过<strong>匹配不同的流表+行动</strong>来实现</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501160940364.png" alt="image-20220501160940364"></p>
]]></content>
      <categories>
        <category>计算机网络-自顶向下方法</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>3 传输层</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E6%96%B9%E6%B3%95/3%20%E4%BC%A0%E8%BE%93%E5%B1%82/</url>
    <content><![CDATA[<h1>3 传输层</h1>
<h2 id="3-1-概述和传输层服务">3.1 概述和传输层服务</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220414110728006.png" alt="image-20220414110728006"></p>
<p>传输层加强了网络层的服务，但有些服务是可以加强的，有些服务是不能加强的，如<strong>延时和带宽</strong>是不能加强的，取决于网络层</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220414111155619.png" alt="image-20220414111155619"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220414111518603.png" alt="image-20220414111518603"></p>
<h2 id="3-2-多路复用和解复用">3.2 多路复用和解复用</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220414111650739.png" alt="image-20220414111650739"></p>
<p>复用/解复用技术:</p>
<p><strong>将多条运输连接上的数据汇集到一条网络连接上传输</strong>。本来逻辑上是有多个进程之间的通讯线路的，但通过复用（标识两者之间）只需要一条线路即可，在目标端对所有的信息解复用，分发给不同的应用进程</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220414112948542.png" alt="image-20220414112948542"></p>
<ul>
<li>因此套接字仅为本主机的IP和端口，因此即使源IP和端口不同，目标相同，那么都将定位到相同的socket</li>
<li>但TCP捆绑4元组，只要有一个不一样，就是不同的socket</li>
</ul>
<h2 id="3-3-无连接传输：UDP">3.3 无连接传输：UDP</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220414113438493.png" alt="image-20220414113438493"></p>
<p>仅仅在IP上增加了复用和解复用功能</p>
<p>事务性：一次往返就结束</p>
<p>要在UDP上提供可靠传输，既利用UDP的高效，又要可靠，那么<strong>只能在应用层增加可靠性</strong><br>
<em>(没有第三种协议，因为TCP、UDP能够支持85%以上的应用，再增加会出现协调等问题)</em></p>
<h3 id="UDP-报文格式">UDP 报文格式</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220414114016128.png" alt="image-20220414114016128"></p>
<p><img src="https://img-blog.csdnimg.cn/20200420235146636.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE0Mjc5Nw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>数据报</strong>：无连接的，<strong>每个数据单元都是独立发送的</strong></p>
<p><strong>校验和</strong>是验证报文传输过程中有没有出错，如果发现校验不对，那么这个<strong>UDP报文会被丢弃</strong></p>
<blockquote>
<p>在计算校验和的时候，<strong>需要在UDP数据报之前增加12字节的伪首部</strong>，伪首部并不是UDP真正的首部。<strong>只是在计算校验和，临时添加</strong>在UDP数据报的前面，得到一个临时的UDP数据报。校验和就是按照这个临时的UDP数据报计算的。伪首部既不向下传送也不向上递交，而仅仅是为了计算校验和。这样的校验和，既检查了UDP数据报，又对IP数据报的源IP地址和目的IP地址进行了检验。</p>
</blockquote>
<p><strong>UDP报文的头部小，固定的8个字节的头部，如上，64 bit</strong>。<strong>载荷即有效传输的数据部分占比大</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220414115052105.png" alt="image-20220414115052105"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220414115737846.png" alt="image-20220414115737846"></p>
<p>将报文段（<strong>包含数据和头部，甚至有一些IP的伪头部</strong>）切分成<strong>若干个16 bit</strong>，将所有的16 bit数字<strong>加起来</strong>，注意求和时高位有进位需要<strong>进位回滚</strong>（<em>将进到更高位的1加到最低位上去</em>）。最后和再取反码，得到校验和。</p>
<p>收到数据报校验时，计算出所有的和，<strong>然后再加上校验和，得到全1，0xFFFF</strong>，那么说明没有出错（可能有残存错误）</p>
<h2 id="3-4-RDT-可靠数据传输原理">3.4 RDT 可靠数据传输原理</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415114523805.png" alt="image-20220415114523805"></p>
<p>RDT在有些网络中在网络层实现，通常是由TCP在传输层实现</p>
<p>要向上层应用提供可靠的服务，但是所依赖的下层服务却是不可靠的 (best effort)。</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415114859805.png" alt="image-20220415114859805"></p>
<p><strong>渐进地开发RDT</strong>：先假设下层是完全可靠的，再逐个去掉假设，变成不可靠的，从而处理这个不可靠，再将其变成可靠，逐个进行，直到所有假设都去掉</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415115209087.png" alt="image-20220415115209087"></p>
<h3 id="RDT-1-0">RDT 1.0</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415115526494.png" alt="image-20220415115526494"></p>
<p>仅仅是封装和解封装即可</p>
<h3 id="RDT-2-0">RDT 2.0</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415115721842.png" alt="image-20220415115721842"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415120013739.png" alt="image-20220415120013739"></p>
<p>使用<strong>校验和</strong> <em>checksum</em>来检验错误</p>
<ul>
<li>发送方要编码检错，接收方要解码校验</li>
<li>接收方要告诉发送方，是<strong>正确的ACK <em>Acknowledgment</em></strong>，还是<strong>错误的NAK  <em>Negative Acknowledgment</em></strong></li>
<li>发送方要保存副本，ACK则无需处理，等待上层有没有新的调用，NAK则重新发送副本（<strong>检错重传</strong>）</li>
</ul>
<h3 id="RDT-2-1">RDT 2.1</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415121524024.png" alt="image-20220415121524024"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415121855666.png" alt="image-20220415121855666"></p>
<p>但是<strong>显然ACK/NAK也是可能出错的</strong>【<em>这个信息同样是需要校验的，校验和</em>】，因此发送方可能无法判断接收方返回的信息是什么</p>
<ul>
<li>因此对发送的packet<strong>编号0和1</strong>【在01之间切换即可】，发送方先发送p<sub>0</sub></li>
<li>接收方返回的信息ACK出错了，<strong>发送方无法识别，则发送方认为是NAK，再发一次p<sub>0</sub></strong></li>
<li>接收方本来在等待编号1，但收到<strong>相同编号的内容</strong>，因此知道是ACK发送失败，因此将收到的<strong>重复信息丢弃</strong>，但仍然<strong>再返回ACK确认</strong></li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415122203332.png" alt="image-20220415122203332"></p>
<p><strong>停止等待协议 <em>stop-and-wait protocol</em></strong> ：每发送完一个分组就停止发送，等待对方的确认。在收到确认后再发送下一个分组。</p>
<h3 id="RDT-2-2">RDT 2.2</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415170654967.png" alt="image-20220415170654967"></p>
<p><strong>取消NAK</strong>，而是对<strong>ACK编号</strong>，使用<strong>前一个分组</strong>（即最后一个正确接收的分组）的<strong>ACK作为该分组的NAK</strong></p>
<p>这样可以为后续一次发送多个分组做好准备</p>
<p>同理ACK传输错误和上面RDT 2.1一样处理即可</p>
<h3 id="RDT-3-0">RDT 3.0</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415172035771.png" alt="image-20220415172035771"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415173250336.png" alt="image-20220415173250336"></p>
<p>增加了分组可能丢失的情况</p>
<p><strong>超时重传机制</strong>：重传时间一般设置为<strong>比正常一个往返稍长一点的时间</strong>，一旦超过这个时间，一般就能确定分组丢失，然后重传即可</p>
<ul>
<li><strong>数据链路层的timeout一般是确定的</strong>，因为就是在两个节点之间传输</li>
<li><strong>而传输层的timeout是自适应的</strong>，即需要根据情况调整，因为中间可能跨越的节点数目会变化</li>
</ul>
<p>如果是ACK丢失了，那么重传会导致数据重复问题，但接收方可以根据分组序号知道重复，从而丢弃即可</p>
<blockquote>
<p>在上面的有限状态机图中，右上角可以看到如果收到的ACK乱码/与发出的编码不匹配，说明需要重发，但这样是空，即不做处理，原因是想通过超时来处理，因为没有收到正确的，最终会导致超时，从而重发</p>
</blockquote>
<p><strong>设置一个合律的timeout很重要</strong>，如果设置时间太短了，也<strong>能正常工作</strong>，但会导致分组的发送和应答<strong>重复</strong>，<strong>效率低</strong>，如下</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415173911741.png" alt="image-20220415173911741"></p>
<p>RDT 3.0对于停止等待协议是<strong>完备的</strong>，可以处理所有的情况</p>
<h3 id="停止等待协议的问题">停止等待协议的问题</h3>
<p><strong>但停止等待协议的效率很低</strong>，特别是在<strong>信道容量（同时能容纳的“车“的数量，等于TR，<em>R是带宽，T是信道从头到尾传输的时间</em>）很大时</strong>，就像告诉公路很长，其中同一时间可以容纳很多车辆前后排列，但如果一次仅仅一辆车在行驶，行驶出高速公路后再让下一辆车上高速，显然效率太低了</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415174936461.png" alt="image-20220415174936461"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415175324810.png" alt="image-20220415175324810"></p>
<p><strong>传输时间=分组长度/链路带宽</strong></p>
<p>可见，传输时间远小于往返延迟RTT，因此时间利用率很低<strong>0.027%</strong>，只有传输时间是在忙的，其他时间都是空闲的，等待信息的返回</p>
<p><strong>有效吞吐=带宽*时间利用率=270kbps</strong>，相当于1Gbps的链路只用到了270kbps</p>
<h3 id="流水线协议">流水线协议</h3>
<p><strong>流水线协议 <em>pipeline protocol</em></strong> ：一次发送多个未经确认的分组</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415180455259.png" alt="image-20220415180455259"></p>
<h4 id="滑动窗口协议">滑动窗口协议</h4>
<p><em>Sliding-window protocol</em></p>
<table>
<thead>
<tr>
<th></th>
<th>发送窗口大小</th>
<th>接收窗口</th>
</tr>
</thead>
<tbody>
<tr>
<td>停止等待协议</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>流水线协议——GBN</td>
<td>&gt;1</td>
<td>1</td>
</tr>
<tr>
<td>流水线协议——SR</td>
<td>&gt;1</td>
<td>&gt;1</td>
</tr>
</tbody>
</table>
<h4 id="发送窗口">发送窗口</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415180604097.png" alt="image-20220415180604097"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415181334075.png" alt="image-20220415181334075"></p>
<p><strong>发送窗口是发送缓冲区的子集，是指发送但未确认的分组</strong><br>
上层应用可以继续将要发送的分组存放在发送缓冲区，当发送后发送窗口的<strong>前沿便移动一格</strong>，最大可以到发送缓冲区的大小</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415181718493.png" alt="image-20220415181718493"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415195728321.png" alt="image-20220415195728321"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415195859092.png" alt="image-20220415195859092"></p>
<h4 id="接收窗口">接收窗口</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415201457064.png" alt="image-20220415201457064"></p>
<p><strong>接收窗口=接收缓冲区</strong></p>
<p>【<strong>SR和GBN原理一样，都是序号最小的到来才移动，并且窗口中要包含到来的分组序号才会接收并返回ACK，否则丢弃</strong>】</p>
<h5 id="Go-Back-N">Go-Back-N</h5>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415200400877.png" alt="image-20220415200400877"></p>
<p>GBN接收窗口大小是1，0，1分别到来，然后接收方分别接收<strong>解封装，并将数据data交给上层</strong>，再返回ACK<sub>0</sub>，ACK<sub>1</sub>，<strong>接收窗口向右移动</strong>，但如果下一个到来的是3而不是2，说明乱序，那么接收方会把3号分组丢弃，然后<strong>发送顺序到来的序号最大的分组的确认</strong>【<em><strong>累计确认</strong>，表明这个序号及以前的分组已经接收</em>】即ACK<sub>1</sub>，接下来又来了4号分组，同样丢弃并且返回ACK<sub>1</sub></p>
<h5 id="Selective-repeat">Selective repeat</h5>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415200308739.png" alt="image-20220415200308739"></p>
<p>SR中滑动窗口大于1，比如上面为5，先到了0，那么接收窗口右移一格，包含12345，然后返回ACK<sub>0</sub>，顺序到来1，接收窗口再右移一格，包含23456，返回ACK<sub>1</sub>，但接下来到来3，说明乱序，但由于接收窗口中可以包含3，说明可以接收3，那么会返回ACK<sub>3</sub>【<em><strong>非累计确认</strong>，仅仅是这个分组的</em><em>独立确认</em>**】，但接收窗口不移动，仍然包含23456，接下来到来4，返回ACK<sub>4</sub>,，接收窗口仍不移动，只有接收窗口中序号最小的到来才会导致移动。<strong>如果</strong>这时候来了2，会返回ACK<sub>2</sub>，因为此时234都到了，那么<strong>接收方会将234一起有序的交给上层</strong>（<em>要<strong>有序</strong>交给上层，因此在<strong>乱序时要缓存</strong></em>），并且接受窗口右移3格</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415201858858.png" alt="image-20220415201858858"></p>
<h4 id="异常情况">异常情况</h4>
<h5 id="Go-Back-N-重发N">Go-Back-N 重发N</h5>
<p>出现了前面的2号没有收到，收到3时接收方返回ACK<sub>1</sub>，那么发送方的<strong>发送窗口不能移动</strong><br>
【<em>但是注意，如果此时发送窗口&lt;发送缓冲区，那么<strong>发送缓冲区内的分组是可以被发送的</strong>，被发送后进入发送窗口</em>。<em>同理如果缓冲区中的分组未满，那么上层是可以将新的分组放到发送缓冲区的</em>】那么<strong>2号分组的计时器会超时timeout</strong>，因此发送方需要将<strong>发送窗口</strong>（即已发送但未确认的分组）<strong>全部再顺序发送一遍</strong>【因为GBN中2号分组没到，那么后面的所有分组都会被丢弃】</p>
<p>【注意：GBN中只有一个计时器，即在滑动窗口<strong>大小从0变成1时启动一个计时器</strong>，同时也只需要<strong>对最小序号的分组计时</strong>即可。当收到最小序号的ACK时，那么会把<strong>计时器重置，发送窗口右移动</strong>；如果收到ACK后，窗口大小变成0，那么关闭计时器；在超时重发时也会重置计时器】👉详见下面的FSM</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415205342634.png" alt="image-20220415205342634"></p>
<h5 id="Selective-repeat-选择性重发">Selective repeat 选择性重发</h5>
<p>出现了前面2号分组没收到的情况，但34号分组已经收到，<strong>那么2号分组会超时timeout，那么2号分组会被单独重发</strong>，但34号分组的计时器因为收到了确认ACK，所以不会被重发但注意发送方的<strong>发送窗口仍然是不能移动的</strong>，因为2没有被确认，<strong>2被确认后，发送窗口同样移动3格</strong></p>
<p>【注意：SR的<strong>每一个分组</strong>发送后都会有一个计时器<strong>分别计时</strong>，因此较为复杂】</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415205709242.png" alt="image-20220415205709242"></p>
<hr>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415204005412.png" alt="image-20220415204005412"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415204834260.png" alt="image-20220415204834260"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415205133761.png" alt="image-20220415205133761"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415205831311.png" alt="image-20220415205831311"></p>
<h4 id="思考题">思考题</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220415210649113.png" alt="image-20220415210649113"></p>
<p>对于SR，会出现如上图b的情况，因此在最坏的情况下即发送方发出的所有报文均被接收方接收，但ACK报文全部没有返回【关键是最小序号的ACK没有返回到发送方】，这时发送窗口不变，接收窗口右移发送窗口的大小，一旦超过了报文的序号，那么就会出现问题，一段的序号0的报文发给了下一段0的报文</p>
<p><strong>因此要求的是N<sub>S</sub>+N<sub>R</sub>≤2<sup>n</sup>（其中序列号为0~2<sup>n</sup>-1）</strong><br>
[因此如果<strong>SR中两个窗口大小一样</strong>的话，<strong>每个最大只能是2<sup>n</sup>/2=2<sup>n-1</sup></strong>；<strong>GBN中N<sub>R</sub>=1，因此发送窗口最大为2<sup>n</sup>-1</strong>]</p>
<h2 id="3-5-面向连接的传输：TCP">3.5 面向连接的传输：TCP</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220422094901539.png" alt="image-20220422094901539"></p>
<p><strong>MSS</strong> <em>maximum segment size</em> **最大报文段大小 **</p>
<p>MSS是TCP层交互给IP层最大分段大小，不包含TCP报头，只包含数据。</p>
<p>对于以太网，数据的MTU最大传输单元是1500B，因此应用进程的数据太大是无法被链路层的帧封装的，所以需要拆分。</p>
<p>应用进程的数据到了TCP实体后要根据MSS划分成不同的报文段，并且在每一个前面加上TCP头部</p>
<p><strong>全双工</strong>（<em>Full Duplex</em>）全双工指可以同时（瞬时）进行信号的<strong>双向传输</strong>（A→B且B→A）。指A→B的同时B→A，是瞬时同步的。</p>
<blockquote>
<p>单工就是在只允许甲方向乙方传送信息</p>
</blockquote>
<h3 id="TCP报文段结构">TCP报文段结构</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220422142240682.png" alt="image-20220422142240682"></p>
<p>TCP头部长度<strong>至少20 B</strong>，但还有一些可选项以一起构成头部，其中的<strong>首部长度</strong>就记录了头部的长度，用以区分出数据部分</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220422143005451.png" alt="image-20220422143005451"></p>
<ul>
<li>
<p><strong>序号</strong>指的是一个TCP数据报的数据部分的第一个字节在整个字节流中的偏移量，字节为单位。</p>
<p>即指的是segment中第一个字节的在整个字节流中的编号，<strong>而不是segment的编号</strong></p>
<p>此外序号通常不是从0开始，而是开始建立TCP连接时，<strong>双方随机选择序列号</strong>。防止被攻击者猜到，或与其他冲突，所以设置随机</p>
</li>
<li>
<p><strong>确认号</strong>是指确认n-1及以前的字节，比如ACK 555，那么就表示554及之前的都已经收到了，期待555，<em>类似GBN</em>，也是<strong>累计确认</strong>：该序列号之前的所有字节均已被正确接收到</p>
</li>
</ul>
<p>Q：接收方如何处理乱序到达的Segment？</p>
<p>A：TCP规范中没有规定，由TCP的实现者做出决定，<strong>可以缓存，也可以直接抛弃</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220422143513814.png" alt="image-20220422143513814"></p>
<h3 id="TCP往返延迟RTT和超时">TCP往返延迟RTT和超时</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220422143750280.png" alt="image-20220422143750280"></p>
<p>动态自适应地改变计时器的时间</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220422144241845.png" alt="image-20220422144241845"></p>
<p>1-α&lt;1，因此随着测量的增加，前面的SampleRTT对平均值的影响会越来越小，而逐步过渡到后面的SampleRTT</p>
<p>$EstimatedRTT= (1- \alpha)<em>EstimatedRTT+\alpha</em>SampleRTT$</p>
<p>右边的平均RTT是指之前计算出来的平均RTT</p>
<p><strong>推荐值α=0.125</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220422144637496.png" alt="image-20220422144637496"></p>
<p>计算平均值的同时计算<strong>SampleRTT偏离平均值的平均情况</strong>，类似一种方差，称为安全边界时间DevRTT</p>
<p>$DevRTT= (1-\beta)<em>DevRTT+\beta</em>|SampleRTT-EstimatedRTT|$</p>
<p><strong>推荐值β=0.25</strong></p>
<p>最终得到合适的超时时间间隔为平均RTT+<strong>4倍</strong>的安全边界</p>
<p>$TimeoutInterval = EstimateRTT+4*DevRTT$</p>
<h3 id="TCP可靠数据传输">TCP可靠数据传输</h3>
<p><strong>TCP采用pipe-line 是GBN和SR的混合体</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220422145815666.png" alt="image-20220422145815666"></p>
<p>RDT:</p>
<ul>
<li><strong>流水线机制</strong></li>
<li><strong>累计确认</strong>：是对这个字节的期待</li>
<li><strong>TCP使用单一重传定时器</strong>：仅一个计时器</li>
</ul>
<p>触发重传：</p>
<ul>
<li>
<p><strong>超时</strong>：只发生最早的那个未确认的段，即发生超时的这个段</p>
<p>【超时定时器是比较保守的，在4倍偏差，因此如果超时，可以有极大的把握确定报文丢失】</p>
</li>
<li>
<p><strong>重复的ACK</strong>：收到了<strong>1个正确</strong>ACK，然后又收到<strong>3个冗余</strong>的重复ACK，那么重传，而此时超时定时器还没超时，因此称为<strong>快速重传</strong></p>
</li>
</ul>
<h4 id="简化的TCP-不考虑重复ACK-流量控制-拥塞控制">简化的TCP:不考虑重复ACK,流量控制,拥塞控制</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220422151122843.png" alt="image-20220422151122843"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220422151356578.png" alt="image-20220422151356578"></p>
<p>NextSeqNum相当于滑动窗口的前沿</p>
<p>SendBase相当于滑动窗口的后沿。</p>
<p>只不过TCP中的窗口<strong>以字节为单位</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220422151826809.png" alt="image-20220422151826809"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220422151903338.png" alt="image-20220422151903338"></p>
<p><strong>累计确认</strong>，因此即使ACK=100没到，也没关系，ACK=120就能代表ACK=100</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220422152059304.png" alt="image-20220422152059304"></p>
<ol>
<li>
<p>到了一个报文段后等待500 ms，如果第二个报文段在500 ms没来，那么发送第一个的ACK</p>
</li>
<li>
<p>如果上面等待过程中<strong>第二个连续</strong>的报文段到达，立即发送第二个报文段的累计确认，<strong>同时确认两个报文段</strong></p>
</li>
<li>
<p><strong>乱序到达</strong>，需要的一个报文段比如第一个字节位置为y<sub>0</sub>，而到达了第一个字节大于y<sub>0</sub>的，说明乱序，<strong>立即发送重复的ACK=y<sub>0</sub>，表示对y<sub>0</sub>的期待，让发送方重发</strong></p>
</li>
<li>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220422152825411.png" alt="image-20220422152825411">如果在3的情况中，到达了能够完全补充gap，即y<sub>0</sub>到乱序报文起始处的报文，那么立即发送乱序到达的报文的后面一个字节的的位置ACK，累计确认</p>
<p>如果是部分补齐，如上，在立即发送部分补齐的报文的后一个字节的ACK，让发送方快点补齐</p>
</li>
</ol>
<h4 id="快速重传">快速重传</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220422153256354.png" alt="image-20220422153256354"></p>
<p><strong>快速重传</strong>：在定时器超时之前重传</p>
<p>收到1个正确ACK后又收到<strong>3个</strong>重复ACK，那么说明丢失的可能性非常大，需要重传</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220422153708762.png" alt="image-20220422153708762"></p>
<blockquote>
<p>Q：为什么是三次？</p>
<p>A：因为无法判断是因为乱序还是丢失，重传1到2次更可能是乱序，3次及以上更可能是因为丢失</p>
</blockquote>
<h3 id="TCP流量控制">TCP流量控制</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220422154219979.png" alt="image-20220422154219979"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220422154228603.png" alt="image-20220422154228603"></p>
<p><strong>接收buffer</strong>通常默认为<strong>4096</strong></p>
<p>接收方返回ACK时在receive window中记录其空闲的buffer的大小，从而发送方会<strong>限制其发送缓冲区中未确认的字节个数≤receive window值</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220422154354055.png" alt="image-20220422154354055"></p>
<p><strong>piggyback捎带技术</strong>，即发送方和接收方是随时变化的，客户端发送数据给服务器，服务器也会发送数据给客户端，所以如果发送一次对方要返回一个确认，然后又发送数据回来，会比较麻烦，因此可以将确认放在数据中一起发送回来，即捎带</p>
<h3 id="TCP连接管理">TCP连接管理</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220422154951753.png" alt="image-20220422154951753"></p>
<p><strong>连接建立的本质</strong>：知道和要对方通信，准备好资源，控制变量做置位（特别是连接的初始序号#seq，对方的receive buffer的大小）</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220422155548014.png" alt="image-20220422155548014"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220422155913681.png" alt="image-20220422155913681"></p>
<p>二次连接不可行</p>
<h4 id="三次握手">三次握手</h4>
<p><strong>理论上3次是最少需要的</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220422162117847.png" alt="image-20220422162117847"></p>
<ol>
<li>
<p>Client发送连接建立请求SYN=1并携带它将要从序号为x处开始传Seq=x</p>
</li>
<li>
<p><strong>服务器会分配缓存</strong></p>
<p>server需要对这个信息进行ACK，ACKNum=x+1【期望x+1及之后的数据】</p>
</li>
<li>
<p>然后server需要SYN=1并将自己从序号为y处开始传Seq=y告诉client</p>
<p><strong>这两个信息2，3可以合并在一起</strong>SYN&amp;ACK**(piggyback)**</p>
</li>
<li>
<p>然后client对server的y进行确认ACKNum=y+1【期望y+1及之后的数据】</p>
<p><strong>这个ACK通常会和第一次数据传递放在一起</strong></p>
</li>
</ol>
<blockquote>
<p>Q：会不会在三次握手的第二步服务器就会分配资源？</p>
<p>A：会分配，会保留一段时间直到确认这个ACK不会再建立了（SYN泛洪攻击，DDoS）</p>
</blockquote>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220422161237312.png" alt="image-20220422161237312"></p>
<ol>
<li>第一种情况，因为需要3次握手，因此不会存在半连接</li>
<li>第二种情况，因为不会存在半连接，所以连接不存在，延迟到达的data会被丢弃</li>
<li>此外第三种情况：假设客户端使用555端口与服务器80端口建立连接，在第二种情况的基础上，如果data卡了很久才到达服务器，而此时正好客户端又用555端口和服务器80端口建立连接了，那么连接存在，且收到数据。
<ul>
<li><strong>如果序号都是从0开始的话</strong>，那么这个老数据会被当成当前需要的数据，<strong>而产生错误</strong>。</li>
<li>因此<strong>每次选择随机的开始序号</strong>，可以避免老的滞留的数据对连接的影响，比如老数据从x开始，而新的开始序号是x+1，那么老的数据肯定会被抛弃，因为都不在连接的序号范围内(≥x+1)</li>
<li>当然有可能随机选择的序号正好又包含老数据，但概率极小，那这就没有办法了👉”<strong>网络不能解决所有问题</strong>“</li>
</ul>
</li>
</ol>
<h4 id="四次挥手">四次挥手</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220422162647488.png" alt="image-20220422162647488"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220422162755541.png" alt="image-20220422162755541"></p>
<p><strong>对称释放，并不完美</strong></p>
<p>四次挥手是由于 TCP 的<strong>半关闭</strong>（half-close）特性，TCP 提供了<strong>连接的一端在结束它的发送后还能接收来自另一端数据的能力</strong></p>
<p>[<strong>结束发送指的是不再发送数据，但可以对对方的请求作出应答</strong>]</p>
<p>TCP 连接的释放需要发送四个包（执行四个步骤），因此称为四次挥手(Four-way handshake)，<strong>客户端或服务端均可主动发起挥手动作</strong>。</p>
<p><img src="https://pics7.baidu.com/feed/8435e5dde71190ef08c7447eca4fb81efdfa602b.jpeg?token=74e81457ce3c2f49b48814839e548194&amp;s=5EA83C6229C6E0CA5A7454CA0000E0B1" alt="img"></p>
<p><strong>1）第一次挥手</strong>：客户端发送一个 FIN 报文（请求连接终止：FIN = 1），报文中会指定一个序列号 seq = u。并<strong>停止再发送数据，主动关闭 TCP 连接</strong>。此时客户端处于 FIN_WAIT1 状态，等待服务端的确认。</p>
<blockquote>
<p>FIN-WAIT-1 - 等待远程TCP的连接中断请求，或先前的连接中断请求的确认；</p>
</blockquote>
<p><strong>2）第二次挥手</strong>：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT状态。</p>
<blockquote>
<p>CLOSE-WAIT - 等待从本地用户发来的连接中断请求；</p>
</blockquote>
<p><strong>此时的 TCP 处于半关闭状态，客户端到服务端的连接释放</strong>。客户端收到服务端的确认后，进入FIN_WAIT2（终止等待 2）状态，等待服务端发出的连接释放报文段。</p>
<blockquote>
<p>FIN-WAIT-2 - 从远程TCP等待连接中断请求；</p>
</blockquote>
<p><strong>3）第三次挥手</strong>：如果服务端也想断开连接了（没有要向客户端发出的数据），和客户端的第一次挥手一样，发送 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态，等待客户端的确认。</p>
<blockquote>
<p>LAST-ACK - 等待原来发向远程TCP的连接中断请求的确认；</p>
</blockquote>
<p><strong>4）第四次挥手</strong>：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答（ack = w+1），且把服务端的序列值 +1 作为自己 ACK 报文的序号值（seq=u+1），此时客户端处于 <strong>TIME_WAIT</strong> <strong>（时间等待）状态</strong>。</p>
<blockquote>
<p>TIME-WAIT - 等待足够的时间以确保远程TCP接收到连接中断请求的确认；</p>
</blockquote>
<p>注意 ：这个时候由服务端到客户端的 TCP 连接并未释放掉，<strong>需要经过时间等待计时器设置的时间 2MSL（一个报文的来回时间） 后才会进入</strong> <strong>CLOSED</strong> <strong>状态</strong>（这样做的目的是确保服务端收到自己的 ACK 报文。如果服务端在规定时间内没有收到客户端发来的 ACK 报文的话，<strong>服务端会重新发送 FIN 报文给客户端</strong>，客户端再次收到 FIN 报文之后，就知道之前的 ACK 报文丢失了，然后再次发送 ACK 报文给服务端）。**服务端收到 ACK 报文之后，就关闭连接了，处于 CLOSED 状态。**因此服务器到客户端的连接关闭，整个 TCP 连接关闭</p>
<blockquote>
<p><strong>两次挥手就可以释放一端到另一端的 TCP 连接，完全释放连接一共需要四次挥手</strong>。</p>
<p>举个例子：A 和 B 打电话，通话即将结束后，A 说 “我没啥要说的了”，B 回答 “我知道了”，于是 A 向 B 的连接释放了。但是 B 可能还会有要说的话，于是 B 可能又巴拉巴拉说了一通，最后 B 说“我说完了”，A 回答“知道了”，于是 B 向 A 的连接释放了，这样整个通话就结束了。</p>
</blockquote>
<h2 id="3-6-拥塞控制原理">3.6 拥塞控制原理</h2>
<h3 id="拥塞的原因-代价">拥塞的原因/代价</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220425205612515.png" alt="image-20220425205612515"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220425210620116.png" alt="image-20220425210620116"></p>
<p>无限大的缓存，则报文不会丢失</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220425210802389.png" alt="image-20220425210802389"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220425210939064.png" alt="image-20220425210939064"></p>
<p>掌握路由器空闲空间，代价太大</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220425211229636.png" alt="image-20220425211229636"></p>
<p>当网络拥塞时，会出现超时重传，丢失重传等，因此此时想要达到更高的传输速率，输入的带宽要增大，比如为了能每秒传输100个分组，那么输入到链路的分组数目会大于100个</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220425211410601.png" alt="image-20220425211410601"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220425211614033.png" alt="image-20220425211614033"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220425211804919.png" alt="image-20220425211804919"></p>
<p>当分组经过了很多路由器，但在后面的一个路由器被抛弃了，那么它在前面所做的努力都会被浪费，这在网络拥塞时更加可惜，因为资源有限，有限的资源还被浪费了</p>
<h3 id="拥塞控制方法">拥塞控制方法</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220425211920911.png" alt="image-20220425211920911"></p>
<h4 id="ATM-采用网络辅助的拥塞控制">ATM 采用网络辅助的拥塞控制</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220425214145348.png" alt="image-20220425214145348"></p>
<p><strong>ATM</strong> <em>Asynchronous Transfer Mode</em> 异步传输模式。具有分组交换和电路交换的优点，对应于OSI协议参考模型的第2层。</p>
<p>数据交换的单位是<strong>信元</strong>，可以认为是小分组，<strong>53B，5B的头部，48B的载荷</strong>，因此存储转发的时间非常短即可完成。</p>
<p>在电路交换中，每个节点花费1bit的存储时间，在分组交换中每个节点花费一个分组的存储时间，而在 ATM 中信元比 1bit 大，比一个分组小，只花费53B的存储时间。<strong>所以网络调度很容易，兼具两种交换网络的特性</strong></p>
<p>ATM 网络具有很多模式，如 <strong>ABR</strong> <em>available bit rate</em> <strong>弹性服务</strong>：如果网络轻载，那么用户可以使用网络的可用带宽，但当网络拥塞时，用户只能使用网络承诺的带宽，不能超过如1 Mbps</p>
<p>发送方在发送数据信元中<strong>间隔插入</strong>资源管理信元 <strong>RM</strong> ，其中的 bit 被交换机设置：</p>
<ul>
<li><strong>NI bit</strong> : <em>no increase in rate</em> 轻微拥塞时</li>
<li><strong>CI bit</strong> : <em>congesting indication</em> 拥塞提升
<ul>
<li>也可能交换机将 RM 信元前面的数据信元的 <strong>EFCI bit</strong> <em>Explicit Forward Congestion Indication</em>  <code>显性前向拥塞指示</code> 置为1，那么将由接收端把 RM 信元的 CI bit 置1</li>
</ul>
</li>
<li><strong>ER</strong> 2 Byte : <em>explicit rate</em> 记录两个主机通讯过程中的交换机所能支持的最小带宽[<em>每经过一个就看是否更小，更小就修改，更大则不改</em>]，因此发送方根据最小带宽发送，就不会发送拥塞</li>
</ul>
<p>接收端不修改 RM 信元，并将其返回给发送方，从而发送方可用知道网络状况，控制发送速率</p>
<h2 id="3-7-TCP-拥塞控制">3.7 TCP 拥塞控制</h2>
<h4 id="TCP-采用端到端的拥塞控制">TCP 采用端到端的拥塞控制</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220426080902560.png" alt="image-20220426080902560"></p>
<p>端系统自己感知拥塞，网络核心负担低</p>
<h3 id="如何检测拥塞">如何检测拥塞</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220426081045830.png" alt="image-20220426081045830"></p>
<p><strong>超时即认为是拥塞</strong></p>
<ul>
<li><strong>网络拥塞</strong>，段被丢弃：概率大，判断正确</li>
<li><strong>段出错</strong>，段被丢弃： 概率小，判断错误，但概率小，对整个影响不大</li>
</ul>
<p>出现**3次重复的冗余 **ACK <strong>即认为轻微拥塞</strong>，即出现丢失，但还有一定传输能力(<em>后面3个段都到达了，此时还没超时，因为超时时间比较保守，加上4倍偏差</em>)</p>
<ul>
<li>第一个 ACK 正确</li>
<li>后续 1~2 个 ACK ，会被认为是乱序，<strong>乱序的可能性更大</strong></li>
<li>出现第 3 个 ACK ，<strong>大概率是段丢失</strong></li>
</ul>
<h3 id="速率控制方法">速率控制方法</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220426082135576.png" alt="image-20220426082135576"></p>
<p>$rate = \frac{CongWin}{RTT} Byte/sec$</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220426091116543.png" alt="image-20220426091116543"></p>
<p>MSS 是最大报文长度</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220426091444944.png" alt="image-20220426091444944"></p>
<p>保证发送窗口是<strong>拥塞窗口和对方接收窗口的最小值</strong>，从而同时满足拥塞控制和流量控制</p>
<h4 id="策略">策略</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220426091628679.png" alt="image-20220426091628679"></p>
<p><strong>SS</strong> <em>slow start</em> 慢启动</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220426091752613.png" alt="image-20220426091752613"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220426091901163.png" alt="image-20220426091901163"></p>
<p>每收到一个 ACK，拥塞窗口加 1 == 下一次的拥塞窗口是上一次的两倍</p>
<p><strong>初始速率很慢，但是快速攀升</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220426092734182.png" alt="image-20220426092734182"></p>
<ul>
<li><strong>AI</strong> <em>Additive Increase</em> <strong>加性增</strong>：到达 SS 的阈值后，每个RTT将 CongWin 增大一个 MSS 线性地探测-----<strong>拥塞避免阶段</strong></li>
<li><strong>MD</strong> <em>Multiplicative Decrease</em> <strong>乘性减</strong>：
<ul>
<li>当<strong>发送超时</strong>后，将 CongWin 降为 1 MSS，开始 SS 并将 CongWin / 2 作为 SS 倍增的阈值。</li>
<li>当<strong>收到 3 个冗余 ACK</strong> 时，直接将<strong>阈值降为 CongWin / 2，并将 CongWin 设置为 阈值 + 3</strong>【<em>+3是因为返回 3 个 ACK 所以后面有三个已经确认了</em>】，然后直接线性增加 1【<em>此时 CongWin &gt; 阈值</em>】，而无需从 1 开始 SS。</li>
<li>当收到重复 ACK 时，什么都不做，<strong>只是对重复的个数进行计数</strong>，为上面的情况做好准备</li>
</ul>
</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220426093527640.png" alt="image-20220426093527640"></p>
<h3 id="TCP-吞吐量">TCP 吞吐量</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220426094855058.png" alt="image-20220426094855058"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220426094628828.png" alt="image-20220426094628828"></p>
<p>不考虑 SS 阶段，因为指数增加，时间可以忽略不计</p>
<p>因此平均吞吐量为 <strong>0.75 W / RTT</strong></p>
<h3 id="TCP-公平性">TCP 公平性</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220426095036146.png" alt="image-20220426095036146"></p>
<p>TCP 是公平的，<strong>均分瓶颈带宽</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220426165108114.png" alt="image-20220426165108114"></p>
<p>以两个连接 1 和 2 共享链路为例：</p>
<p>短时间是可能超过斜线的，因为路由器存在缓存，但长期是不可能的，分组会被抛弃。</p>
<p>当检测到拥塞后（这里不看 SS 只看拥塞避免阶段，SS 时间很短），两者都会回到斜线内部，然后 45° 地增加带宽(即两者都逐步增加1 MSS[假设两者的 MSS 是一样的])，<strong>最终可以达到两者均分带宽</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220426165337244.png" alt="image-20220426165337244"></p>
<p>上述两种情况就体现了一定的不公平性，还有一种情况，如果 AA’ 的 MSS 小于 BB’ 的 MSS 那么最终两者也无法达到均分带宽</p>
<p><strong>因此 TCP 的公平是大致上的公平</strong></p>
<h2 id="总结">总结</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220426165814628.png" alt="image-20220426165814628"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220426165945346.png" alt="image-20220426165945346"></p>
]]></content>
      <categories>
        <category>计算机网络-自顶向下方法</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>5 网络层-控制平面</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E6%96%B9%E6%B3%95/5%20%E7%BD%91%E7%BB%9C%E5%B1%82-%E6%8E%A7%E5%88%B6%E5%B9%B3%E9%9D%A2/</url>
    <content><![CDATA[<h1>5 网络层-控制平面</h1>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501163220684.png" alt="image-20220501163220684"></p>
<h2 id="5-1-导论">5.1 导论</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501163321330.png" alt="image-20220501163321330"></p>
<h2 id="5-2-路由选择算法">5.2 路由选择算法</h2>
<p><strong>路由可以看作是子网到子网的路由</strong>【<em>因此就是找到路由器到其他路由器的较好路径（到了这个路由器就到了这个子网）</em>】，<strong>而不是主机到主机的路由</strong>，因为可以想象 IPv4 那么 40 亿多个主机，要确定其中两个主机的最佳路由路径，很困难。</p>
<p>事实上，对于不在一个子网的主机的<strong>第一跳</strong>一定是发送给这个子网的网关，<strong>最后一跳</strong>一定是由目标子网的网关发送给目标主机</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501164618299.png" alt="image-20220501164618299"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501164659310.png" alt="image-20220501164659310"></p>
<h3 id="原则">原则</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501165222896.png" alt="image-20220501165222896"></p>
<p>汇集树：sink tree 这个节点到其他所有路由器的最优路径形成的树</p>
<p><strong>路由选择算法就是要为所有的路由器找到并使用汇集树</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501165607293.png" alt="image-20220501165607293"><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501165721998.png" alt="image-20220501165721998"></p>
<h3 id="分类">分类</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501170151575.png" alt="image-20220501170151575"></p>
<ul>
<li>全局/分布式</li>
<li>静态/动态：非自适应/自适应</li>
</ul>
<h3 id="link-state-全局算法">link state-全局算法</h3>
<p>链路状态算法：<strong>即Dijkstra 算法</strong></p>
<p>贪心算法</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501170746624.png" alt="image-20220501170746624"></p>
<ol>
<li>获得整个网络拓扑</li>
<li>使用Dijkstra 算法获得到达其他路由器的最短路径</li>
</ol>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501171117187.png" alt="image-20220501171117187"></p>
<p>扩散即泛洪 <em>flooding</em> 让所有的路由器都能得到这个链路状态分组 LS。大家都这么做，所有可以让每个路由器都能得到其他所有节点的状况</p>
<p><strong>迭代算法即 Floyed 算法 所有顶点的最短路径(非负权值)</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501172715884.png" alt="image-20220501172715884"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501172724932.png" alt="image-20220501172724932"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501172829106.png" alt="image-20220501172829106"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501172900437.png" alt="image-20220501172900437"></p>
<p>一个节点 A 收到来自其他节点 B 的泛洪分组，那么要给这个节点发送 ACK 确认，同时将这个分组发送给 A 的其他的邻居 C D E……并期待它们的确认，如果没有收到确认，那么会 A 会一直重复发这个泛洪分组</p>
<p><strong>因此泛洪是可靠的</strong>，能够保证所有的节点都得到这个分组的信息</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501173145193.png" alt="image-20220501173145193"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501174900775.png" alt="image-20220501174900775"></p>
<h3 id="distance-vector-分布式算法">distance vector-分布式算法</h3>
<p>即 Bellman-Ford 算法</p>
<p>动态规划</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501175221942.png" alt="image-20220501175221942"></p>
<p>距离矢量中要记录</p>
<ol>
<li>目标节点</li>
<li>到达目标节点路径上的下一跳</li>
<li>到达目标节点所需要的 cost</li>
</ol>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501180228299.png" alt="image-20220501180228299"></p>
<p>和邻居交换距离矢量，再加上自己到邻居的代价，即可得到到达目标的最低代价</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501180410731.png" alt="image-20220501180410731"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501180516601.png" alt="image-20220501180516601"></p>
<p><strong>定期测量；定期交换</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501180819621.png" alt="image-20220501180819621"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501181100156.png" alt="image-20220501181100156"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501181731171.png" alt="image-20220501181731171"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501182023121.png" alt="image-20220501182023121"></p>
<ul>
<li>自己到邻居的代价改变了，<strong>要重新计算</strong></li>
<li>邻居给自己的到达目标节点的代价改变了，邻居重新发给自己了，<strong>要重新计算</strong></li>
<li>自己的 DV 更新改变后要通知其他的邻居</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501182434262.png" alt="image-20220501182434262"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501182718158.png" alt="image-20220501182718158"></p>
<p>特点：</p>
<ul>
<li>
<p>好消息传得快</p>
</li>
<li>
<p>坏消息传的慢，需要很多次迭代才能发现不可达</p>
<ul>
<li>
<p>解决办法</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501195112398.png" alt="image-20220501195112398"></p>
<p>因为 C 要通过 B 才能到达 A，所以当 B 向 C 请求到达 A 时，C 应当告诉 B 为 INF。但告诉 D 时 C 会告诉 D 自己是可达的，这样就形成了水平分裂，<strong>C 的左右两边的信息不一样</strong></p>
</li>
<li>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501200139928.png" alt="image-20220501200139928"></p>
<p>但水平分裂在<strong>环状的网络拓扑中效果不好</strong>，可以<strong>缓解</strong>传得慢【C 立即知道不可达】，<strong>但不能解决</strong>【A，B 需要很长时间才能发现】</p>
</li>
</ul>
</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501200647260.png" alt="image-20220501200647260"></p>
<h3 id="LS-和-DV-的比较">LS 和 DV 的比较</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501201342351.png" alt="image-20220501201342351"></p>
<p>上面的<strong>振荡</strong>是指可能上个时间选择这条路径，这个时间因为这条路径拥塞，所以换了一条，下个时间因为拥塞用换回来</p>
<h2 id="5-3-自治系统内部的路由选择协议-内部网关协议">5.3 自治系统内部的路由选择协议-内部网关协议</h2>
<p>前面介绍的是抽象的算法，接下来是具体的协议，协议来实现算法</p>
<h3 id="RIP-适合小网">RIP-适合小网</h3>
<p><em>Routing Information Protocol</em></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501201958125.png" alt="image-20220501201958125"></p>
<p>基于 DV 算法</p>
<ul>
<li>每条链路的 cost = 1，<strong>最大跳数为 15</strong>，如果跳数超过 15，即当作不可达</li>
<li>通告 advertisements：
<ol>
<li>邻居定期<strong>每隔 30 s</strong>，则交换通告</li>
<li><strong>如果对方请求</strong>，那么可以直接发送通告</li>
</ol>
</li>
<li>每个通告<strong>最多通告 25 个目标网络的 DV</strong>，因此<strong>适合小网的自治</strong></li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501202834977.png" alt="image-20220501202834977"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501202845156.png" alt="image-20220501202845156"></p>
<p>毒性逆转就是水平分裂</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501203009738.png" alt="image-20220501203009738"></p>
<p>网络层的功能借助应用进程来实现，为了实现这个功能，还借助了传输层的 UDP</p>
<h3 id="OSPF-适合大网">OSPF-适合大网</h3>
<p><strong>开放最短路径优先</strong> <em>Open Shortest Path First</em></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501203154282.png" alt="image-20220501203154282"></p>
<p>基于 LS 算法</p>
<p>直接在 IP 数据报上传送 OSPF 报文，不需要借助传输层协议</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501203457611.png" alt="image-20220501203457611"></p>
<p><strong>允许根据多个代价（跳数、延迟等）来计算最优</strong></p>
<p>在<strong>大型网络</strong>中支持<strong>层次性 OSPF</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501203810484.png" alt="image-20220501203810484"></p>
<p>分成多个 Area 分组<strong>只在一个 area 内进行泛洪</strong>，不会扩散到外面。area 之间来进行通信需要先交给骨干 area，由骨干 area 交给其他 area 其他 area 再在内部交给目标子网对应的路由器</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220501204152339.png" alt="image-20220501204152339"></p>
<h2 id="5-4-ISP-之间的路由选择">5.4 ISP 之间的路由选择</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220504151614606.png" alt="image-20220504151614606"></p>
<p>前面讲的 RIP OSPF 等都是一个自治区内的路由选择，也就是一个平面内的路由。</p>
<p>但对于全球这么大的网络，显然用这些方法是非常困难的：<strong>规模问题、管理问题、安全问题</strong></p>
<p><strong>自治系统 AS</strong>  <em>Autonomous System</em></p>
<p>因此采用层次性路由，分为两层：</p>
<ol>
<li>将网络划分成一个个的自治区域【<em>规模小，使用之前的路由协议可以轻松解决</em>】，<strong>自治区域内使用内部网关协议</strong> <em>intra-AS routing protocol</em>，且没有要求使用哪种协议，可以是 RIP 也可以是 OSPF 或者是其他的私有的协议</li>
<li>自治区之间的路由：一个自治区在这个层面上只表现为一个点或者若干个很少的点，<strong>使用外部网关协议</strong> <em>inter-As routing protocol</em></li>
</ol>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220504152817951.png" alt="image-20220504152817951"></p>
<h3 id="BGP">BGP</h3>
<p><em>Border Gateway Protocol</em> <strong>边际网关协议</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220504153644839.png" alt="image-20220504153644839"></p>
<p>不是由组织制定的，而是大家约定俗成的，因此称为<strong>事实上的标准</strong></p>
<p>内部网关协议可以任意，但边际网关协议一定的一样的，不然不同的 AS 无法通信</p>
<blockquote>
<p>对于每个AS，每台路由器要么是一台网关路由器（gateway router），要么是一台内部路由器（internal router）。网关路由器位于AS边缘，直接连接到其他AS的路由器。内部路由器仅连接自己AS中的主机和路由器。</p>
</blockquote>
<ul>
<li>
<p><strong>eBGP</strong> <em>exterior BGP</em> 网关路由器从其他相邻的网关路由器得到他们收集来的自己所在的 AS 的可达信息</p>
<p>如下的 1c 把自己子网的可达信息告诉 2a 后，2a 内都得到这个信息，那么 2c 就可以把这个信息进行 re-advertisement，将其<strong>转发</strong>给 3a【<code>但注意加增加一跳信息，即3a 要达到 AS1 需要通过 AS2</code>】，所以 3a 就可以知道 AS1 中的可达信息了，同时 2c 也会把<strong>自己</strong> AS2 的可达信息告诉 3a</p>
</li>
<li>
<p><strong>iBGP</strong> <em>interior BGP</em> 网关路由器将上面得到的子网可达信息传遍 AS 内部的所有路由器。告诉内部路由器，到到某个子网通过我这个网关路由器就可以到</p>
<p>但注意下面的虚线不一定是物理链路，而是 TCP 连接，通过 TCP 传递子网可达信息，那么 TCP 怎么路由呢？自然是通过内部网关协议即可</p>
</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220504154409486.png" alt="image-20220504154409486"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220504155855608.png" alt="image-20220504155855608"></p>
<p><strong>基于改进的 DV 算法</strong>，不仅仅包含距离（即多少跳）还包含路径，因此可以检查出其中的环路，避免无穷计算问题，收敛速度更快</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220504155255097.png" alt="image-20220504155255097"><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220504160748484.png" alt="image-20220504160748484"></p>
<p>每对路由器通过使用<strong>179端口的半永久TCP</strong>连接交换路由选择信息。</p>
<p><strong>使用 TCP 协议交换 BGP 报文</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220504155608413.png" alt="image-20220504155608413"></p>
<p><strong>基于策略的路由</strong>，不像内部网关协议，毫无保留的通告，在不同 AS 之间的通告会基于一定的策略，<strong>有多条路径可选择时，也会基于策略进行选择一条</strong>，不一定就以跳数作为标准，还有其他的考虑因素【<code>内部网关协议注重性能，外部网关协议关注策略</code>】</p>
<p>两个重要的属性是AS-PATH和NEXT-HOP。NEXT-HOP是AS-PATH<strong>起始的路由器接口的IP地址。</strong></p>
<h4 id="BGP-路由选择">BGP 路由选择</h4>
<h5 id="1-热土豆路由选择（hot-potato-routing）">1.热土豆路由选择（hot potato routing）</h5>
<p>选择到开始该路由的多个NEXT-HOP路由器中具有最小开销的那条路径。</p>
<p>热土豆的思想：<strong>尽可能快地将分组送出其AS（最低开销）</strong>，而不担心其AS外部到目的地的余下部分的开销。热土豆路由选择是<strong>自私</strong>的算法。<img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220504163224165.png" alt="image-20220504163224165"></p>
<h5 id="2-路由选择算法">2.路由选择算法</h5>
<p>实践中BGP使用一种比热土豆选择更为复杂的算法，进入BGP路由选择算法的输入是到某前缀的所有路由的集合，如果只有一条这样的路由就选择该路由，<strong>否则依次按照一些消除规则直到剩下一条路由。</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220504161212598.png" alt="image-20220504161212598"></p>
<p>因此去往其他 AS 内的可达信息是由内部网关协议【<code>决定通过哪些 interface 放出数据可以到达网关</code>】和外部网关协议【<code>决定怎么到外部子网</code>】一起决定的</p>
<h2 id="5-5-SDN-控制平面">5.5 SDN 控制平面</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220504165114192.png" alt="image-20220504165114192"></p>
<p>SDN 控制器：</p>
<ul>
<li><code>网络控制应用界面层</code>：控制器通过**“北向”接口**与网络控制应用程序交互。</li>
<li><code>网络范围状态管理层</code>：网络的主机，链路，交换机和其他SDN控制设备的<strong>最新状态信息，以及各种受控设备的流表。</strong></li>
<li><code>通信层</code>：SDN控制器和受控网络设备之间的<strong>通信</strong>。现在被称为<strong>控制器的“南向”接口</strong>。<strong>OpenFlow</strong>就是一种提供这种功能的特定协议。</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220504165445283.png" alt="image-20220504165445283"></p>
<p>采用 TCP 交换报文</p>
<p>3 种类型：</p>
<ul>
<li>控制器–&gt;分组交换机</li>
<li>控制器&lt;–分组交换机</li>
<li>控制器&lt;–&gt;分组交换机</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220504165938040.png" alt="image-20220504165938040"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220504170140801.png" alt="image-20220504170140801"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220504170244075.png" alt="image-20220504170244075"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220504170304691.png" alt="image-20220504170304691"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220504170331049.png" alt="image-20220504170331049"></p>
<p>两种控制器 <strong>Open Daylight</strong> 和 <strong>ONOS</strong>。</p>
<h2 id="5-6-ICMP">5.6 ICMP</h2>
<p><em>Internet Control Message Protocol</em> <strong>因特网控制报文协议</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220504173920723.png" alt="image-20220504173920723"></p>
<h3 id="差错报告">差错报告</h3>
<p>ICMP <strong>最典型</strong>的用途是<strong>差错报告</strong></p>
<p>例如，当运行一个HTTP会话时，会遇到一些诸如“目的网络不可达”之类的错误报文。这种报文就来源于ICMP。在某个位置，IP路由器不能找到一条通往HTTP请求中所指定的主机的路径，该路由器就会向主机生成并发出一个ICMP报文以指示该错误。</p>
<p><strong>ICMP通常被认为是IP的一部分，但从体系结构上讲它位于IP之上</strong>。当一台主机收到一个指明上层协议为ICMP的IP数据报时（上层协议编码为<strong>1</strong>）,它分解出该数据报的内容给ICMP,就像分解岀一个数据报的内容给TCP或UDP 一样。</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220509114924343.png" alt="image-20220509114924343"></p>
<p>ICMP报文有<strong>一个类型字段和一个编码字段</strong>，并且<strong>包含引起该ICMP报文首次生成的 IP 数据报的首部和 ICMP的前8个字节</strong>（以便发送方能确定引发该差错的数据报）。</p>
<p>如下在返回的 11 0 ICMP 报文中包含了引起该 ICMP 报文的源报文的 IP 首部和 ICMP 内容的前 8 B</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220509114508097.png" alt="image-20220509114508097"></p>
<h3 id="ping">ping</h3>
<p>ping程序发送一个ICMP<strong>类型8编码0</strong>的报文到指定主机。目的主机发回一个<strong>类型0编码0</strong>的ICMP回显回答</p>
<h3 id="Traceroute">Traceroute</h3>
<p><strong>利用返回的 ICMP 报文来判断</strong>，通过发送 ping 报文来实现</p>
<p>逐个增加 TTL 发送报文，同时为每个报文设定计时器，当 TTL 减为 0，路由器发送<strong>类型 11 编码 0</strong> 的 TTL 过期差错报告（包含这个路由器的名字和 IP 地址），因此可以得到往返时延。</p>
<p>当到达目标主机时，由于目标主机和 ping 的目标地址相同，因此目标主机会返回类型 0 编码 0 的 ICMP 报文对 ping 进行响应，因此 tracert 就知道已经到达了，无需再发送</p>
<p>（标准的 Traceroute 程序实际上<strong>用相同的TTL发送3 个一组的分组</strong>，因此 Traceroute 输出对每个TTL提供了 3个结果。）</p>
<h2 id="总结">总结</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220504170703171.png" alt="image-20220504170703171"></p>
]]></content>
      <categories>
        <category>计算机网络-自顶向下方法</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>readme</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E6%96%B9%E6%B3%95/readme/</url>
    <content><![CDATA[<p>2022计算机网络-自顶向下笔记<a href="https://www.bilibili.com/video/BV1JV411t7ow">课程链接</a></p>
<p>笔记图片均来自课程PPT</p>
]]></content>
      <categories>
        <category>计算机网络-自顶向下方法</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>6 链路层和局域网</title>
    <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%87%AA%E9%A1%B6%E5%90%91%E4%B8%8B%E6%96%B9%E6%B3%95/6%20%E9%93%BE%E8%B7%AF%E5%B1%82%E5%92%8C%E5%B1%80%E5%9F%9F%E7%BD%91/</url>
    <content><![CDATA[<h1>6 链路层和局域网</h1>
<p><strong>一般网卡实现了链路层和物理层的功能</strong>，它们是紧密捆绑的</p>
<p>标题并不是说广域网没有链路层，而是因为广域网的链路层相比于局域网很简单</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220505164505842.png" alt="image-20220505164505842"></p>
<h2 id="6-1-引论和服务">6.1 引论和服务</h2>
<h3 id="网络连接形式">网络连接形式</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220505193511923.png" alt="image-20220505193511923"></p>
<ul>
<li>
<p><strong>点到点</strong>的链路是指两个路由器之间<strong>有链路相连</strong>，A 通过这条链路<strong>就是发给 B</strong>，不可能到其他地方去，就是封装和解封装的过程，因此比较简单，同理 B 就是发给 A。<strong>一般用于广域网</strong>，如海底电缆、拨号接入【家里面的 ADSL 连接到运营商的 modem 池也是点到点的，因为这条线路被一个人占用，其他人不能用】</p>
<ul>
<li>广域网带宽大，延迟大，因此信道容量大，因此容易碰撞冲突，不适合用多点连接</li>
</ul>
</li>
<li>
<p><strong>多点连接</strong>指多个设备连到交换机上，经过交换机到达其他点。存在<strong>寻址和媒介访问控制问题[在 WAN 中没有]</strong>，要区分不同的网卡( MAC )，处理多个设备发出的报文。<strong>一般用于局域网</strong></p>
<ul>
<li>
<p><strong>共享型介质</strong>：用同轴电缆将多个设备连接在一起，报文发送到电缆上，其他设备都能收到<img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220505193231365.png" alt="image-20220505193231365"></p>
</li>
<li>
<p><strong>网络交换机</strong>：所有设备与网络交换机连接，通过网络交换机来转发</p>
<p>如教室中的 <strong>AP</strong> 无线访问接入点 <em>WirelessAccessPoint</em></p>
<blockquote>
<p>AP 就相当于有线网络的集线器，它能够把各个无线客户端连接起来，<strong>该单元内的所有无线信号都要通过它才能进行交换</strong>。AP 是无线局域网基本模式中必不可少的设备</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h3 id="导论">导论</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220505194239517.png" alt="image-20220505194239517"></p>
<p><strong>链路层的功能：一个节点把帧通过链路传到另一个相邻的节点</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220505195052877.png" alt="image-20220505195052877"></p>
<h3 id="服务">服务</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220505195836892.png" alt="image-20220505195836892"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220505200634302.png" alt="image-20220505200634302"></p>
<ul>
<li>成帧</li>
<li>链路接入【发送帧之前要获得信道的使用权】</li>
<li>相邻两点之间完成可靠数据传输
<ul>
<li>出错率低的链路很少使用，避免了为了保证可靠所做的代价以太网直接有线链路连接，本身很可靠，因此不提供 RDT</li>
<li>无线链路出错率高，RDT 是有必要的。<strong>如果</strong>在链路层<strong>这里不重传</strong>，那么<strong>只能靠源主机重传，这样的代价太大</strong>【这就是为什么在实现了传输层 RDT 时还要实现链路层的 RDT，即<strong>减少代价</strong>】</li>
</ul>
</li>
<li>流量控制</li>
<li>错误检测</li>
<li>差错纠正</li>
<li>半双工和全双工：像对讲机就是半双工，一次只能一个人讲话</li>
</ul>
<p>注意这些服务的链路层<strong>各种协议服务的总和</strong>，<strong>具体到某个协议</strong>时，这个协议提供的服务可能<strong>只是上面服务的一个子集</strong>【如以太网就不提供 RDT】</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220505201034992.png" alt="image-20220505201034992"></p>
<p>网卡；网络适配器；NIC <em>network interface card</em></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220505201201045.png" alt="image-20220505201201045"></p>
<h2 id="6-2-差错检测和纠正">6.2 差错检测和纠正</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220505201458890.png" alt="image-20220505201458890"></p>
<p><strong>EDC</strong> <em>error-detection-and-correction</em></p>
<h3 id="奇偶校验">奇偶校验</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220505201728300.png" alt="image-20220505201728300"></p>
<h3 id="CheckSum">CheckSum</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220505201853632.png" alt="image-20220505201853632"></p>
<h3 id="CRC">CRC</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220505202015191.png" alt="image-20220505202015191"></p>
<p><em>Cyclic Redundancy Check</em></p>
<ol>
<li><strong>模二运算</strong>，位的加法不进位，减法不借位，<strong>就是异或运算</strong></li>
<li><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220505202606426.png" alt="image-20220505202606426">两种表示方式等价</li>
<li><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220505202732087.png" alt="image-20220505202732087">r 次方生成多项式，共 r+1 位</li>
<li><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220506094959577.png" alt="image-20220506094959577">D 左移 R 位模二除 G 得到 R 位余数</li>
<li>接收方使用 G 去除以 D+R 如果除尽，则说明没有出错，否则出错</li>
</ol>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220506095814138.png" alt="image-20220506095814138"></p>
<h2 id="6-3-多点访问协议">6.3 多点访问协议</h2>
<p><strong>MAP</strong> <em>multiple access protocol</em></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220506200041149.png" alt="image-20220506200041149"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220506200152514.png" alt="image-20220506200152514"></p>
<p><strong>多个站点，一个信道</strong>，在信道上发送数据信息、控制信息</p>
<h3 id="MAC">MAC</h3>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220507104848735.png" alt="image-20220507104848735"></p>
<p>从算法角度是 <strong>MAC</strong>，从协议角度是 <strong>MAP</strong></p>
<p>可以分成三大类</p>
<p>在理想情况下，对于速率为 R bps 的广播信 道，<strong>多路访问协议应该具有以下所希望的特点</strong></p>
<ol>
<li>当仅有一个节点发送数据时，该节点具有R bps 的吞吐量；</li>
<li>当有 M 个节点发送数据时，每个节点吞吐量为 R/M bps 这<strong>不必要求 M 个节点中 的每一个节点总是有 R/M 的瞬间速率</strong>，而是每个节点在一些适当定义的时间间隔内应该有 R/M 的平均传输速率。</li>
<li>协议是分散的；这就是说<strong>不会因某主节点故障而使整个系统崩溃</strong>。</li>
<li>协议是<strong>简单的</strong>，使实现不昂贵。</li>
</ol>
<h4 id="1-信道划分协议">1.信道划分协议</h4>
<p><em>channel partitioning protocol</em></p>
<p><strong>低负载的时候，只有部分几个划分被利用了，利用率低；高负载大多数划分都被利用了，因此利用率高</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220507105107496.png" alt="image-20220507105107496"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220507105144286.png" alt="image-20220507105144286"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220507105556900.png" alt="image-20220507105556900"></p>
<p>CDMA 采用编码来区分，不同的站点的编码之间是正交的，可以区分开，是第三代移动通信技术即 3G</p>
<p>4G 5G 是频分时分等多种复杂技术综合使用</p>
<h4 id="2-随机存取协议">2.随机存取协议</h4>
<p><em>random access protocol</em></p>
<p><strong>低负载时利用率高，高负载时冲突增加，利用率下降</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220507105722306.png" alt="image-20220507105722306"></p>
<p>协议规定：【有上百种此类型协议】</p>
<ul>
<li>如何检测冲突</li>
<li>如何从冲突中恢复</li>
</ul>
<p><strong>以太网采用 CSMA/CD</strong></p>
<p><strong>无线局域网 802.11 采用 CSMA/CA</strong></p>
<blockquote>
<p><strong>载波监听多路访问</strong> <strong>CSMA</strong> <em>Carrier Sense Multiple Access</em>：设备监听其它设备是否忙碌，只有在线路空闲时才发送。</p>
<p><strong>冲突检测 CD</strong> <em>collision detect</em></p>
<p><strong>冲突避免 CA</strong> <em>collision avoid</em></p>
</blockquote>
<h5 id="时隙-ALOHA">时隙 ALOHA</h5>
<blockquote>
<p>之所以是 ALOHA 是因为是在夏威夷发明的，ALOHA 在夏威夷语中是你好的意思</p>
</blockquote>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220507110447603.png" alt="image-20220507110447603"></p>
<p>检测到碰撞时，大家都停止在这个时隙发送【会导致该时隙<strong>浪费</strong>】，而在随后的时隙<strong>以概率 p 重发</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220507111032296.png" alt=""></p>
<p><strong>需要节点对时隙时钟同步</strong>，后面介绍的协议均不需要同步</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220507111241924.png" alt="image-20220507111241924"></p>
<h5 id="纯-ALOHA">纯 ALOHA</h5>
<p>事实上先于时隙 ALOHA 提出</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220507111452838.png" alt="image-20220507111452838"></p>
<p>这里的所有帧的长度也是一样的，因此每个帧的传输时间是一样的。<strong>因此称为帧时</strong></p>
<p>因此要求在 t<sub>0</sub>-1~t<sub>0</sub>+1的范围内都没有其他节点发送的概率</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220507111816241.png" alt="image-20220507111816241"></p>
<h5 id="CSMA">CSMA</h5>
<p><strong>CS：在传输前监听有没有冲突，发送后不监听</strong></p>
<p>只能<strong>尽可能减少</strong>，但<strong>不能避免冲突</strong></p>
<p><strong>节点通过局部的 sense 来判断 channel 的全局使用情况</strong>，即通过听到了其他节点发送的信号，才能知道当前信道被使用，但如果其他节点的信号在路上还没有到达该节点，那么将监听不到，因此该节点也会发送信号【<em>因此如果节点间的距离越远，就越有可能发送冲突，因为不能及时检测到</em>】，发送冲突。如下</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220507112739174.png" alt="image-20220507112739174"></p>
<h5 id="CSMA-CD">CSMA/CD</h5>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220507112909094.png" alt="image-20220507112909094"></p>
<p><strong>CD：边发送边监听</strong></p>
<p>检测到冲突就停止传输，减少了对信道的浪费</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220507113244422.png" alt="image-20220507113244422"></p>
<p><strong>以太网</strong>使用</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220507113350871.png" alt="image-20220507113350871"></p>
<p><strong>位时：发送一个 bit 位的时间</strong></p>
<p><strong>强化冲突</strong>：检测到的站点要发 Jam，其他收到Jam 的也要发，从而强化信号，让所有站点都能知道</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508142649572.png" alt="image-20220508142649572"></p>
<p><strong>二进制指数退避算法</strong> <em>exponential backoff</em>：发送冲突时，进入退避状态，<strong>分布式</strong>在一个范围内选择值，如果两个冲突的适配器<strong>选择了不同的值，那么就可以避免冲突</strong>。如果持续失败，那么每次范围<strong>扩大两倍</strong>，两个适配器<strong>选择同一个值的概率指数下降，因此冲突概率指数下降</strong>，但因为范围大，<strong>等待时间也会变大</strong>。其中的 <strong>K 最大为 10</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220507114842201.png" alt="image-20220507114842201"></p>
<ul>
<li>当传播时延接近0时，效率接近1。碰撞的节点将立即中止而不会浪费信道。</li>
<li>传输帧时间变成无穷大时效率为 1 是因为这个帧的传输一直占用信道，其他节点一直等待，也就不存在冲突了</li>
</ul>
<h5 id="CSMA-CA">CSMA/CA</h5>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220507115348328.png" alt="image-20220507115348328"></p>
<p>不像有线介质，无线网络中信号衰减严重，设备间干扰严重，因此<strong>自身信号远远大于其他节点的信号</strong>，不能进行冲突检测</p>
<p>即使冲突检测，如下面的 A C 之间阻隔了，因为检测时 A C 不能相互检测到，因此不会冲突，但如果它们同时发送给 B，那么就导致了冲突；此外如果检测到冲突，但信号非常弱，对当前的传输影响几乎没有，那么即使冲突也可以成功。<strong>因此 WLAN 中是否检测到冲突和成功没有直接关系</strong>，检测了也没有用【<em>在 <strong>LAN</strong> 中没有检测到冲突和成功几乎是对应的关系，因此也<strong>不需要 ACK</strong></em>】</p>
<blockquote>
<p>注意这里的情况有个限制，不碰撞=成功，要求帧的长度要 ≥ 2 τ，τ是两个最远的节点之间数据传输的时间，2 τ 就是一个来回。考虑一个极端情况，在 A 发送后，信号传递到 B，但还差一点才传到 B 时，B 可以发送，那么立即会引起冲突，B 的冲突信号传递到 A 需要 τ 的时间，如果 A 的帧比 2 τ 短，那么冲突信号还没到那么就发送结束了，A 会认为没有碰撞，那么成功了，而事实上是失败的，因为有 B 的信息干扰了。因此在以太网中如果帧的长度比较短，那么会有填充码字段，用来保证长度是 ≥ 2 τ 的</p>
<p>信号在以太网传播1km大约需要5us，即信号传播速率实际约为2x10 A 8m/s。以太网最大端到端长度约为5km，单程传播时延为25us，争用期的一半(即25.6us) 必须大于该值。</p>
<p>对于10M以太网，发送速率为10Mb/s，在争用期(端到端往返传播时延)可发送</p>
<p>512bit，即64字节，因此以太网规定了最短，帧长64字节，若发送数据非常少，那么必须加入- -些填充字节，使得帧长不小于64字节。</p>
</blockquote>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220507120118538.png" alt="image-20220507120118538"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220507121655784.png" alt="image-20220507121655784"></p>
<p>检测到忙碌，<strong>事前就随机选择一个回退值</strong>，并在<strong>检测到信道空闲时递减值</strong>[信道忙时不减值]，<strong>从而避免后面有可能避免的冲突</strong></p>
<p>因为不能做 CD，因此<strong>需要有 ACK</strong> 来保证传输的成功</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220507122230068.png" alt="image-20220507122230068"></p>
<p>使用了 CA 也<strong>无法完全避免冲突</strong>，如下</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220507122532616.png" alt="image-20220507122532616"></p>
<p><strong>协议可选项：预约帧</strong>：可以完全避免冲突，一般用于长数据帧的传输，避免被冲突打断</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220507123042018.png" alt="image-20220507123042018"></p>
<h5 id="线缆接入网络">线缆接入网络</h5>
<p><strong>有线电缆数据服务接口规范</strong> <strong>DOCSIS</strong> <em>Data Over Cable Service Interface Specifications</em></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220507141127462.png" alt="image-20220507141127462"></p>
<p><strong>电缆数据机终端系统 CMTS</strong> <em>Cable Modem Temination System</em></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220507142431441.png" alt="image-20220507142431441"></p>
<ul>
<li>使用 FDM 将上行和下行划分成多个频率信道，上行和下行在不同的频率上发送</li>
<li>下行不存在竞争，只有一个 CMTS，它发送的信息所有节点都能收到，节点通过比较地址来接收数据</li>
<li>上行信道通过 TDM 划分时隙：
<ul>
<li>有一组<strong>专门用于发送时隙请求帧的时隙</strong>，节点需要向 CMTS 发送时隙请求，<strong>请求是独立随机的，这里是会产生碰撞的</strong>。【但不检测碰撞】</li>
<li>CMTS 在下行信道上发送 MAP 报文指定哪个节点可以在哪个指定的时间间隔内发送。如果请求的节点<strong>没有</strong>收到下行报文种对请求分配的<strong>响应</strong>，那么节点就知道<strong>发送碰撞</strong>了。<strong>使用二进制指数退避算法</strong></li>
<li>对于其他用于分配的时隙，因为节点是在<strong>各自时隙上发送信息的，因此不会产生冲突</strong>。</li>
</ul>
</li>
</ul>
<p>因此这种 MAP 分类在信道划分/随机存取中都可以，<strong>可以认为是几种 MAP 的综合</strong></p>
<h4 id="3-轮流-MAC-协议">3.轮流 MAC 协议</h4>
<p><em>taking-turns protocol</em></p>
<p><strong>高负载和低负载的利用率都很高</strong>【<em>但高负载和低负载的利用率没有对应的前面两种方式高，因为有一定的消耗</em>】，但过于复杂，使用得很少。</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508093809110.png" alt="image-20220508093809110"></p>
<h5 id="轮询-集中式">轮询-集中式</h5>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508093900481.png" alt="image-20220508093900481"></p>
<p>由主节点一个个询问节点要不要传输数据</p>
<p>主节点首先向节点1发送一个报文，告诉它（节点1） 能够传输的帧的最多数量。在节点1传输了某些帧后，主节点告诉节点2它（节点2）能够传输的帧的最多数量。</p>
<ul>
<li>等待问题</li>
<li>主节点故障问题</li>
</ul>
<h5 id="令牌传递-分布式">令牌传递-分布式</h5>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508094106210.png" alt="image-20220508094106210"></p>
<p>令牌：特殊的帧</p>
<p>当一个节点收到令牌时，仅当它有一些帧要发送时，它才持有这个令牌，发送完最大数目的帧数后，又将令牌转交给下一个节点；否则，它立即向下一个节点转发该令牌。</p>
<p>谁发的，最终要由其接收</p>
<ul>
<li>节点忘记释放令牌问题</li>
<li>令牌丢失问题</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508094533196.png" alt="image-20220508094533196"></p>
<h2 id="6-4-LANS-局域网技术">6.4 LANS 局域网技术</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508112252694.png" alt="image-20220508112252694"></p>
<ul>
<li>
<p><strong>IP 地址是分层的，便于路由聚集、计算，减少路由表数量；</strong></p>
</li>
<li>
<p><strong>MAC 地址是平面的</strong><br>
<strong>48 位</strong> MAC 地址/链路层地址/局域网地址：<strong>用于区分一个物理网络内部的不同网卡/节点，从而将数据封装成帧发送</strong></p>
<p>前3个字节代表网络硬件制造商的编号，后3个字节代表该制造商所制造的某个网络产品(如网卡)的系列号</p>
</li>
<li>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508112953182.png" alt="image-20220508112953182"><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508113255757.png" alt="image-20220508113255757"></p>
</li>
</ul>
<p>根据 IP 找到下一跳，再修改目标 MAC 地址为下一跳的 MAC 地址。才能使用链路层的网卡去发送到对应的节点</p>
<p>从网络层的角度看，最后一跳就是一跳，从一个 IP 到下一个 IP，但从链路层来看，最后一跳可能还要经过多个交换机才能到达</p>
<p><strong>全 1 的 MAC 地址是广播地址，交换机应该将其转发给局域网内的所有节点</strong></p>
<h3 id="ARP">ARP</h3>
<p><strong>地址解析协议</strong> <em>Address Resolution Protocol</em></p>
<p><strong>网络层的服务，只涉及网络层和数据链路层</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508113448792.png" alt="image-20220508113448792"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508113745090.png" alt="image-20220508113745090"></p>
<p><strong>原理</strong>：ARP <strong>即查即用</strong>，A 需要查询目标 B 的 MAC 地址时就广播一个包含 B 的 IP 地址的 ARP 查询包，其中源 MAC 地址是 A 的，目标 MAC 地址是全 1 的广播地址，B 收到对比 IP 后就将自己的 MAC 地址作为源 MAC 地址发送应答帧给 A，并记录发送方 MAC 地址，如果对比后发现不是自己的 IP，那么<strong>会丢弃</strong>，且会<strong>记录</strong>下对应的发送方 IP 的MAC地址。。</p>
<p>A 保存这个 IP : MAC 映射时间为 <strong>20 min</strong>，超时就删除</p>
<h4 id="例子">例子</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508114342550.png" alt="image-20220508114342550"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508114502765.png" alt="image-20220508114502765"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508114813292.png" alt="image-20220508114813292"></p>
<p>源 IP 和目标 IP 都不发生改变</p>
<p>但 源 MAC 和目标 MAC 在每一段中都是改变的</p>
<h3 id="以太网">以太网</h3>
<p>最主流的 LAN 技术</p>
<blockquote>
<p>以太网对本地区域联网的重要性就像因特网对全球联网所具有的地位那样。</p>
</blockquote>
<blockquote>
<p>鲍勃·麦卡夫 Bob Metcalfe 以太网之父</p>
</blockquote>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508114936272.png" alt="image-20220508114936272"></p>
<p>节点都连接到同轴电缆上，两端有终结器用于吸引信号，防止信号反射回去，影响 CSMA/CD</p>
<h4 id="拓扑结构">拓扑结构</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508121936688.png" alt="image-20220508121936688"></p>
<p><strong>发展：总线→星形</strong></p>
<ol>
<li><strong>同轴电缆</strong>，2 Mbps。但如果电缆损坏一部分，那么所有节点都不能使用，会有反射影响 CSMA/CD</li>
<li><strong>使用集线器 HUB</strong></li>
<li><strong>交换机 switch</strong></li>
</ol>
<h4 id="以太网帧结构">以太网帧结构</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508122149754.png" alt="image-20220508122149754"></p>
<ul>
<li>
<p><strong>前导码/前同步码 Preamble</strong>【<strong>8 B</strong>】：前 7 个字节是 10101010，后 1 个字节是 10101011</p>
<blockquote>
<p>前同步码字段的前 7 字节用于“唤醒”接收适配器，并且将<strong>它们的时钟和发送方的时钟同步。</strong></p>
<p>为什么这些时钟会不同步呢？</p>
<p>记住适配器的目的是根据以太局域网类型的不同，分别以 10 Mbps、100 Mbps或者 1 Gbps 的速率传输帧。然而网卡不会以精确的额定速率传输帧；相对于额定速率总有一些<strong>漂移</strong>，局域网上的其他适配器不会预先知道这种漂移的。<strong>接收适配器只需通过锁定前同步码的前7字节的比特的速率，就能够锁定适配器A的时钟。<strong>前同步码的第 8 个字节的最后两个比特（第一个出现的</strong>两个连续的 1</strong>）警告接收适配器数据要到来了。</p>
</blockquote>
</li>
<li>
<p><strong>目标 MAC 地址</strong>【<strong>6 B</strong>】：网卡接收：</p>
<ol>
<li>目标 MAC 地址是自己地址的，<strong>非混杂模式</strong>，此时网卡只接受来自网络端口的目的地址指向自己的数据。<strong>其他丢弃</strong></li>
<li>目标 MAC 地址是全 1 的广播地址</li>
<li>其他的不是上面两种情况的 MAC，把网卡设置成<strong>混杂模式</strong>，能够接收所有经过它的数据流，而不论其目的地址是否是它。因此抓包软件就是使用的混杂模式</li>
</ol>
</li>
<li>
<p><strong>源 MAC 地址【6 B】</strong></p>
</li>
<li>
<p><strong>类型 TYPE【2 B】</strong>：标识上层的网络协议是什么，如 type = 0x0806 时会将帧交给 ARP 协议</p>
</li>
<li>
<p><strong>数据/载荷</strong>【<strong>46 ~ 1500 B</strong>】：这个字段承载了 IP数据报。以太网的<strong>最大传输单元 （MTU）是1500字节</strong>。这意味着如果<strong>IP数据报超过了 1500字节【包括头部】</strong>，则主机必须将该数据报分片。数据字段的<strong>最小长度是46字节</strong>。这意味着如 果IP数据报小于46字节，数据报必须被<strong>填充到46字节</strong>。</p>
</li>
<li>
<p><strong>CRC【4 B】</strong>：放在最后，因此可以边发边生成，发完数据直接发送 CRC 即可</p>
</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508141755780.png" alt="image-20220508141755780"></p>
<p>因为有形介质本身比较可靠了，如果上层是 UDP，那么就不会重传了，对方的应用层会看到 gap，有内容丢失了</p>
<p>而如果是 TCP 则会引起重传，但以太网并不知道它在传输一个之前的数据，因为它并不关注</p>
<blockquote>
<p>缺乏可靠的传输有助于使得以太网简单和便宜</p>
</blockquote>
<h4 id="802-3-以太网标准">802.3 以太网标准</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508142223948.png" alt="image-20220508142223948"></p>
<p>很多的以太网标准：<em>是链路层也是物理层的规范</em></p>
<ul>
<li><strong>相同</strong>的 MAC 协议和帧结构</li>
<li><strong>不同</strong>的速率、不同的物理层标准、不同的物理层媒介</li>
</ul>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508142924466.png" alt="image-20220508142924466"></p>
<p>100 Mbps 为 fast Ethernet</p>
<p>T 指双绞线</p>
<p>节点与 HUB 的最大距离是 100 m</p>
<h4 id="曼彻斯特编码">曼彻斯特编码</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508143329585.png" alt="image-20220508143329585"></p>
<p>曼彻斯特编码是一种<strong>自同步</strong>的编码方式，即<strong>时钟同步信号就隐藏在数据波形中</strong>。该跳变既可作为时钟信号，又可作为数据信号</p>
<blockquote>
<p>如果不是这样，比如传输全为 1 的数据，那么波形电位永远是 1，接收方如果不知道时钟频率，将不知道这里面有多少个 1</p>
</blockquote>
<p>跳变是为了能够将时钟信号抽取出来，跳变的方向代表传输的数据。<strong>因此一段信号可以将时钟信号和数据信号同时传输</strong></p>
<p>接收方只要按照这个时钟来接收数据即可</p>
<blockquote>
<p>每位中间的电平转换既表示了数据代码，也作为定时信号使用</p>
<p>由于曼彻斯特码在每个时钟位都必须有一次变化，因此，其编码的效率仅可达到50%左右</p>
</blockquote>
<h4 id="4b5b-编码">4b5b 编码</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508144507843.png" alt="image-20220508144507843"></p>
<p><strong>用 5 个bit 去代表 4 个 bit</strong>，使得波形不会一直不变，一定是错落有致的，因此可以从中提取时钟信号，而又不像上面的编码方式那样，每个  bit 都包含时钟信号，提高效率到 80%</p>
<h4 id="8b10b-编码">8b10b 编码</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508144541326.png" alt="image-20220508144541326"></p>
<p>千兆以太网中使用 8b10b 编码</p>
<h3 id="网络交换设备">网络交换设备</h3>
<h4 id="集线器-HUB">集线器 HUB</h4>
<p>所有节点接到 HUB 的端口上，HUB 将信号往所有端口转发。<strong>HUB 还可以级联</strong>。所有通过 HUB 连接在一起的都在<strong>一个碰撞域</strong>【<em><strong>也称作网段 LAN segment</strong></em>】内，一次只能一个节点发送数据物理上是星形，但逻辑上是总线形的，在盒子里面是总线不能将不同速率的 HUB 连接在一起，将无法工作，如 10 Mbps 和 100 Mbps 不能连接在一起<br>
<img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508145523925.png" alt="image-20220508145523925"></p>
<h4 id="交换机">交换机</h4>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508151801903.png" alt="image-20220508151801903"></p>
<p>实现一个端口到其他端口的转发【而不是所有端口】。一个主机连接交换机的一个端口，消除了 CSMA/CD 在高负载下的冲突问题，<strong>因为一个主机就一个端口【独享】，不同主机发到不同端口，不存在碰撞</strong>。<strong>解决了 CSMA/CD 高负载利用率低的问题</strong>。<em>这也是为什么以太网获得统治地位的原因，其他原因：带宽不断升级、价格低廉</em></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508152313976.png" alt="image-20220508152313976"></p>
<p>是一个<strong>存储转发</strong>设备，把帧存下来，根据帧头的目标 MAC 地址决定往哪个端口发，<strong>在发送之前要根据 CSMA/CD 的机制接入到这个目标网段</strong>。【可以认为交换机<strong>每个端口都是一个网段</strong>【<em>隔离冲突域</em>】，因此某两个端口在发送接收的同时，其他端口也可以同时并发使用】</p>
<p>任何输岀接口之一的速率可能暂时会超过该接口的链路容量。为了解决这个问题，交换机<strong>输出接口设有缓存</strong></p>
<p>交换机将链路<strong>彼此隔离</strong>，因此不同带宽的链路可以同时接在交换机上</p>
<p>因此如果主机与交换机<strong>直连</strong>，那么在发送前的监听就<strong>只是一个形式</strong>，交换机会协调转发，决不会向相同的接口转发多个帧，<strong>因此 CD 没有意义</strong>。即在基于交换机的以太局域网中，不会有碰撞，<strong>因此没有必要使用MAC协议了!</strong></p>
<p>交换机同样可以级联</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508152405189.png" alt="image-20220508152405189"></p>
<p><strong>即插即用，自学习交换表，无需人工配置</strong></p>
<p>MAC 和端口地址不是一直捆绑，经过一定时间就删除（时戳），这种状态维护机制称为<strong>软状态维护机制</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508152822632.png" alt="image-20220508152822632"></p>
<p>在有帧通过端口<strong>发送进来</strong>时，才根据<strong>源 MAC 学习 MAC : 端口</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508152915407.png" alt="image-20220508152915407"></p>
<ul>
<li>如果<strong>进来的端口</strong>和匹配目标 MAC 后要发<strong>出去的端口一致</strong>，那么就<strong>过滤</strong>掉，不转发【<em>原因是下层主机要发送到下层某个主机，经过下层级联的交换机泛洪，或者是下层的 HUB 向所有节点转发</em>】</li>
<li>如果<strong>不知道</strong>目标 MAC 从哪个端口转发，表中还没有，那么就<strong>泛洪</strong>，向所有端口转发</li>
</ul>
<h5 id="交换机和路由器">交换机和路由器</h5>
<p>通常，由<strong>几百台主机组成的小网络通常有几个局域网网段</strong>。对于这些<strong>小网络</strong>，<strong>交换机</strong>就足够了，因为它们不要求IP地址的任何配置就能使流量局部化并增加总计吞吐量。但是在由几千台主机组成的更大网络中，通常在网络中（除了交换机之外）还包括路由器。路由器提供了更健壮的流量隔离方式和对广播风暴的控制，并在网络的主机之间使用更“智能的”路由。</p>
<p>如下可见一般是<strong>大量的交换机级联</strong></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508153629425.png" alt="image-20220508153629425"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508154001654.png" alt="image-20220508154001654"></p>
<p>交换机级联</p>
<p>运行生成树算法，不能出现环</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508153813514.png" alt="image-20220508153813514"><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508154315076.png" alt="image-20220508154315076"></p>
<h3 id="VLANS-虚拟局域网">VLANS 虚拟局域网</h3>
<p>局域网存在：问题</p>
<ul>
<li>缺乏流量隔离</li>
<li>用户在不同局域网内移动需要改变物理布线</li>
</ul>
<p>能够通过支持虚拟局域网（Virtula Local Network, VLAN）的交换机来处理。</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508195502445.png" alt="image-20220508195502445"></p>
<p>原理：<strong>将交换机的端口划分成不同的组</strong>，来自一个端口的广播流量仅能到达这个组中的其他端口，而不会扩散到其他组，<strong>实现隔离</strong></p>
<p>此时出现新的问题：两个系的之间不能发送信息了。</p>
<p>解决办法：**将 VLAN 的一个端口和一个外部路由器相连。**从电子工程系发往计算机科学系的数据报将首先跨越 EE VLAN 到达路由器，然后由该路由器转发跨越 CS VLAN 到达 CS 主机</p>
<h2 id="6-5-链路虚拟化-MPLS">6.5 链路虚拟化 MPLS</h2>
<p>本科不涉及</p>
<h2 id="6-6-数据中心网络">6.6 数据中心网络</h2>
<p>DC Data Center</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508154744551.png" alt="image-20220508154744551"><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508201210796.png" alt="image-20220508201210796"></p>
<p>在数据中心内部, 外部请求首先被定向到一个<strong>负载均衡器（load balancer）</strong> 。负载均衡器的任务是向主机分发请求，以主机当前的负载作为函数来在主机之间<strong>均衡负载</strong>。</p>
<p>由于负载均衡器<strong>基于分组的目的端口号</strong> （第四层）以及<strong>目的IP地址做决策</strong>，因此它们常被称为“<strong>第四层交换机</strong>”</p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508205529567.png" alt="image-20220508205529567"></p>
<p>用全连接拓扑可以改善等级拓扑中的主机间通讯带宽收到限制的问题，这里二层交换机之间通讯有多条路径可选</p>
<h2 id="6-7-web-网页的请求历程">6.7 web 网页的请求历程</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508155333308.png" alt="image-20220508155333308"></p>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508205857338.png" alt="image-20220508205857338"></p>
<p>见书本</p>
<h2 id="总结">总结</h2>
<p><img src="https://screen-shot.obs.cn-north-4.myhuaweicloud.com/image-20220508160602559.png" alt="image-20220508160602559"></p>
]]></content>
      <categories>
        <category>计算机网络-自顶向下方法</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
</search>
